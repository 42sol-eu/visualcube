{"version":3,"sources":["webpack://sr-visualizer/webpack/universalModuleDefinition","webpack://sr-visualizer/webpack/bootstrap","webpack://sr-visualizer/./src/cube/constants.ts","webpack://sr-visualizer/./src/constants.ts","webpack://sr-visualizer/./src/math.ts","webpack://sr-visualizer/./src/cube/parsing/color.ts","webpack://sr-visualizer/./src/cube/geometry.ts","webpack://sr-visualizer/./src/cube/simulation.ts","webpack://sr-visualizer/./src/index.ts","webpack://sr-visualizer/./src/cube/drawing.ts","webpack://sr-visualizer/./node_modules/svg.js/dist/svg.js","webpack://sr-visualizer/./src/cube/parsing/arrow.ts","webpack://sr-visualizer/./src/cube/stickers.ts","webpack://sr-visualizer/./src/cube/masking.ts","webpack://sr-visualizer/./src/cube/parsing/algorithm.ts","webpack://sr-visualizer/./src/cube/parsing/options.ts","webpack://sr-visualizer/./src/cube/parsing/rotation.ts","webpack://sr-visualizer/./src/cube/parsing/faceletColors.ts","webpack://sr-visualizer/./src/cube/parsing/colorScheme.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_a","_b","Face","constants_1","AllFaces","U","R","F","D","L","B","AlgorithmUnit","FaceRotationVectors","DefaultColorScheme","ColorCode","Yellow","Red","Blue","White","Orange","Green","JapaneseColorScheme","AxisSymbolToAxis","x","y","z","possibleMoves","M","E","S","X","Y","Z","TurnAbbreviation","Masking","ColorName","ColorAbbreviation","ColorNameToCode","Black","DarkGray","Gray","Silver","Purple","Pink","ColorAbbreviationToCode","Transparent","Axis","translate","pos","v","map","index","scale","scalar","makeMatrix","rows","cols","matrix","transScale","rotate","axis","radians","newPosition","slice","Math","cos","sin","project","radians2Degrees","PI","parseColor","raw","exec","math_1","makeStickerPosition","face","cubeSize","Error","makeFaceStickers","options","stickers","row","_loop_1","col","sticker","centerTranslation","viewportRotations","forEach","rotation","dist","rotateFaces","faceRotations","rotations","reduce","acc","makeCubeGeometry","view","_c","_d","_e","_f","TurnType","faceIdentity","stickerNumber","counterClockwiseSticker","clockwiseSticker","doubleTurn","OppositeTurn","Clockwise","CounterClockwise","Double","AxisOrientation","CubeData","initialValues","this","faces","numStickers","clockwiseMapping","counterClockwiseMapping","doubleMapping","initValues","push","_this","currentValue","rotateFace","turn","newStickerNumber","reverse","axisRotation","offset","range","faceOrder","forward","double","originalValues","stickerIndex","j","length","nextFace","valueIndex","nextFaceValueIndex","xLayersRotation","yLayersRotation","zLayersRotation","safeSlices","rTurn","turnType","slices","lTurn","uTurn","dTurn","fTurn","bTurn","mTurn","eTurn","sTurn","xTurn","yTurn","zTurn","move","JSON","stringify","__assign","assign","arguments","apply","geometry_1","drawing_1","stickers_1","constants_2","options_1","defaultOptions","width","height","colorScheme","cubeColor","cubeOpacity","stickerOpacity","outlineWidth","strokeWidth","viewbox","cubeSVG","container","extraOptions","getOptions","geomety","stickerColors","makeStickerColors","renderCube","parsedOptions","parseOptions","cubePNG","element","document","createElement","setTimeout","svgElement","querySelector","targetImage","appendChild","can","ctx","getContext","loader","Image","onload","drawImage","src","toDataURL","svgAsXML","XMLSerializer","serializeToString","encodeURIComponent","SVG","arrow_1","defaultFaceRotations","faceVisible","getCubeOutlineGroup","svg","cubeOutlineGroup","group","opacity","attr","stroke-width","stroke-linejoin","renderCubeOutline","outlinePoints","polygon","fill","stroke","renderFaceStickers","stoke-opacity","centerPoint","renderSticker","getStickerColor","g","p1","p2","p3","p4","stickerColor","stickerPoints","Array","isArray","faceIndex","indexOf","colorIndex","renderOLLStickers","v1","v2","renderArrow","geometry","arrow","p1y","floor","s1","p1x","p2y","s2","p2x","center","s3","p3y","p3x","influence","p_","atan","lineSvg","path","color","headSvg","transform","style","renderOrder","sort","a","b","getRenderOrder","size","hiddenFaces","filter","visibleFaces","backgroundSvg","rect","backgroundColor","renderBackground","cubeOutlineGroup_1","ollGroup_1","stroke-opacity","getOllLayerGroup","arrowGroup","stroke-linecap","getArrowGroup","arrowDefinitions","arrows","parseArrows","__WEBPACK_AMD_DEFINE_RESULT__","undefined","supported","Doc","parser","draw","prepare","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","setAttribute","extend","methods","pop","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","parse","getAttribute","body","getElementsByTagName","documentElement","nested","poly","polyline","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","array","block","il","result","degrees","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","cx","cy","rx","ry","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","match","test","replace","parseInt","substring","join","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","isColor","fallback","valueOf","lastValue","lastDestination","settle","seen","split","string","trim","parseFloat","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","box","bbox","isNaN","getBBox","pathHandlers","p0","H","V","C","Q","T","A","mlhvqtcsa","jl","toUpperCase","PathArray","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","prev","curr","concat","Point","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","_events","dom","proportionalSize","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","inside","show","hide","visible","classes","hasClass","addClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","well","Parent","innerHTML","firstChild","childNodes","each","lines","fn","removeAttribute","keys","is","obj","easing","-","<>",">","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","Boolean","min","fire","fx","eachAt","self","Matrix","multiply","undo","extract","isEased","real","G","num","Text","plot","leading","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","parseMatrix","around","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listenerId","events","listener","binding","bag","_svgjsListenerId","ev","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","getElementById","version","spof","nextSibling","siblings","position","next","previous","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","symbol","Use","file","use","Rect","Circle","circle","Ellipse","ellipse","Line","line","Polyline","Polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","loaded","error","_rebuild","_build","oy","nodeType","newLined","textContent","build","tspan","newLine","textPath","blankLineOffset","dy","plain","Tspan","dx","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","toLowerCase","charAt","comp","w","h","abs","extension","dmove","radius","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","color_1","arrowPattern","parseArrow","RegExp","part","masking_1","simulation_1","algorithm_1","makeMasking","maskAlg","maskCubeData_1","parseAlgorithm","faceMappedStickers","cubeData","alg","case","parseCase","algorithm","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","maskingFunctions","FL","F2L","LL","CLL","ELL","OLL","OCLL","OELL","COLL","OCELL","WV","VH","ELS","CLS","CMLL","CROSS","F2L3","F2L2","F2LSM","F2L1","F2B","LINE","masking","faceValues","turnRegex","Opposite","turns","rawSlices","rawFace","outerBlockIndicator","rawType","getMove","getTurnType","getSlices","rotation_1","faceletColors_1","colorScheme_1","rawOptions","queryString","substr","pairs","pair","decodeURIComponent","parseQuery","paramValue","parseRotationSequence","parseFaceletColors","parseColorScheme","rawSequence","rotationRegex","matchText","axisSymbol","rawValue","colors","parsed","scheme","rawColors","parsedColor","colorCode","parseCommaSeparatedValues","parseAbbreviations"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sr-visualizer\"] = factory();\n\telse\n\t\troot[\"sr-visualizer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b;\nvar constants_1 = require(\"./../constants\");\nvar Face;\n(function (Face) {\n    Face[Face[\"U\"] = 0] = \"U\";\n    Face[Face[\"R\"] = 1] = \"R\";\n    Face[Face[\"F\"] = 2] = \"F\";\n    Face[Face[\"D\"] = 3] = \"D\";\n    Face[Face[\"L\"] = 4] = \"L\";\n    Face[Face[\"B\"] = 5] = \"B\";\n})(Face = exports.Face || (exports.Face = {}));\nexports.AllFaces = [Face.U, Face.R, Face.F, Face.D, Face.L, Face.B];\nvar FaceRotationVectors = /** @class */ (function () {\n    function FaceRotationVectors() {\n    }\n    FaceRotationVectors.U = [0, -1, 0];\n    FaceRotationVectors.R = [1, 0, 0];\n    FaceRotationVectors.F = [0, 0, -1];\n    FaceRotationVectors.D = [0, 1, 0];\n    FaceRotationVectors.L = [-1, 0, 0];\n    FaceRotationVectors.B = [0, 0, 1];\n    return FaceRotationVectors;\n}());\nexports.FaceRotationVectors = FaceRotationVectors;\nexports.DefaultColorScheme = (_a = {},\n    _a[Face.U] = constants_1.ColorCode.Yellow,\n    _a[Face.R] = constants_1.ColorCode.Red,\n    _a[Face.F] = constants_1.ColorCode.Blue,\n    _a[Face.D] = constants_1.ColorCode.White,\n    _a[Face.L] = constants_1.ColorCode.Orange,\n    _a[Face.B] = constants_1.ColorCode.Green,\n    _a);\nexports.JapaneseColorScheme = (_b = {},\n    _b[Face.U] = constants_1.ColorCode.Blue,\n    _b[Face.R] = constants_1.ColorCode.Orange,\n    _b[Face.F] = constants_1.ColorCode.Green,\n    _b[Face.D] = constants_1.ColorCode.White,\n    _b[Face.L] = constants_1.ColorCode.Red,\n    _b[Face.B] = constants_1.ColorCode.Yellow,\n    _b);\nvar AlgorithmUnit;\n(function (AlgorithmUnit) {\n    AlgorithmUnit[\"F\"] = \"F\";\n    AlgorithmUnit[\"U\"] = \"U\";\n    AlgorithmUnit[\"R\"] = \"R\";\n    AlgorithmUnit[\"L\"] = \"L\";\n    AlgorithmUnit[\"D\"] = \"D\";\n    AlgorithmUnit[\"B\"] = \"B\";\n    AlgorithmUnit[\"M\"] = \"M\";\n    AlgorithmUnit[\"E\"] = \"E\";\n    AlgorithmUnit[\"S\"] = \"S\";\n    AlgorithmUnit[\"X\"] = \"x\";\n    AlgorithmUnit[\"Y\"] = \"y\";\n    AlgorithmUnit[\"Z\"] = \"z\";\n})(AlgorithmUnit = exports.AlgorithmUnit || (exports.AlgorithmUnit = {}));\nexports.AxisSymbolToAxis = {\n    'x': 0 /* X */,\n    'y': 1 /* Y */,\n    'z': 2 /* Z */\n};\nexports.possibleMoves = [\n    AlgorithmUnit.F,\n    AlgorithmUnit.U,\n    AlgorithmUnit.R,\n    AlgorithmUnit.L,\n    AlgorithmUnit.D,\n    AlgorithmUnit.B,\n    AlgorithmUnit.M,\n    AlgorithmUnit.E,\n    AlgorithmUnit.S,\n    AlgorithmUnit.X,\n    AlgorithmUnit.Y,\n    AlgorithmUnit.Z,\n];\nvar TurnAbbreviation;\n(function (TurnAbbreviation) {\n    TurnAbbreviation[\"Clockwise\"] = \"\";\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\n    TurnAbbreviation[\"Double\"] = \"2\";\n})(TurnAbbreviation = exports.TurnAbbreviation || (exports.TurnAbbreviation = {}));\nvar Masking;\n(function (Masking) {\n    Masking[\"FL\"] = \"fl\";\n    Masking[\"F2L\"] = \"f2l\";\n    Masking[\"LL\"] = \"ll\";\n    Masking[\"CLL\"] = \"cll\";\n    Masking[\"ELL\"] = \"ell\";\n    Masking[\"OLL\"] = \"oll\";\n    Masking[\"OCLL\"] = \"ocll\";\n    Masking[\"OELL\"] = \"oell\";\n    Masking[\"COLL\"] = \"coll\";\n    Masking[\"OCELL\"] = \"ocell\";\n    Masking[\"WV\"] = \"wv\";\n    Masking[\"VH\"] = \"vh\";\n    Masking[\"ELS\"] = \"els\";\n    Masking[\"CLS\"] = \"cls\";\n    Masking[\"CMLL\"] = \"cmll\";\n    Masking[\"CROSS\"] = \"cross\";\n    Masking[\"F2L3\"] = \"f2l_3\";\n    Masking[\"F2L2\"] = \"f2l_2\";\n    Masking[\"F2LSM\"] = \"f2l_sm\";\n    Masking[\"F2L1\"] = \"f2l_1\";\n    Masking[\"F2B\"] = \"f2b\";\n    Masking[\"LINE\"] = \"line\";\n})(Masking = exports.Masking || (exports.Masking = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b;\nvar ColorCode;\n(function (ColorCode) {\n    ColorCode[\"Black\"] = \"#000000\";\n    ColorCode[\"DarkGray\"] = \"#404040\";\n    ColorCode[\"Gray\"] = \"#808080\";\n    ColorCode[\"Silver\"] = \"#BFBFBF\";\n    ColorCode[\"White\"] = \"#FFFFFF\";\n    ColorCode[\"Yellow\"] = \"#FEFE00\";\n    ColorCode[\"Red\"] = \"#EE0000\";\n    ColorCode[\"Orange\"] = \"#FFA100\";\n    ColorCode[\"Blue\"] = \"#0000F2\";\n    ColorCode[\"Green\"] = \"#00D800\";\n    ColorCode[\"Purple\"] = \"#A83DD9\";\n    ColorCode[\"Pink\"] = \"#F33D7B\";\n})(ColorCode = exports.ColorCode || (exports.ColorCode = {}));\nvar ColorName;\n(function (ColorName) {\n    ColorName[\"Black\"] = \"black\";\n    ColorName[\"DarkGray\"] = \"darkGray\";\n    ColorName[\"Gray\"] = \"gray\";\n    ColorName[\"Silver\"] = \"silver\";\n    ColorName[\"White\"] = \"white\";\n    ColorName[\"Yellow\"] = \"yellow\";\n    ColorName[\"Red\"] = \"red\";\n    ColorName[\"Orange\"] = \"orange\";\n    ColorName[\"Blue\"] = \"blue\";\n    ColorName[\"Green\"] = \"green\";\n    ColorName[\"Purple\"] = \"purple\";\n    ColorName[\"Pink\"] = \"pink\";\n})(ColorName = exports.ColorName || (exports.ColorName = {}));\nvar ColorAbbreviation;\n(function (ColorAbbreviation) {\n    ColorAbbreviation[\"Black\"] = \"n\";\n    ColorAbbreviation[\"DarkGray\"] = \"d\";\n    ColorAbbreviation[\"Gray\"] = \"l\";\n    ColorAbbreviation[\"Silver\"] = \"s\";\n    ColorAbbreviation[\"White\"] = \"w\";\n    ColorAbbreviation[\"Yellow\"] = \"y\";\n    ColorAbbreviation[\"Red\"] = \"r\";\n    ColorAbbreviation[\"Orange\"] = \"o\";\n    ColorAbbreviation[\"Blue\"] = \"b\";\n    ColorAbbreviation[\"Green\"] = \"g\";\n    ColorAbbreviation[\"Purple\"] = \"m\";\n    ColorAbbreviation[\"Pink\"] = \"p\";\n    ColorAbbreviation[\"Transparent\"] = \"t\";\n})(ColorAbbreviation = exports.ColorAbbreviation || (exports.ColorAbbreviation = {}));\nexports.ColorNameToCode = (_a = {},\n    _a[ColorName.Black] = ColorCode.Black,\n    _a[ColorName.DarkGray] = ColorCode.DarkGray,\n    _a[ColorName.Gray] = ColorCode.Gray,\n    _a[ColorName.Silver] = ColorCode.Silver,\n    _a[ColorName.White] = ColorCode.White,\n    _a[ColorName.Yellow] = ColorCode.Yellow,\n    _a[ColorName.Red] = ColorCode.Red,\n    _a[ColorName.Orange] = ColorCode.Orange,\n    _a[ColorName.Blue] = ColorCode.Blue,\n    _a[ColorName.Green] = ColorCode.Green,\n    _a[ColorName.Purple] = ColorCode.Purple,\n    _a[ColorName.Pink] = ColorCode.Pink,\n    _a);\nexports.ColorAbbreviationToCode = (_b = {},\n    _b[ColorAbbreviation.Black] = ColorCode.Black,\n    _b[ColorAbbreviation.DarkGray] = ColorCode.DarkGray,\n    _b[ColorAbbreviation.Gray] = ColorCode.Gray,\n    _b[ColorAbbreviation.Silver] = ColorCode.Silver,\n    _b[ColorAbbreviation.White] = ColorCode.White,\n    _b[ColorAbbreviation.Yellow] = ColorCode.Yellow,\n    _b[ColorAbbreviation.Red] = ColorCode.Red,\n    _b[ColorAbbreviation.Orange] = ColorCode.Orange,\n    _b[ColorAbbreviation.Blue] = ColorCode.Blue,\n    _b[ColorAbbreviation.Green] = ColorCode.Green,\n    _b[ColorAbbreviation.Purple] = ColorCode.Purple,\n    _b[ColorAbbreviation.Pink] = ColorCode.Pink,\n    _b[ColorAbbreviation.Transparent] = null,\n    _b);\n","\"use strict\";\n/**\n * Methods for manipulating points in 3d space (Vec3)\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Axis;\n(function (Axis) {\n    Axis[Axis[\"X\"] = 0] = \"X\";\n    Axis[Axis[\"Y\"] = 1] = \"Y\";\n    Axis[Axis[\"Z\"] = 2] = \"Z\";\n})(Axis = exports.Axis || (exports.Axis = {}));\nfunction makeMatrix(rows, cols) {\n    var matrix = [];\n    for (var r = 0; r < rows; r++) {\n        matrix[r] = [];\n        for (var c = 0; c < cols; c++) {\n            matrix[r][c] = null;\n        }\n    }\n    return matrix;\n}\nexports.makeMatrix = makeMatrix;\nfunction translate(pos, v) {\n    return pos.map(function (value, index) { return value + v[index]; });\n}\nexports.translate = translate;\nfunction scale(pos, scalar) {\n    return pos.map(function (v) { return v * scalar; });\n}\nexports.scale = scale;\n// Scale a point relative to position vector\nfunction transScale(pos, v, scalar) {\n    // Translate each facelet to cf\n    var iv = v.map(function (x) { return -x; });\n    return translate(scale(translate(pos, iv), scalar), v);\n}\nexports.transScale = transScale;\nfunction rotate(pos, axis, radians) {\n    var newPosition = pos.slice();\n    switch (axis) {\n        case Axis.X:\n            newPosition[2] = pos[2] * Math.cos(radians) - pos[1] * Math.sin(radians);\n            newPosition[1] = pos[2] * Math.sin(radians) + pos[1] * Math.cos(radians);\n            break;\n        case Axis.Y:\n            newPosition[0] = pos[0] * Math.cos(radians) + pos[2] * Math.sin(radians);\n            newPosition[2] = -pos[0] * Math.sin(radians) + pos[2] * Math.cos(radians);\n            break;\n        case Axis.Z:\n            newPosition[0] = pos[0] * Math.cos(radians) - pos[1] * Math.sin(radians);\n            newPosition[1] = pos[0] * Math.sin(radians) + pos[1] * Math.cos(radians);\n            break;\n    }\n    return newPosition;\n}\nexports.rotate = rotate;\nfunction project(pos, d) {\n    return [\n        (pos[0] * d) / pos[2],\n        (pos[1] * d) / pos[2],\n        pos[2],\n    ];\n}\nexports.project = project;\nfunction radians2Degrees(radians) {\n    return (radians * 180) / Math.PI;\n}\nexports.radians2Degrees = radians2Degrees;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../../constants\");\nfunction parseColor(raw) {\n    var colorcodeRegex = /^[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/;\n    // Append # for color codes\n    if (colorcodeRegex.exec(raw)) {\n        return \"#\" + raw;\n    }\n    if (constants_1.ColorAbbreviationToCode[raw]) {\n        return constants_1.ColorAbbreviationToCode[raw];\n    }\n    if (constants_1.ColorNameToCode[raw]) {\n        return constants_1.ColorNameToCode[raw];\n    }\n    // Default color\n    return constants_1.ColorCode.Gray;\n}\nexports.parseColor = parseColor;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Utlity Methods for creating 2D coodinates for svg polygons\n */\nvar constants_1 = require(\"./constants\");\nvar math_1 = require(\"../math\");\n/**\n * Applies set of rotations to all face rotation vectors.\n */\nfunction rotateFaces(faceRotations, rotations) {\n    return constants_1.AllFaces.reduce(function (acc, face) {\n        rotations.forEach(function (rotation) {\n            if (!acc[face]) {\n                acc[face] = faceRotations[face].slice();\n            }\n            acc[face] = math_1.rotate(acc[face], rotation[0], (Math.PI * rotation[1]) / 180);\n        });\n        return acc;\n    }, {});\n}\nexports.rotateFaces = rotateFaces;\nfunction makeStickerPosition(face, cubeSize, x, y) {\n    switch (face) {\n        case constants_1.Face.U:\n            return [x, 0, cubeSize - y];\n        case constants_1.Face.R:\n            return [cubeSize, y, x];\n        case constants_1.Face.F:\n            return [x, y, 0];\n        case constants_1.Face.D:\n            return [x, cubeSize, y];\n        case constants_1.Face.L:\n            return [0, y, cubeSize - x];\n        case constants_1.Face.B:\n            return [cubeSize - x, y, cubeSize];\n        default:\n            throw new Error(\"Unknown cube face: '\" + face + \"'\");\n    }\n}\nexports.makeStickerPosition = makeStickerPosition;\n/**\n * Creates 2D coordinates for stickers of a given face of the cube.\n */\nfunction makeFaceStickers(face, options) {\n    var stickers = math_1.makeMatrix(options.cubeSize + 1, options.cubeSize + 1);\n    for (var row = 0; row <= options.cubeSize; row++) {\n        var _loop_1 = function (col) {\n            var sticker = makeStickerPosition(face, options.cubeSize, row, col);\n            // Now scale and tranform point to ensure size/pos independent of dim\n            var centerTranslation = [-options.cubeSize / 2, -options.cubeSize / 2, -options.cubeSize / 2];\n            sticker = math_1.translate(sticker, centerTranslation);\n            sticker = math_1.scale(sticker, 1 / options.cubeSize);\n            // Rotate cube as per perameter settings\n            options.viewportRotations.forEach(function (rotation) {\n                sticker = math_1.rotate(sticker, rotation[0], (Math.PI * rotation[1]) / 180);\n            });\n            // Move cube away from viewer\n            sticker = math_1.translate(sticker, [0, 0, options.dist]);\n            // Finally project the 3D points onto 2D\n            sticker = math_1.project(sticker, options.dist);\n            stickers[row][col] = sticker;\n        };\n        for (var col = 0; col <= options.cubeSize; col++) {\n            _loop_1(col);\n        }\n    }\n    return stickers;\n}\nexports.makeFaceStickers = makeFaceStickers;\n/**\n * Creates geometry for rubiks cube stickers. Contains 2D coordinates\n * for drawing svg polygons\n */\nfunction makeCubeGeometry(options) {\n    if (options.view === 'plan') {\n        options.viewportRotations = [[math_1.Axis.X, -90]];\n    }\n    return constants_1.AllFaces.reduce(function (acc, face) {\n        acc[face] = makeFaceStickers(face, options);\n        return acc;\n    }, {});\n}\nexports.makeCubeGeometry = makeCubeGeometry;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d, _e, _f;\nvar math_1 = require(\"./../math\");\nvar constants_1 = require(\"./constants\");\nvar TurnType;\n(function (TurnType) {\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\n})(TurnType = exports.TurnType || (exports.TurnType = {}));\nvar faceIdentity = function (stickerNumber, cubeSize) { return stickerNumber; };\nvar counterClockwiseSticker = function (stickerNumber, cubeSize) {\n    return (stickerNumber * cubeSize) % (cubeSize * cubeSize + 1);\n};\nvar clockwiseSticker = function (stickerNumber, cubeSize) {\n    var numStickers = cubeSize * cubeSize;\n    return numStickers + 1 - counterClockwiseSticker(stickerNumber, cubeSize);\n};\nvar doubleTurn = function (stickerNumber, cubeSize) {\n    return cubeSize * cubeSize - stickerNumber + 1;\n};\nvar OppositeTurn = (_a = {},\n    _a[TurnType.Clockwise] = TurnType.CounterClockwise,\n    _a[TurnType.CounterClockwise] = TurnType.Clockwise,\n    _a[TurnType.Double] = TurnType.Double,\n    _a);\n// Faces that wrap around a given axis\nvar AxisMapping = (_b = {},\n    _b[math_1.Axis.X] = [constants_1.Face.U, constants_1.Face.B, constants_1.Face.F, constants_1.Face.D],\n    _b[math_1.Axis.Y] = [constants_1.Face.L, constants_1.Face.B, constants_1.Face.R, constants_1.Face.F],\n    _b[math_1.Axis.Z] = [constants_1.Face.L, constants_1.Face.U, constants_1.Face.R, constants_1.Face.D],\n    _b);\n// Face's orientation related to other faces on a given axis\nvar AxisOrientation = (_c = {},\n    _c[math_1.Axis.X] = (_d = {},\n        _d[constants_1.Face.U] = faceIdentity,\n        _d[constants_1.Face.B] = doubleTurn,\n        _d[constants_1.Face.F] = faceIdentity,\n        _d[constants_1.Face.D] = faceIdentity,\n        _d[constants_1.Face.L] = null,\n        _d[constants_1.Face.R] = null,\n        _d),\n    _c[math_1.Axis.Y] = (_e = {},\n        _e[constants_1.Face.U] = null,\n        _e[constants_1.Face.B] = counterClockwiseSticker,\n        _e[constants_1.Face.F] = counterClockwiseSticker,\n        _e[constants_1.Face.D] = null,\n        _e[constants_1.Face.L] = counterClockwiseSticker,\n        _e[constants_1.Face.R] = counterClockwiseSticker,\n        _e),\n    _c[math_1.Axis.Z] = (_f = {},\n        _f[constants_1.Face.U] = counterClockwiseSticker,\n        _f[constants_1.Face.B] = null,\n        _f[constants_1.Face.F] = null,\n        _f[constants_1.Face.D] = clockwiseSticker,\n        _f[constants_1.Face.L] = faceIdentity,\n        _f[constants_1.Face.R] = doubleTurn,\n        _f),\n    _c);\nvar CubeData = /** @class */ (function () {\n    function CubeData(cubeSize, initialValues) {\n        this.cubeSize = cubeSize;\n        /**\n         *  Data to store face value\n         *  data saved in flat array [1, 2, 3, 4, 5, 6, 7, 8, 9]\n         *  maps to cube stickers like this\n         *\n         *  U Face\n         *  1 | 2 | 3\n         *  ----------\n         *  4 | 5 | 6\n         *  ----------\n         *  7 | 8 | 9\n         *\n         *  Stickers are numbered in that manner starting with the U face\n         *  continuing with this order U, R, F, D, L, B\n         *\n         *  Because each face has a differen't orientation it may not be clear\n         *  how the back faces are numbered. Below is an example 3x3 mapping\n         *\n         *  Example numbers of 3x3 cube. nxn cubes follow the same pattern\n         *\n         *        B\n         *      L U R\n         *        F\n         *        D\n         *                  | 54  | 53  | 52  |\n         *                   -----------------\n         *                  | 51  | 50  | 49  |\n         *                   -----------------\n         *                  | 48  | 47  | 46  |\n         * -----------------                   -----------------\n         *  43  | 40  | 37     1  |  2  |  3    12  | 15  | 18\n         * ----------------- ----------------- -----------------\n         *  44  | 41  | 38     4  |  5  |  6    11  | 14  | 17\n         * ----------------- ----------------- -----------------\n         *  45  | 42  | 39     7  |  8  |  9    10  | 13  | 16\n         * -----------------                   -----------------\n         *                  | 19  | 20  | 21  |\n         *                   -----------------\n         *                  | 22  | 23  | 24  |\n         *                   -----------------\n         *                  | 25  | 26  | 27  |\n         *\n         *                  | 28  | 29  | 30  |\n         *                   -----------------\n         *                  | 31  | 32  | 33  |\n         *                   -----------------\n         *                  | 34  | 35  | 36  |\n         */\n        this.faces = {};\n        this.numStickers = this.cubeSize * this.cubeSize;\n        this.clockwiseMapping = [];\n        this.counterClockwiseMapping = [];\n        this.doubleMapping = [];\n        this.faces = initialValues;\n        if (!this.faces) {\n            this.initValues();\n        }\n        for (var i = 1; i <= this.numStickers; i++) {\n            this.clockwiseMapping.push(clockwiseSticker(i, cubeSize));\n            this.counterClockwiseMapping.push(counterClockwiseSticker(i, cubeSize));\n            this.doubleMapping.push(doubleTurn(i, cubeSize));\n        }\n    }\n    CubeData.prototype.initValues = function () {\n        var _this = this;\n        var currentValue = 1;\n        constants_1.AllFaces.forEach(function (face) {\n            _this.faces[face] = [];\n            for (var i = 0; i < _this.numStickers; i++) {\n                _this.faces[face].push(currentValue++);\n            }\n        });\n    };\n    /**\n     * Rotates values on an outer face of the rubiks cubes\n     */\n    CubeData.prototype.rotateFace = function (face, turn) {\n        var _this = this;\n        // TODO more efficient rotation to not construct so many new arrays\n        switch (turn) {\n            case TurnType.Clockwise:\n                this.faces[face] = this.clockwiseMapping.map(function (newStickerNumber) { return _this.faces[face][newStickerNumber - 1]; });\n                break;\n            case TurnType.CounterClockwise:\n                this.faces[face] = this.counterClockwiseMapping.map(function (newStickerNumber) { return _this.faces[face][newStickerNumber - 1]; });\n                break;\n            case TurnType.Double:\n                this.faces[face].reverse();\n                break;\n        }\n    };\n    /**\n     * Rotates layer values around a given axis\n     */\n    CubeData.prototype.axisRotation = function (offset, range, axis, faceOrder, forward, double) {\n        var _this = this;\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (!forward) {\n            faceOrder.reverse();\n        }\n        // Copy original values to avoid clobbering values when modifying stickers\n        var originalValues = faceOrder.map(function (face) { return _this.faces[face].slice(); });\n        // Copy values\n        for (var i = 0; i < this.cubeSize; i++) {\n            for (var r = 0; r < range; r++) {\n                var stickerIndex = this.cubeSize * i + (offset + r);\n                for (var j = 0; j < faceOrder.length; j++) {\n                    var face = faceOrder[j];\n                    var nextFace = double ? faceOrder[(j + 2) % faceOrder.length] : faceOrder[(j + 1) % faceOrder.length];\n                    var valueIndex = AxisOrientation[axis][face](stickerIndex + 1, this.cubeSize) - 1;\n                    var nextFaceValueIndex = AxisOrientation[axis][nextFace](stickerIndex + 1, this.cubeSize) - 1;\n                    this.faces[face][valueIndex] =\n                        originalValues[(double ? j + 2 : j + 1) % originalValues.length][nextFaceValueIndex];\n                }\n            }\n        }\n    };\n    /**\n     * Rotate layers around the x axis of the cube\n     */\n    CubeData.prototype.xLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.U, constants_1.Face.F, constants_1.Face.D, constants_1.Face.B];\n        this.axisRotation(offset, range, math_1.Axis.X, faceOrder, forward, double);\n    };\n    /**\n     * Rotate layers around the y axis of the cube\n     */\n    CubeData.prototype.yLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.L, constants_1.Face.F, constants_1.Face.R, constants_1.Face.B];\n        this.axisRotation(offset, range, math_1.Axis.Y, faceOrder, forward, double);\n    };\n    /**\n     * Rotate layers around the z axis of the cube\n     */\n    CubeData.prototype.zLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.U, constants_1.Face.L, constants_1.Face.D, constants_1.Face.R];\n        this.axisRotation(offset, range, math_1.Axis.Z, faceOrder, forward, double);\n    };\n    /**\n     * Restricts the number of slices used in outer block moves to the cube size\n     */\n    CubeData.prototype.safeSlices = function (n) {\n        return n > this.cubeSize ? this.cubeSize : n;\n    };\n    CubeData.prototype.rTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.R, turnType);\n        var offset = this.cubeSize - slices;\n        this.xLayersRotation(offset, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.lTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.L, turnType);\n        this.xLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.uTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.U, turnType);\n        this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.dTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.D, turnType);\n        var offset = this.cubeSize - slices;\n        this.yLayersRotation(offset, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.fTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.F, turnType);\n        var offset = this.cubeSize - slices;\n        this.zLayersRotation(offset, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.bTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.B, turnType);\n        this.zLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.mTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.xLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.eTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.yLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.sTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.zLayersRotation(1, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.xTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.R, turnType);\n        this.rotateFace(constants_1.Face.L, OppositeTurn[turnType]);\n        this.xLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.yTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.U, turnType);\n        this.rotateFace(constants_1.Face.D, OppositeTurn[turnType]);\n        this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.zTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.F, turnType);\n        this.rotateFace(constants_1.Face.B, OppositeTurn[turnType]);\n        this.zLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.turn = function (turn) {\n        var slices = this.safeSlices(turn.slices);\n        switch (turn.move) {\n            case constants_1.AlgorithmUnit.F:\n                this.fTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.B:\n                this.bTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.U:\n                this.uTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.D:\n                this.dTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.R:\n                this.rTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.L:\n                this.lTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.M:\n                this.mTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.E:\n                this.eTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.S:\n                this.sTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.X:\n                this.xTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.Y:\n                this.yTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.Z:\n                this.zTurn(turn.turnType);\n                break;\n            default:\n                throw new Error(\"Unrecognized move in turn \" + JSON.stringify(turn));\n        }\n    };\n    return CubeData;\n}());\nexports.CubeData = CubeData;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geometry_1 = require(\"./cube/geometry\");\nvar math_1 = require(\"./math\");\nvar drawing_1 = require(\"./cube/drawing\");\nvar constants_1 = require(\"./cube/constants\");\nvar stickers_1 = require(\"./cube/stickers\");\nvar constants_2 = require(\"./constants\");\nvar options_1 = require(\"./cube/parsing/options\");\nvar defaultOptions = {\n    cubeSize: 3,\n    width: 128,\n    height: 128,\n    viewportRotations: [[math_1.Axis.Y, 45], [math_1.Axis.X, -34]],\n    colorScheme: constants_1.DefaultColorScheme,\n    cubeColor: constants_2.ColorName.Black,\n    cubeOpacity: 100,\n    stickerOpacity: 100,\n    dist: 5,\n    outlineWidth: 0.94,\n    strokeWidth: 0,\n    viewbox: {\n        x: -0.9,\n        y: -0.9,\n        width: 1.8,\n        height: 1.8,\n    },\n};\nfunction cubeSVG(container, extraOptions) {\n    if (extraOptions === void 0) { extraOptions = {}; }\n    var options = getOptions(defaultOptions, extraOptions);\n    var geomety = geometry_1.makeCubeGeometry(options);\n    options.stickerColors = stickers_1.makeStickerColors(options);\n    drawing_1.renderCube(container, geomety, options);\n}\nexports.cubeSVG = cubeSVG;\nfunction cubePNG(container, extraOptions) {\n    if (extraOptions === void 0) { extraOptions = {}; }\n    var element = document.createElement('div');\n    var options = getOptions(defaultOptions, extraOptions);\n    cubeSVG(element, options);\n    setTimeout(function () {\n        var svgElement = element.querySelector('svg');\n        var targetImage = document.createElement('img'); // Where to draw the result\n        container.appendChild(targetImage);\n        var can = document.createElement('canvas'); // Not shown on page\n        var ctx = can.getContext('2d');\n        var loader = new Image(); // Not shown on page\n        loader.width = can.width = targetImage.width = options.width || 128;\n        loader.height = can.height = targetImage.height = options.height || 128;\n        loader.onload = function () {\n            ctx.drawImage(loader, 0, 0, loader.width, loader.height);\n            targetImage.src = can.toDataURL();\n        };\n        var svgAsXML = new XMLSerializer().serializeToString(svgElement);\n        loader.src = 'data:image/svg+xml,' + encodeURIComponent(svgAsXML);\n    });\n}\nexports.cubePNG = cubePNG;\nfunction getOptions(defaultOptions, extraOptions) {\n    var parsedOptions;\n    if (typeof extraOptions === 'string') {\n        parsedOptions = options_1.parseOptions(extraOptions);\n    }\n    else {\n        parsedOptions = extraOptions;\n    }\n    return __assign({}, defaultOptions, parsedOptions);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a;\nvar constants_1 = require(\"./../constants\");\nvar SVG = require(\"svg.js\");\nvar geometry_1 = require(\"./geometry\");\nvar math_1 = require(\"../math\");\nvar constants_2 = require(\"./constants\");\nvar arrow_1 = require(\"./parsing/arrow\");\n/**\n * Utility methods for rendering cube geometry using svg.js\n */\n// Rotation vectors to track visibility of each face\nvar defaultFaceRotations = (_a = {},\n    _a[constants_2.Face.U] = [0, -1, 0],\n    _a[constants_2.Face.R] = [1, 0, 0],\n    _a[constants_2.Face.F] = [0, 0, -1],\n    _a[constants_2.Face.D] = [0, 1, 1],\n    _a[constants_2.Face.L] = [-1, 0, 0],\n    _a[constants_2.Face.B] = [0, 0, 1],\n    _a);\nfunction renderCube(container, geometry, options) {\n    var faceRotations = geometry_1.rotateFaces(defaultFaceRotations, options.viewportRotations);\n    var renderOrder = getRenderOrder(faceRotations);\n    var svg = SVG(container).size(options.width, options.height);\n    svg.viewbox(options.viewbox.x, options.viewbox.y, options.viewbox.width, options.viewbox.height);\n    var hiddenFaces = renderOrder.filter(function (face) { return !faceVisible(face, faceRotations); });\n    var visibleFaces = renderOrder.filter(function (face) { return faceVisible(face, faceRotations); });\n    renderBackground(svg, options);\n    // Render hidden faces if cube color has transparency\n    if (options.cubeOpacity < 100) {\n        var cubeOutlineGroup_1 = getCubeOutlineGroup(svg, options);\n        hiddenFaces.forEach(function (face) {\n            renderFaceStickers(svg, face, geometry[face], options);\n            renderCubeOutline(cubeOutlineGroup_1, geometry[face], options);\n        });\n    }\n    var cubeOutlineGroup = getCubeOutlineGroup(svg, options);\n    visibleFaces.forEach(function (face) {\n        renderCubeOutline(cubeOutlineGroup, geometry[face], options);\n        renderFaceStickers(svg, face, geometry[face], options);\n    });\n    if (options.view === 'plan') {\n        var ollGroup_1 = getOllLayerGroup(svg, options);\n        [constants_2.Face.R, constants_2.Face.F, constants_2.Face.L, constants_2.Face.B].forEach(function (face) {\n            renderOLLStickers(ollGroup_1, face, geometry[face], faceRotations, options);\n        });\n    }\n    var arrowGroup = getArrowGroup(svg, geometry[0].length - 1);\n    var arrowDefinitions = [];\n    if (Array.isArray(options.arrows)) {\n        arrowDefinitions = options.arrows;\n    }\n    else if (typeof options.arrows === 'string') {\n        arrowDefinitions = arrow_1.parseArrows(options.arrows);\n    }\n    arrowDefinitions.forEach(function (arrow) {\n        renderArrow(arrowGroup, geometry, arrow);\n    });\n}\nexports.renderCube = renderCube;\n/**\n * Determines face render order based on z position. Faces further away\n * will render first so anything closer will be drawn on top.\n */\nfunction getRenderOrder(faceRotations) {\n    var renderOrder = constants_2.AllFaces.slice().sort(function (a, b) {\n        return faceRotations[b][2] - faceRotations[a][2];\n    });\n    return renderOrder;\n}\nfunction renderBackground(svg, options) {\n    var backgroundSvg = svg.rect(options.viewbox.width, options.viewbox.height);\n    backgroundSvg.x(options.viewbox.x);\n    backgroundSvg.y(options.viewbox.y);\n    if (!options.backgroundColor) {\n        backgroundSvg.fill('none');\n        backgroundSvg.opacity(0);\n    }\n    else {\n        backgroundSvg.fill({\n            color: options.backgroundColor,\n        });\n    }\n}\nfunction faceVisible(face, rotations) {\n    return rotations[face][2] < -0.105;\n}\nfunction getCubeOutlineGroup(svg, options) {\n    var cubeOutlineGroup = svg.group();\n    cubeOutlineGroup.opacity(options.cubeOpacity / 100);\n    cubeOutlineGroup.attr({\n        'stroke-width': '0.1',\n        'stroke-linejoin': 'round',\n    });\n    return cubeOutlineGroup;\n}\nfunction getOllLayerGroup(svg, options) {\n    var group = svg.group();\n    group.opacity(options.stickerOpacity / 100);\n    group.attr({\n        'stroke-opacity': '1',\n        'stroke-width': 0.02,\n        'stroke-linejoin': 'round',\n    });\n    return group;\n}\nfunction getArrowGroup(svg, cubeSize) {\n    var arrowGroup = svg.group();\n    arrowGroup.attr({\n        opacity: 1,\n        'stroke-opacity': 1,\n        'stroke-width': 0.12 / cubeSize,\n        'stroke-linecap': 'round',\n    });\n    return arrowGroup;\n}\nfunction renderCubeOutline(svg, face, options) {\n    var cubeSize = face.length - 1;\n    var width = options.outlineWidth;\n    var outlinePoints = [\n        [face[0][0][0] * width, face[0][0][1] * width],\n        [face[cubeSize][0][0] * width, face[cubeSize][0][1] * width],\n        [face[cubeSize][cubeSize][0] * width, face[cubeSize][cubeSize][1] * width],\n        [face[0][cubeSize][0] * width, face[0][cubeSize][1] * width],\n    ];\n    var polygon = svg.polygon(outlinePoints);\n    polygon.fill(options.cubeColor);\n    polygon.stroke(options.cubeColor);\n    return polygon;\n}\nfunction renderFaceStickers(svg, face, stickers, options) {\n    var cubeSize = stickers.length - 1;\n    var group = svg.group();\n    group.opacity(options.stickerOpacity / 100);\n    group.attr({\n        'stoke-opacity': '0.5',\n        'stroke-width': options.strokeWidth,\n        'stroke-linejoin': 'round',\n    });\n    for (var i = 0; i < cubeSize; i++) {\n        for (var j = 0; j < cubeSize; j++) {\n            var centerPoint = [\n                (stickers[j][i][0] + stickers[j + 1][i + 1][0]) / 2,\n                (stickers[j][i][1] + stickers[j + 1][i + 1][1]) / 2,\n                0,\n            ];\n            // Scale points in towards centre\n            var p1 = math_1.transScale(stickers[j][i], centerPoint, 0.85);\n            var p2 = math_1.transScale(stickers[j + 1][i], centerPoint, 0.85);\n            var p3 = math_1.transScale(stickers[j + 1][i + 1], centerPoint, 0.85);\n            var p4 = math_1.transScale(stickers[j][i + 1], centerPoint, 0.85);\n            var color = getStickerColor(face, i, j, options);\n            renderSticker(group, p1, p2, p3, p4, color, options.cubeColor);\n        }\n    }\n    return group;\n}\nfunction renderSticker(g, p1, p2, p3, p4, stickerColor, cubeColor) {\n    var stickerPoints = [[p1[0], p1[1]], [p2[0], p2[1]], [p3[0], p3[1]], [p4[0], p4[1]]];\n    var polygon = g.polygon(stickerPoints);\n    polygon.fill(stickerColor);\n    polygon.stroke(cubeColor);\n    return polygon;\n}\n/**\n * Starting with U, stickers are numbered from\n * their face starting with the top left corner\n * sticker.\n *\n * U Face\n * 1 | 2 | 3\n * ----------\n * 4 | 5 | 6\n * ----------\n * 7 | 8 | 9\n *\n * And so on for faces R, F, D, L, B.\n * So R's top left corner for a 3x3 cube would be # 10\n *\n * An individual sticker's color is obtained by indexing\n * into the array of sticker colors by the number the sticker is\n */\nfunction getStickerColor(face, row, col, options) {\n    if (!Array.isArray(options.stickerColors)) {\n        return options.colorScheme[face] || constants_1.ColorName.Black;\n    }\n    var faceIndex = constants_2.AllFaces.indexOf(face);\n    var stickerNumber = row * options.cubeSize + col;\n    var colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber;\n    if (options.stickerColors.length <= colorIndex) {\n        return constants_1.ColorName.Black;\n    }\n    return options.stickerColors[colorIndex];\n}\n// Renders the top rim of the R U L and B faces out from side of cube\nfunction renderOLLStickers(group, face, stickers, rotations, options) {\n    // Translation vector, to move faces out\n    var v1 = math_1.scale(rotations[face], 0);\n    var v2 = math_1.scale(rotations[face], 0.2);\n    for (var i = 0; i < options.cubeSize; i++) {\n        // find center point of sticker\n        var centerPoint = [\n            (stickers[i][0][0] + stickers[i + 1][1][0]) / 2,\n            (stickers[i][0][1] + stickers[i + 1][1][1]) / 2,\n            0,\n        ];\n        var p1 = math_1.translate(math_1.transScale(stickers[i][0], centerPoint, 0.94), v1);\n        var p2 = math_1.translate(math_1.transScale(stickers[i + 1][0], centerPoint, 0.94), v1);\n        var p3 = math_1.translate(math_1.transScale(stickers[i + 1][1], centerPoint, 0.94), v2);\n        var p4 = math_1.translate(math_1.transScale(stickers[i][1], centerPoint, 0.94), v2);\n        renderSticker(group, p1, p2, p3, p4, getStickerColor(face, 0, i, options), options.cubeColor);\n    }\n}\nexports.renderOLLStickers = renderOLLStickers;\n/**\n * Generates svg for an arrow pointing from sticker s1 to s2\n */\nfunction renderArrow(group, geometry, arrow) {\n    var cubeSize = geometry[0].length - 1;\n    // Find center point for each facelet\n    var p1y = Math.floor(arrow.s1.n / cubeSize);\n    var p1x = arrow.s1.n % cubeSize;\n    var p1 = [\n        (geometry[arrow.s1.face][p1x][p1y][0] + geometry[arrow.s1.face][p1x + 1][p1y + 1][0]) / 2,\n        (geometry[arrow.s1.face][p1x][p1y][1] + geometry[arrow.s1.face][p1x + 1][p1y + 1][1]) / 2,\n        0,\n    ];\n    var p2y = Math.floor(arrow.s2.n / cubeSize);\n    var p2x = arrow.s2.n % cubeSize;\n    var p2 = [\n        (geometry[arrow.s1.face][p2x][p2y][0] + geometry[arrow.s1.face][p2x + 1][p2y + 1][0]) / 2,\n        (geometry[arrow.s1.face][p2x][p2y][1] + geometry[arrow.s1.face][p2x + 1][p2y + 1][1]) / 2,\n        0,\n    ];\n    // Find midpoint between p1 and p2\n    var center = [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2, 0];\n    // Shorten arrows towards midpoint according to config\n    p1 = math_1.transScale(p1, center, arrow.scale / 10);\n    p2 = math_1.transScale(p2, center, arrow.scale / 10);\n    var p3;\n    if (arrow.s3) {\n        var p3y = Math.floor(arrow.s3.n / cubeSize);\n        var p3x = arrow.s3.n % cubeSize;\n        p3 = [\n            (geometry[arrow.s1.face][p3x][p3y][0] + geometry[arrow.s1.face][p3x + 1][p3y + 1][0]) / 2,\n            (geometry[arrow.s1.face][p3x][p3y][1] + geometry[arrow.s1.face][p3x + 1][p3y + 1][1]) / 2,\n            0,\n        ];\n        p3 = math_1.transScale(p3, center, arrow.influence / 5);\n    }\n    // Calculate arrow rotation\n    var p_ = p3 ? p3 : p1;\n    var rotation = p_[1] > p2[1] ? 270 : 90;\n    if (p2[0] - p_[0] != 0) {\n        rotation = math_1.radians2Degrees(Math.atan((p2[1] - p_[1]) / (p2[0] - p_[0])));\n        rotation = p_[0] > p2[0] ? rotation + 180 : rotation;\n    }\n    // Draw line\n    var lineSvg = group.path(\"M \" + p1[0] + \",\" + p1[1] + \" \" + (p3 ? 'Q ' + p3[0] + ',' + p3[1] : 'L') + \" \" + p2[0] + \",\" + p2[1]);\n    lineSvg.fill('none');\n    lineSvg.stroke({\n        color: arrow.color,\n        opacity: 1,\n    });\n    // Draw arrow head\n    var headSvg = group.path('M 5.77,0.0 L -2.88,5.0 L -2.88,-5.0 L 5.77,0.0 z');\n    headSvg.attr({\n        transform: \"translate(\" + p2[0] + \",\" + p2[1] + \") scale(\" + 0.033 / cubeSize + \") rotate(\" + rotation + \")\",\n    });\n    headSvg.style({\n        fill: arrow.color,\n    });\n    headSvg.attr({\n        'stroke-width': 0,\n        'stroke-linejoin': 'round',\n    });\n}\nexports.renderArrow = renderArrow;\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../constants\");\nvar constants_2 = require(\"../../constants\");\nvar color_1 = require(\"./color\");\nvar stickerPattern = '([URFDLB])([0-9]+)';\nvar colorPattern = '(black|dgrey|grey|silver|white|yellow|red|orange|blue|green|purple|pink|[0-9a-fA-F]{6}|[0-9a-fA-F]{3})';\nvar arrowPattern = \"^(\" + stickerPattern + \")(\" + stickerPattern + \")(\" + stickerPattern + \")?(-s([0-9+]))?(-i([0-9+]))?(-\" + colorPattern + \")?\";\nfunction parseArrows(raw) {\n    if (typeof raw !== 'string') {\n        return [];\n    }\n    return raw\n        .split(',')\n        .map(function (part) { return parseArrow(part); })\n        .filter(function (arrow) { return !!arrow; });\n}\nexports.parseArrows = parseArrows;\nfunction parseArrow(raw) {\n    if (typeof raw !== 'string') {\n        return null;\n    }\n    var arrowRegex = new RegExp(arrowPattern);\n    var match = arrowRegex.exec(raw);\n    if (!match) {\n        return null;\n    }\n    return {\n        s1: {\n            face: constants_1.Face[match[2]],\n            n: parseInt(match[3]),\n        },\n        s2: {\n            face: constants_1.Face[match[5]],\n            n: parseInt(match[6]),\n        },\n        s3: !match[7]\n            ? undefined\n            : {\n                face: constants_1.Face[match[8]],\n                n: parseInt(match[9]),\n            },\n        color: match[15] ? color_1.parseColor(match[15]) : constants_2.ColorCode.Gray,\n        scale: match[11] ? parseInt(match[11]) : 10,\n        influence: match[13] ? parseInt(match[13]) : 10,\n    };\n}\nexports.parseArrow = parseArrow;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar masking_1 = require(\"./masking\");\nvar simulation_1 = require(\"./simulation\");\nvar algorithm_1 = require(\"./parsing/algorithm\");\nvar constants_1 = require(\"./constants\");\nvar constants_2 = require(\"../constants\");\nfunction makeStickerColors(options) {\n    var stickerColors = options.stickerColors;\n    var mask = options.mask ? masking_1.makeMasking(options.mask, options.cubeSize) : null;\n    if (mask && options.maskAlg) {\n        var maskCubeData_1 = new simulation_1.CubeData(options.cubeSize, mask);\n        var alg_1 = algorithm_1.parseAlgorithm(options.maskAlg);\n        alg_1.forEach(function (turn) {\n            maskCubeData_1.turn(turn);\n        });\n        mask = maskCubeData_1.faces;\n    }\n    // Fill with color scheme if sticker colors not predefined.\n    if (!stickerColors) {\n        stickerColors = [].concat.apply([], constants_1.AllFaces.map(function (face) {\n            return Array.apply(null, Array(options.cubeSize * options.cubeSize)).map(function () { return options.colorScheme[face]; });\n        }));\n    }\n    var faceMappedStickers = constants_1.AllFaces.reduce(function (acc, face) {\n        if (!acc[face])\n            acc[face] = [];\n        for (var i = 0; i < options.cubeSize; i++) {\n            for (var j = 0; j < options.cubeSize; j++) {\n                var faceIndex = constants_1.AllFaces.indexOf(face);\n                var stickerNumber = i * options.cubeSize + j;\n                var colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber;\n                if (stickerColors.length <= colorIndex) {\n                    acc[face][options.cubeSize * i + j] = constants_2.ColorName.Black;\n                }\n                else {\n                    acc[face][options.cubeSize * i + j] = stickerColors[colorIndex];\n                }\n                if (mask && !mask[face][options.cubeSize * i + j]) {\n                    acc[face][options.cubeSize * i + j] = constants_2.ColorCode.DarkGray;\n                }\n            }\n        }\n        return acc;\n    }, {});\n    // Apply Algorithm\n    var cubeData = new simulation_1.CubeData(options.cubeSize, faceMappedStickers);\n    var alg = [];\n    if (options.case) {\n        alg = algorithm_1.parseCase(options.case);\n    }\n    else if (options.algorithm) {\n        alg = algorithm_1.parseAlgorithm(options.algorithm);\n    }\n    alg.forEach(function (move) {\n        cubeData.turn(move);\n    });\n    return [].concat.apply([], constants_1.AllFaces.map(function (face) { return cubeData.faces[face].slice(); }));\n}\nexports.makeStickerColors = makeStickerColors;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\nvar constants_1 = require(\"./constants\");\nvar maskingFunctions = (_a = {},\n    _a[constants_1.Masking.FL] = (_b = {},\n        _b[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _b[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _b[constants_1.Face.R] = function (row, col, cubeSize) { return row == cubeSize - 1; },\n        _b[constants_1.Face.L] = function (row, col, cubeSize) { return row == cubeSize - 1; },\n        _b[constants_1.Face.F] = function (row, col, cubeSize) { return row == cubeSize - 1; },\n        _b[constants_1.Face.B] = function (row, col, cubeSize) { return row == cubeSize - 1; },\n        _b),\n    _a[constants_1.Masking.F2L] = (_c = {},\n        _c[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _c[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _c[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _c),\n    _a[constants_1.Masking.LL] = (_d = {},\n        _d[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _d[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _d[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0; },\n        _d),\n    _a[constants_1.Masking.CLL] = (_e = {},\n        _e[constants_1.Face.U] = function (row, col, cubeSize) {\n            return (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) || // is center\n                ((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1));\n        },\n        _e[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _e[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e),\n    _a[constants_1.Masking.ELL] = (_f = {},\n        _f[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _f[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _f[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f),\n    _a[constants_1.Masking.OLL] = (_g = {},\n        _g[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _g[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _g),\n    _a[constants_1.Masking.OCLL] = (_h = {},\n        _h[constants_1.Face.U] = function (row, col, cubeSize) {\n            return (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) || // is center\n                ((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1));\n        },\n        _h[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _h),\n    _a[constants_1.Masking.OELL] = (_j = {},\n        _j[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _j[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _j),\n    _a[constants_1.Masking.COLL] = (_k = {},\n        _k[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _k[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _k[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k),\n    _a[constants_1.Masking.OCELL] = (_l = {},\n        _l[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _l[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _l[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l),\n    _a[constants_1.Masking.WV] = (_m = {},\n        _m[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _m[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _m[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _m),\n    _a[constants_1.Masking.VH] = (_o = {},\n        _o[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _o[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _o[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _o),\n    _a[constants_1.Masking.ELS] = (_p = {},\n        _p[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _p[constants_1.Face.D] = function (row, col, cubeSize) { return (row == 0 ? col < cubeSize - 1 : true); },\n        _p[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && (row == cubeSize - 1 ? col > 0 : true); },\n        _p[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _p[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && (row == cubeSize - 1 ? col < cubeSize - 1 : true); },\n        _p[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _p),\n    _a[constants_1.Masking.CLS] = (_q = {},\n        _q[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _q[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _q[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _q),\n    _a[constants_1.Masking.CMLL] = (_r = {},\n        _r[constants_1.Face.U] = function (row, col, cubeSize) { return (row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1); },\n        _r[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _r[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 || col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 || col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.F] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.B] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _r),\n    _a[constants_1.Masking.CROSS] = (_s = {},\n        _s[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _s[constants_1.Face.D] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _s[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s),\n    _a[constants_1.Masking.F2L3] = (_t = {},\n        _t[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _t[constants_1.Face.D] = function (row, col, cubeSize) {\n            return (row == 0 && col == cubeSize - 1) || !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1));\n        },\n        _t[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _t[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _t[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _t[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _t),\n    _a[constants_1.Masking.F2L2] = (_u = {},\n        _u[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _u[constants_1.Face.D] = function (row, col, cubeSize) { return row > 0 || (col > 0 && col < cubeSize - 1); },\n        _u[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _u[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _u[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _u[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _u),\n    _a[constants_1.Masking.F2LSM] = (_v = {},\n        _v[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _v[constants_1.Face.D] = function (row, col, cubeSize) {\n            return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)) ||\n                (col == 0 && row == cubeSize - 1) ||\n                (row == 0 && col == cubeSize - 1);\n        },\n        _v[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _v[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _v[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _v[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _v),\n    _a[constants_1.Masking.F2L1] = (_w = {},\n        _w[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _w[constants_1.Face.D] = function (row, col, cubeSize) { return row !== 0 || col !== cubeSize - 1; },\n        _w[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _w[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _w[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _w[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _w),\n    _a[constants_1.Masking.F2B] = (_x = {},\n        _x[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _x[constants_1.Face.D] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _x[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _x[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _x[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && (col == 0 || col == cubeSize - 1); },\n        _x[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && (col == 0 || col == cubeSize - 1); },\n        _x),\n    _a[constants_1.Masking.LINE] = (_y = {},\n        _y[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.D] = function (row, col, cubeSize) { return col > 0 && col < cubeSize - 1; },\n        _y[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _y[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _y),\n    _a);\nfunction makeMasking(masking, cubeSize) {\n    var _a;\n    if (!maskingFunctions[masking]) {\n        throw new Error(\"invalid masking \" + masking);\n    }\n    var numStickers = cubeSize * cubeSize;\n    var faceValues = (_a = {},\n        _a[constants_1.Face.U] = [],\n        _a[constants_1.Face.F] = [],\n        _a[constants_1.Face.R] = [],\n        _a[constants_1.Face.D] = [],\n        _a[constants_1.Face.L] = [],\n        _a[constants_1.Face.B] = [],\n        _a);\n    var _loop_1 = function (i) {\n        var row = Math.floor(i / cubeSize);\n        var col = i % cubeSize;\n        constants_1.AllFaces.forEach(function (face) {\n            faceValues[face].push(maskingFunctions[masking][face](row, col, cubeSize));\n        });\n    };\n    for (var i = 0; i < numStickers; i++) {\n        _loop_1(i);\n    }\n    return faceValues;\n}\nexports.makeMasking = makeMasking;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a;\nvar simulation_1 = require(\"../simulation\");\nvar constants_1 = require(\"../constants\");\nvar turnRegex = /([2-9]+)?([UFRDLBMESxyz])(w)?([2\\'])?/g;\nvar Opposite = (_a = {},\n    _a[simulation_1.TurnType.Clockwise] = simulation_1.TurnType.CounterClockwise,\n    _a[simulation_1.TurnType.CounterClockwise] = simulation_1.TurnType.Clockwise,\n    _a[simulation_1.TurnType.Double] = simulation_1.TurnType.Double,\n    _a);\n/**\n * Takes in an algorithm string and parses the turns from it\n * algorithm string format should be moves separated by a single space\n * (ex. \"U R2 L' x\")\n *\n * https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nfunction parseAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    var turns = [];\n    var match;\n    do {\n        match = turnRegex.exec(algorithm);\n        if (match) {\n            var rawSlices = match[1];\n            var rawFace = match[2];\n            var outerBlockIndicator = match[3];\n            var rawType = match[4] || constants_1.TurnAbbreviation.Clockwise; // Default to clockwise\n            turns.push({\n                move: getMove(rawFace),\n                turnType: getTurnType(rawType),\n                slices: getSlices(rawSlices, outerBlockIndicator)\n            });\n        }\n    } while (match);\n    return turns;\n}\nexports.parseAlgorithm = parseAlgorithm;\nfunction parseCase(algorithm) {\n    return parseAlgorithm(algorithm).map(function (turn) {\n        return {\n            turnType: Opposite[turn.turnType],\n            move: turn.move\n        };\n    }).reverse();\n}\nexports.parseCase = parseCase;\nfunction getSlices(rawSlices, outerBlockIndicator) {\n    if (outerBlockIndicator && !rawSlices) {\n        return 2;\n    }\n    else if (!outerBlockIndicator && rawSlices) {\n        throw new Error(\"Invalid move: Cannot specify num slices if outer block move indicator 'w' is not present\");\n    }\n    else if (!outerBlockIndicator && !rawSlices) {\n        return 1;\n    }\n    else {\n        return parseInt(rawSlices);\n    }\n}\nfunction getMove(rawFace) {\n    if (constants_1.possibleMoves.indexOf(rawFace) < 0) {\n        throw new Error(\"Invalid move (\" + rawFace + \"): Possible turn faces are [U R F L D B M E S]\");\n    }\n    else\n        return rawFace;\n}\nfunction getTurnType(rawType) {\n    switch (rawType) {\n        case constants_1.TurnAbbreviation.Clockwise:\n            return simulation_1.TurnType.Clockwise;\n        case constants_1.TurnAbbreviation.CounterClockwise:\n            return simulation_1.TurnType.CounterClockwise;\n        case constants_1.TurnAbbreviation.Double:\n            return simulation_1.TurnType.Double;\n        default:\n            throw new Error(\"Invalid move modifier (\" + rawType + \")\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rotation_1 = require(\"./rotation\");\nvar faceletColors_1 = require(\"./faceletColors\");\nvar colorScheme_1 = require(\"./colorScheme\");\n/**\n * Utility methods for parsing the old query param style options\n */\nfunction parseOptions(rawOptions) {\n    var options = {};\n    var params = parseQuery(rawOptions);\n    Object.keys(params).forEach(function (key) {\n        var paramValue = params[key];\n        switch (key) {\n            case 'pzl':\n                options.cubeSize = parseInt(paramValue) || 3;\n                break;\n            case 'size':\n                var size = parseInt(paramValue) || 250;\n                options.width = size;\n                options.height = size;\n                break;\n            case 'view':\n                options.view = paramValue;\n                break;\n            case 'stage':\n                options.mask = paramValue;\n                break;\n            case 'r':\n                options.viewportRotations = rotation_1.parseRotationSequence(paramValue);\n                break;\n            case 'alg':\n                options.algorithm = paramValue;\n                break;\n            case 'case':\n                options.case = paramValue;\n                break;\n            case 'fc':\n                options.stickerColors = faceletColors_1.parseFaceletColors(paramValue);\n                break;\n            case 'sch':\n                options.colorScheme = colorScheme_1.parseColorScheme(paramValue);\n                break;\n            case 'bg':\n                options.backgroundColor = paramValue;\n                break;\n            case 'cc':\n                options.cubeColor = paramValue;\n                break;\n            case 'co':\n                options.cubeOpacity = parseInt(paramValue) || 100;\n                break;\n            case 'fo':\n                options.stickerOpacity = parseInt(paramValue) || 100;\n                break;\n            case 'dist':\n                options.dist = parseInt(paramValue) || 5;\n                break;\n            case 'arw':\n                options.arrows = paramValue;\n                break;\n            case 'ac':\n                // TODO: Support default arrow color\n                console.warn('Currently param \\'ac\\' is unsupported');\n                break;\n        }\n    });\n    return options;\n}\nexports.parseOptions = parseOptions;\nfunction parseQuery(url) {\n    var queryString = url.indexOf('?') > -1 ? url.substr(url.indexOf('?') + 1) : url;\n    var query = {};\n    var pairs = queryString.split('&');\n    for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i].split('=');\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n    }\n    return query;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../constants\");\nfunction parseRotationSequence(rawSequence) {\n    var rotationRegex = /([xyz]-?[0-9][0-9]?[0-9]?)/g;\n    var match;\n    var rotations = [];\n    do {\n        match = rotationRegex.exec(rawSequence);\n        if (match) {\n            var matchText = match[0];\n            var axisSymbol = matchText.charAt(0);\n            var value = matchText.substr(1);\n            var axis = constants_1.AxisSymbolToAxis[axisSymbol];\n            rotations.push([axis, parseInt(value)]);\n        }\n    } while (match);\n    return rotations;\n}\nexports.parseRotationSequence = parseRotationSequence;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"./color\");\nvar constants_1 = require(\"../../constants\");\nfunction parseFaceletColors(rawValue) {\n    var colors = [];\n    if (rawValue.indexOf(',') > -1) {\n        // Parse as comma separated colors\n        rawValue.split(',').forEach(function (value) {\n            var parsed = color_1.parseColor(value);\n            if (parsed) {\n                colors.push(parsed);\n            }\n        });\n    }\n    else {\n        // parse as abbreviations (ex 'yyyyyyyyyrrrrrrrrrbbbbbbbbb....')\n        for (var i = 0; i < rawValue.length; i++) {\n            colors.push(constants_1.ColorAbbreviationToCode[rawValue.charAt(i)]);\n        }\n    }\n    return colors;\n}\nexports.parseFaceletColors = parseFaceletColors;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"./color\");\nvar constants_1 = require(\"../../constants\");\nvar constants_2 = require(\"../constants\");\nfunction parseColorScheme(rawValue) {\n    if (rawValue.indexOf(',') > -1) {\n        return parseCommaSeparatedValues(rawValue);\n    }\n    else {\n        return parseAbbreviations(rawValue);\n    }\n}\nexports.parseColorScheme = parseColorScheme;\nfunction parseAbbreviations(rawValue) {\n    var scheme = {};\n    if (rawValue.length < constants_2.AllFaces.length) {\n        return constants_2.DefaultColorScheme;\n    }\n    constants_2.AllFaces.forEach(function (face, index) {\n        if (rawValue.length > index) {\n            scheme[face] = constants_1.ColorAbbreviationToCode[rawValue.charAt(index)];\n        }\n    });\n    return scheme;\n}\nfunction parseCommaSeparatedValues(rawValue) {\n    var scheme = {};\n    // Parse as comma separated list of colors\n    var rawColors = rawValue.split(',');\n    if (rawColors.length < constants_2.AllFaces.length) {\n        return constants_2.DefaultColorScheme;\n    }\n    constants_2.AllFaces.forEach(function (face, index) {\n        if (rawColors.length > index) {\n            var parsedColor = color_1.parseColor(rawColors[index]);\n            var colorCode = constants_1.ColorNameToCode[parsedColor] || parsedColor;\n            if (parsedColor) {\n                scheme[face] = colorCode;\n            }\n        }\n    });\n    return scheme;\n}\n"],"sourceRoot":""}