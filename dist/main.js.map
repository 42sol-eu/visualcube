{"version":3,"sources":["webpack://sr-visualizer/webpack/universalModuleDefinition","webpack://sr-visualizer/webpack/bootstrap","webpack://sr-visualizer/./src/cube/constants.ts","webpack://sr-visualizer/./src/constants.ts","webpack://sr-visualizer/./src/math.ts","webpack://sr-visualizer/./node_modules/svg.js/dist/svg.js","webpack://sr-visualizer/./src/cube/geometry.ts","webpack://sr-visualizer/./src/cube/simulation.ts","webpack://sr-visualizer/./src/index.ts","webpack://sr-visualizer/./src/cube/drawing.ts","webpack://sr-visualizer/./src/cube/parsing/arrow.ts","webpack://sr-visualizer/./src/cube/parsing/color.ts","webpack://sr-visualizer/./src/cube/stickers.ts","webpack://sr-visualizer/./src/cube/masking.ts","webpack://sr-visualizer/./src/cube/parsing/algorithm.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_a","_b","Face","constants_1","AllFaces","U","R","F","D","L","B","AlgorithmUnit","FaceRotationVectors","DefaultColorScheme","ColorCode","Yellow","Red","Blue","White","Orange","Green","JapaneseColorScheme","possibleMoves","M","E","S","X","Y","Z","TurnAbbreviation","Masking","ColorName","ColorAbbreviation","ColorNameToCode","Black","DarkGray","Gray","Silver","Purple","Pink","ColorAbbreviationToCode","Transparent","Axis","translate","pos","v","map","index","scale","scalar","makeMatrix","rows","cols","matrix","transScale","x","rotate","axis","radians","newPosition","slice","Math","cos","sin","project","radians2Degrees","PI","__WEBPACK_AMD_DEFINE_RESULT__","this","undefined","document","SVG","element","supported","Doc","parser","draw","prepare","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","setAttribute","extend","methods","arguments","pop","length","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","getAttribute","body","getElementsByTagName","documentElement","nested","size","style","attr","poly","polyline","path","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","array","block","il","result","push","filter","degrees","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","fill","stroke","opacity","y","cx","cy","width","height","rx","ry","offset","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","color","match","g","b","test","exec","replace","parseInt","substring","join","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","isColor","Array","fallback","valueOf","lastValue","lastDestination","settle","seen","indexOf","isArray","split","string","trim","parseFloat","reverse","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","move","box","bbox","isNaN","getBBox","pathHandlers","p0","H","V","C","Q","T","A","mlhvqtcsa","j","jl","toUpperCase","PathArray","a","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","reduce","prev","curr","concat","Point","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","_events","dom","center","proportionalSize","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","inside","show","hide","visible","classes","hasClass","addClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","svg","well","createElement","Parent","appendChild","innerHTML","firstChild","childNodes","each","lines","fn","removeAttribute","keys","stringify","is","obj","easing","-","<>",">","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","isEased","setTimeout","real","G","transform","num","Text","plot","leading","viewbox","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","forEach","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","rotation","parseMatrix","around","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","rect","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","Image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","view","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listenerId","events","listener","binding","options","bag","_svgjsListenerId","ev","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","group","getElementById","version","spof","nextSibling","siblings","position","next","previous","forward","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","symbol","Use","file","use","Rect","Circle","circle","Ellipse","ellipse","Line","line","Polyline","Polygon","polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","src","loaded","error","_rebuild","_build","oy","nodeType","newLined","textContent","build","tspan","newLine","textPath","blankLineOffset","dy","plain","Tspan","dx","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","toLowerCase","charAt","comp","w","h","abs","extension","dmove","radius","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","math_1","makeStickerPosition","face","cubeSize","Error","makeFaceStickers","stickers","row","_loop_1","col","sticker","centerTranslation","viewportRotations","dist","rotateFaces","faceRotations","rotations","acc","makeCubeGeometry","_c","_d","_e","_f","TurnType","faceIdentity","stickerNumber","counterClockwiseSticker","clockwiseSticker","doubleTurn","OppositeTurn","Clockwise","CounterClockwise","Double","AxisOrientation","CubeData","initialValues","faces","numStickers","clockwiseMapping","counterClockwiseMapping","doubleMapping","initValues","_this","currentValue","rotateFace","turn","newStickerNumber","axisRotation","range","faceOrder","double","originalValues","stickerIndex","nextFace","valueIndex","nextFaceValueIndex","xLayersRotation","yLayersRotation","zLayersRotation","rTurn","turnType","lTurn","uTurn","dTurn","fTurn","bTurn","mTurn","eTurn","sTurn","xTurn","yTurn","zTurn","__assign","assign","geometry_1","drawing_1","stickers_1","constants_2","defaultOptions","colorScheme","backgroundColor","cubeColor","cubeOpacity","stickerOpacity","outlineWidth","strokeWidth","cube","container","extraOptions","geomety","stickerColors","makeStickerColors","renderCube","algorithm","LL","allOptions","geometry","arrow_1","defaultFaceRotations","faceVisible","getCubeOutlineGroup","cubeOutlineGroup","renderCubeOutline","outlinePoints","renderFaceStickers","stoke-opacity","centerPoint","renderSticker","getStickerColor","p1","p2","p3","p4","stickerColor","stickerPoints","faceIndex","colorIndex","renderOLLStickers","v1","v2","renderArrow","arrow","p1y","s1","p1x","p2y","s2","p2x","s3","p3y","p3x","influence","p_","atan","lineSvg","headSvg","renderOrder","sort","getRenderOrder","hiddenFaces","visibleFaces","backgroundSvg","renderBackground","cubeOutlineGroup_1","ollGroup_1","getOllLayerGroup","arrowGroup","getArrowGroup","arrowDefinitions","arrows","parseArrows","color_1","arrowPattern","parseArrow","raw","RegExp","parseColor","part","masking_1","simulation_1","algorithm_1","makeMasking","maskAlg","maskCubeData_1","parseAlgorithm","faceMappedStickers","cubeData","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","maskingFunctions","FL","F2L","CLL","ELL","OLL","OCLL","OELL","COLL","OCELL","WV","VH","ELS","CLS","CMLL","CROSS","F2L3","F2L2","F2LSM","F2L1","F2B","LINE","masking","faceValues","getMove","getTurnType"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sr-visualizer\"] = factory();\n\telse\n\t\troot[\"sr-visualizer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b;\nvar constants_1 = require(\"./../constants\");\nvar Face;\n(function (Face) {\n    Face[Face[\"U\"] = 0] = \"U\";\n    Face[Face[\"R\"] = 1] = \"R\";\n    Face[Face[\"F\"] = 2] = \"F\";\n    Face[Face[\"D\"] = 3] = \"D\";\n    Face[Face[\"L\"] = 4] = \"L\";\n    Face[Face[\"B\"] = 5] = \"B\";\n})(Face = exports.Face || (exports.Face = {}));\nexports.AllFaces = [\n    Face.U,\n    Face.R,\n    Face.F,\n    Face.D,\n    Face.L,\n    Face.B,\n];\nvar FaceRotationVectors = /** @class */ (function () {\n    function FaceRotationVectors() {\n    }\n    FaceRotationVectors.U = [0, -1, 0];\n    FaceRotationVectors.R = [1, 0, 0];\n    FaceRotationVectors.F = [0, 0, -1];\n    FaceRotationVectors.D = [0, 1, 0];\n    FaceRotationVectors.L = [-1, 0, 0];\n    FaceRotationVectors.B = [0, 0, 1];\n    return FaceRotationVectors;\n}());\nexports.FaceRotationVectors = FaceRotationVectors;\nexports.DefaultColorScheme = (_a = {},\n    _a[Face.U] = constants_1.ColorCode.Yellow,\n    _a[Face.R] = constants_1.ColorCode.Red,\n    _a[Face.F] = constants_1.ColorCode.Blue,\n    _a[Face.D] = constants_1.ColorCode.White,\n    _a[Face.L] = constants_1.ColorCode.Orange,\n    _a[Face.B] = constants_1.ColorCode.Green,\n    _a);\nexports.JapaneseColorScheme = (_b = {},\n    _b[Face.U] = constants_1.ColorCode.Blue,\n    _b[Face.R] = constants_1.ColorCode.Orange,\n    _b[Face.F] = constants_1.ColorCode.Green,\n    _b[Face.D] = constants_1.ColorCode.White,\n    _b[Face.L] = constants_1.ColorCode.Red,\n    _b[Face.B] = constants_1.ColorCode.Yellow,\n    _b);\nvar AlgorithmUnit;\n(function (AlgorithmUnit) {\n    AlgorithmUnit[\"F\"] = \"F\";\n    AlgorithmUnit[\"U\"] = \"U\";\n    AlgorithmUnit[\"R\"] = \"R\";\n    AlgorithmUnit[\"L\"] = \"L\";\n    AlgorithmUnit[\"D\"] = \"D\";\n    AlgorithmUnit[\"B\"] = \"B\";\n    AlgorithmUnit[\"M\"] = \"M\";\n    AlgorithmUnit[\"E\"] = \"E\";\n    AlgorithmUnit[\"S\"] = \"S\";\n    AlgorithmUnit[\"X\"] = \"x\";\n    AlgorithmUnit[\"Y\"] = \"y\";\n    AlgorithmUnit[\"Z\"] = \"z\";\n})(AlgorithmUnit = exports.AlgorithmUnit || (exports.AlgorithmUnit = {}));\nexports.possibleMoves = [\n    AlgorithmUnit.F,\n    AlgorithmUnit.U,\n    AlgorithmUnit.R,\n    AlgorithmUnit.L,\n    AlgorithmUnit.D,\n    AlgorithmUnit.B,\n    AlgorithmUnit.M,\n    AlgorithmUnit.E,\n    AlgorithmUnit.S,\n    AlgorithmUnit.X,\n    AlgorithmUnit.Y,\n    AlgorithmUnit.Z,\n];\nvar TurnAbbreviation;\n(function (TurnAbbreviation) {\n    TurnAbbreviation[\"Clockwise\"] = \"\";\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\n    TurnAbbreviation[\"Double\"] = \"2\";\n})(TurnAbbreviation = exports.TurnAbbreviation || (exports.TurnAbbreviation = {}));\nvar Masking;\n(function (Masking) {\n    Masking[\"FL\"] = \"fl\";\n    Masking[\"F2L\"] = \"f2l\";\n    Masking[\"LL\"] = \"ll\";\n    Masking[\"CLL\"] = \"cll\";\n    Masking[\"ELL\"] = \"ell\";\n    Masking[\"OLL\"] = \"oll\";\n    Masking[\"OCLL\"] = \"ocll\";\n    Masking[\"OELL\"] = \"oell\";\n    Masking[\"COLL\"] = \"coll\";\n    Masking[\"OCELL\"] = \"ocell\";\n    Masking[\"WV\"] = \"wv\";\n    Masking[\"VH\"] = \"vh\";\n    Masking[\"ELS\"] = \"els\";\n    Masking[\"CLS\"] = \"cls\";\n    Masking[\"CMLL\"] = \"cmll\";\n    Masking[\"CROSS\"] = \"cross\";\n    Masking[\"F2L3\"] = \"f2l_3\";\n    Masking[\"F2L2\"] = \"f2l_2\";\n    Masking[\"F2LSM\"] = \"f2l_sm\";\n    Masking[\"F2L1\"] = \"f2l_1\";\n    Masking[\"F2B\"] = \"f2b\";\n    Masking[\"LINE\"] = \"line\";\n})(Masking = exports.Masking || (exports.Masking = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b;\nvar ColorCode;\n(function (ColorCode) {\n    ColorCode[\"Black\"] = \"#000000\";\n    ColorCode[\"DarkGray\"] = \"#404040\";\n    ColorCode[\"Gray\"] = \"#808080\";\n    ColorCode[\"Silver\"] = \"#BFBFBF\";\n    ColorCode[\"White\"] = \"#FFFFFF\";\n    ColorCode[\"Yellow\"] = \"#FEFE00\";\n    ColorCode[\"Red\"] = \"#EE0000\";\n    ColorCode[\"Orange\"] = \"#FFA100\";\n    ColorCode[\"Blue\"] = \"#0000F2\";\n    ColorCode[\"Green\"] = \"#00D800\";\n    ColorCode[\"Purple\"] = \"#A83DD9\";\n    ColorCode[\"Pink\"] = \"#F33D7B\";\n})(ColorCode = exports.ColorCode || (exports.ColorCode = {}));\nvar ColorName;\n(function (ColorName) {\n    ColorName[\"Black\"] = \"black\";\n    ColorName[\"DarkGray\"] = \"darkGray\";\n    ColorName[\"Gray\"] = \"gray\";\n    ColorName[\"Silver\"] = \"silver\";\n    ColorName[\"White\"] = \"white\";\n    ColorName[\"Yellow\"] = \"yellow\";\n    ColorName[\"Red\"] = \"red\";\n    ColorName[\"Orange\"] = \"orange\";\n    ColorName[\"Blue\"] = \"blue\";\n    ColorName[\"Green\"] = \"green\";\n    ColorName[\"Purple\"] = \"purple\";\n    ColorName[\"Pink\"] = \"pink\";\n})(ColorName = exports.ColorName || (exports.ColorName = {}));\nvar ColorAbbreviation;\n(function (ColorAbbreviation) {\n    ColorAbbreviation[\"Black\"] = \"n\";\n    ColorAbbreviation[\"DarkGray\"] = \"d\";\n    ColorAbbreviation[\"Gray\"] = \"l\";\n    ColorAbbreviation[\"Silver\"] = \"s\";\n    ColorAbbreviation[\"White\"] = \"w\";\n    ColorAbbreviation[\"Yellow\"] = \"y\";\n    ColorAbbreviation[\"Red\"] = \"r\";\n    ColorAbbreviation[\"Orange\"] = \"o\";\n    ColorAbbreviation[\"Blue\"] = \"b\";\n    ColorAbbreviation[\"Green\"] = \"g\";\n    ColorAbbreviation[\"Purple\"] = \"m\";\n    ColorAbbreviation[\"Pink\"] = \"p\";\n    ColorAbbreviation[\"Transparent\"] = \"t\";\n})(ColorAbbreviation = exports.ColorAbbreviation || (exports.ColorAbbreviation = {}));\nexports.ColorNameToCode = (_a = {},\n    _a[ColorName.Black] = ColorCode.Black,\n    _a[ColorName.DarkGray] = ColorCode.DarkGray,\n    _a[ColorName.Gray] = ColorCode.Gray,\n    _a[ColorName.Silver] = ColorCode.Silver,\n    _a[ColorName.White] = ColorCode.White,\n    _a[ColorName.Yellow] = ColorCode.Yellow,\n    _a[ColorName.Red] = ColorCode.Red,\n    _a[ColorName.Orange] = ColorCode.Orange,\n    _a[ColorName.Blue] = ColorCode.Blue,\n    _a[ColorName.Green] = ColorCode.Green,\n    _a[ColorName.Purple] = ColorCode.Purple,\n    _a[ColorName.Pink] = ColorCode.Pink,\n    _a);\nexports.ColorAbbreviationToCode = (_b = {},\n    _b[ColorAbbreviation.Black] = ColorCode.Black,\n    _b[ColorAbbreviation.DarkGray] = ColorCode.DarkGray,\n    _b[ColorAbbreviation.Gray] = ColorCode.Gray,\n    _b[ColorAbbreviation.Silver] = ColorCode.Silver,\n    _b[ColorAbbreviation.White] = ColorCode.White,\n    _b[ColorAbbreviation.Yellow] = ColorCode.Yellow,\n    _b[ColorAbbreviation.Red] = ColorCode.Red,\n    _b[ColorAbbreviation.Orange] = ColorCode.Orange,\n    _b[ColorAbbreviation.Blue] = ColorCode.Blue,\n    _b[ColorAbbreviation.Green] = ColorCode.Green,\n    _b[ColorAbbreviation.Purple] = ColorCode.Purple,\n    _b[ColorAbbreviation.Pink] = ColorCode.Pink,\n    _b[ColorAbbreviation.Transparent] = null,\n    _b);\n","\"use strict\";\n/**\n * Methods for manipulating points in 3d space (Vec3)\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Axis;\n(function (Axis) {\n    Axis[Axis[\"X\"] = 0] = \"X\";\n    Axis[Axis[\"Y\"] = 1] = \"Y\";\n    Axis[Axis[\"Z\"] = 2] = \"Z\";\n})(Axis = exports.Axis || (exports.Axis = {}));\nfunction makeMatrix(rows, cols) {\n    var matrix = [];\n    for (var r = 0; r < rows; r++) {\n        matrix[r] = [];\n        for (var c = 0; c < cols; c++) {\n            matrix[r][c] = null;\n        }\n    }\n    return matrix;\n}\nexports.makeMatrix = makeMatrix;\nfunction translate(pos, v) {\n    return pos.map(function (value, index) { return value + v[index]; });\n}\nexports.translate = translate;\nfunction scale(pos, scalar) {\n    return pos.map(function (v) { return v * scalar; });\n}\nexports.scale = scale;\n// Scale a point relative to position vector\nfunction transScale(pos, v, scalar) {\n    // Translate each facelet to cf\n    var iv = v.map(function (x) { return -x; });\n    return translate(scale(translate(pos, iv), scalar), v);\n}\nexports.transScale = transScale;\nfunction rotate(pos, axis, radians) {\n    var newPosition = pos.slice();\n    switch (axis) {\n        case Axis.X:\n            newPosition[2] = (pos[2] * Math.cos(radians)) - (pos[1] * Math.sin(radians));\n            newPosition[1] = (pos[2] * Math.sin(radians)) + (pos[1] * Math.cos(radians));\n            break;\n        case Axis.Y:\n            newPosition[0] = (pos[0] * Math.cos(radians)) + (pos[2] * Math.sin(radians));\n            newPosition[2] = -pos[0] * Math.sin(radians) + pos[2] * Math.cos(radians);\n            break;\n        case Axis.Z:\n            newPosition[0] = (pos[0] * Math.cos(radians)) - (pos[1] * Math.sin(radians));\n            newPosition[1] = (pos[0] * Math.sin(radians)) + (pos[1] * Math.cos(radians));\n            break;\n    }\n    return newPosition;\n}\nexports.rotate = rotate;\nfunction project(pos, d) {\n    return [\n        pos[0] * d / pos[2],\n        pos[1] * d / pos[2],\n        pos[2] // Maintain z coordinate to allow use of rendering tricks\n    ];\n}\nexports.project = project;\nfunction radians2Degrees(radians) {\n    return radians * 180 / Math.PI;\n}\nexports.radians2Degrees = radians2Degrees;\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Utlity Methods for creating 2D coodinates for svg polygons\n */\nvar constants_1 = require(\"./constants\");\nvar math_1 = require(\"../math\");\n/**\n * Applies set of rotations to all face rotation vectors.\n */\nfunction rotateFaces(faceRotations, rotations) {\n    return constants_1.AllFaces.reduce(function (acc, face) {\n        rotations.forEach(function (rotation) {\n            if (!acc[face]) {\n                acc[face] = faceRotations[face].slice();\n            }\n            acc[face] = math_1.rotate(acc[face], rotation[0], Math.PI * rotation[1] / 180);\n        });\n        return acc;\n    }, {});\n}\nexports.rotateFaces = rotateFaces;\nfunction makeStickerPosition(face, cubeSize, x, y) {\n    switch (face) {\n        case constants_1.Face.U: return [x, 0, cubeSize - y];\n        case constants_1.Face.R: return [cubeSize, y, x];\n        case constants_1.Face.F: return [x, y, 0];\n        case constants_1.Face.D: return [x, cubeSize, y];\n        case constants_1.Face.L: return [0, y, cubeSize - x];\n        case constants_1.Face.B: return [cubeSize - x, y, cubeSize];\n        default: throw new Error(\"Unknown cube face: '\" + face + \"'\");\n    }\n}\nexports.makeStickerPosition = makeStickerPosition;\n/**\n * Creates 2D coordinates for stickers of a given face of the cube.\n */\nfunction makeFaceStickers(face, options) {\n    var stickers = math_1.makeMatrix(options.cubeSize + 1, options.cubeSize + 1);\n    for (var row = 0; row <= options.cubeSize; row++) {\n        var _loop_1 = function (col) {\n            var sticker = makeStickerPosition(face, options.cubeSize, row, col);\n            // Now scale and tranform point to ensure size/pos independent of dim\n            var centerTranslation = [-options.cubeSize / 2, -options.cubeSize / 2, -options.cubeSize / 2];\n            sticker = math_1.translate(sticker, centerTranslation);\n            sticker = math_1.scale(sticker, 1 / options.cubeSize);\n            // Rotate cube as per perameter settings\n            options.viewportRotations.forEach(function (rotation) {\n                sticker = math_1.rotate(sticker, rotation[0], Math.PI * rotation[1] / 180);\n            });\n            // Move cube away from viewer\n            sticker = math_1.translate(sticker, [0, 0, options.dist]);\n            // Finally project the 3D points onto 2D\n            sticker = math_1.project(sticker, options.dist);\n            stickers[row][col] = sticker;\n        };\n        for (var col = 0; col <= options.cubeSize; col++) {\n            _loop_1(col);\n        }\n    }\n    return stickers;\n}\nexports.makeFaceStickers = makeFaceStickers;\n/**\n * Creates geometry for rubiks cube stickers. Contains 2D coordinates\n * for drawing svg polygons\n */\nfunction makeCubeGeometry(options) {\n    if (options.view === 'plan') {\n        options.viewportRotations = [\n            [math_1.Axis.X, -90]\n        ];\n    }\n    return constants_1.AllFaces.reduce(function (acc, face) {\n        acc[face] = makeFaceStickers(face, options);\n        return acc;\n    }, {});\n}\nexports.makeCubeGeometry = makeCubeGeometry;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d, _e, _f;\nvar math_1 = require(\"./../math\");\nvar constants_1 = require(\"./constants\");\nvar TurnType;\n(function (TurnType) {\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\n})(TurnType = exports.TurnType || (exports.TurnType = {}));\nvar faceIdentity = function (stickerNumber, cubeSize) { return stickerNumber; };\nvar counterClockwiseSticker = function (stickerNumber, cubeSize) { return (stickerNumber * cubeSize) % ((cubeSize * cubeSize) + 1); };\nvar clockwiseSticker = function (stickerNumber, cubeSize) {\n    var numStickers = cubeSize * cubeSize;\n    return (numStickers + 1) - counterClockwiseSticker(stickerNumber, cubeSize);\n};\nvar doubleTurn = function (stickerNumber, cubeSize) {\n    return ((cubeSize * cubeSize) - stickerNumber) + 1;\n};\nvar OppositeTurn = (_a = {},\n    _a[TurnType.Clockwise] = TurnType.CounterClockwise,\n    _a[TurnType.CounterClockwise] = TurnType.Clockwise,\n    _a[TurnType.Double] = TurnType.Double,\n    _a);\n// Faces that wrap around a given axis\nvar AxisMapping = (_b = {},\n    _b[math_1.Axis.X] = [constants_1.Face.U, constants_1.Face.B, constants_1.Face.F, constants_1.Face.D],\n    _b[math_1.Axis.Y] = [constants_1.Face.L, constants_1.Face.B, constants_1.Face.R, constants_1.Face.F],\n    _b[math_1.Axis.Z] = [constants_1.Face.L, constants_1.Face.U, constants_1.Face.R, constants_1.Face.D],\n    _b);\n// Face's orientation related to other faces on a given axis\nvar AxisOrientation = (_c = {},\n    _c[math_1.Axis.X] = (_d = {},\n        _d[constants_1.Face.U] = faceIdentity,\n        _d[constants_1.Face.B] = doubleTurn,\n        _d[constants_1.Face.F] = faceIdentity,\n        _d[constants_1.Face.D] = faceIdentity,\n        _d[constants_1.Face.L] = null,\n        _d[constants_1.Face.R] = null,\n        _d),\n    _c[math_1.Axis.Y] = (_e = {},\n        _e[constants_1.Face.U] = null,\n        _e[constants_1.Face.B] = counterClockwiseSticker,\n        _e[constants_1.Face.F] = counterClockwiseSticker,\n        _e[constants_1.Face.D] = null,\n        _e[constants_1.Face.L] = counterClockwiseSticker,\n        _e[constants_1.Face.R] = counterClockwiseSticker,\n        _e),\n    _c[math_1.Axis.Z] = (_f = {},\n        _f[constants_1.Face.U] = counterClockwiseSticker,\n        _f[constants_1.Face.B] = null,\n        _f[constants_1.Face.F] = null,\n        _f[constants_1.Face.D] = clockwiseSticker,\n        _f[constants_1.Face.L] = faceIdentity,\n        _f[constants_1.Face.R] = doubleTurn,\n        _f),\n    _c);\nvar CubeData = /** @class */ (function () {\n    function CubeData(cubeSize, initialValues) {\n        this.cubeSize = cubeSize;\n        /**\n         *  Data to store face value\n         *  data saved in flat array [1, 2, 3, 4, 5, 6, 7, 8, 9]\n         *  maps to cube stickers like this\n         *\n         *  U Face\n         *  1 | 2 | 3\n         *  ----------\n         *  4 | 5 | 6\n         *  ----------\n         *  7 | 8 | 9\n         *\n         *  Stickers are numbered in that manner starting with the U face\n         *  continuing with this order U, R, F, D, L, B\n         *\n         *  Because each face has a differen't orientation it may not be clear\n         *  how the back faces are numbered. Below is an example 3x3 mapping\n         *\n         *  Example numbers of 3x3 cube. nxn cubes follow the same pattern\n         *\n         *        B\n         *      L U R\n         *        F\n         *        D\n         *                  | 54  | 53  | 52  |\n         *                   -----------------\n         *                  | 51  | 50  | 49  |\n         *                   -----------------\n         *                  | 48  | 47  | 46  |\n         * -----------------                   -----------------\n         *  43  | 40  | 37     1  |  2  |  3    12  | 15  | 18\n         * ----------------- ----------------- -----------------\n         *  44  | 41  | 38     4  |  5  |  6    11  | 14  | 17\n         * ----------------- ----------------- -----------------\n         *  45  | 42  | 39     7  |  8  |  9    10  | 13  | 16\n         * -----------------                   -----------------\n         *                  | 19  | 20  | 21  |\n         *                   -----------------\n         *                  | 22  | 23  | 24  |\n         *                   -----------------\n         *                  | 25  | 26  | 27  |\n         *\n         *                  | 28  | 29  | 30  |\n         *                   -----------------\n         *                  | 31  | 32  | 33  |\n         *                   -----------------\n         *                  | 34  | 35  | 36  |\n         */\n        this.faces = {};\n        this.numStickers = this.cubeSize * this.cubeSize;\n        this.clockwiseMapping = [];\n        this.counterClockwiseMapping = [];\n        this.doubleMapping = [];\n        this.faces = initialValues;\n        if (!this.faces) {\n            this.initValues();\n        }\n        for (var i = 1; i <= this.numStickers; i++) {\n            this.clockwiseMapping.push(clockwiseSticker(i, cubeSize));\n            this.counterClockwiseMapping.push(counterClockwiseSticker(i, cubeSize));\n            this.doubleMapping.push(doubleTurn(i, cubeSize));\n        }\n    }\n    CubeData.prototype.initValues = function () {\n        var _this = this;\n        var currentValue = 1;\n        constants_1.AllFaces.forEach(function (face) {\n            _this.faces[face] = [];\n            for (var i = 0; i < _this.numStickers; i++) {\n                _this.faces[face].push(currentValue++);\n            }\n        });\n    };\n    /**\n     * Rotates values on an outer face of the rubiks cubes\n     */\n    CubeData.prototype.rotateFace = function (face, turn) {\n        var _this = this;\n        // TODO more efficient rotation to not construct so many new arrays\n        switch (turn) {\n            case TurnType.Clockwise:\n                this.faces[face] = this.clockwiseMapping.map(function (newStickerNumber) { return _this.faces[face][newStickerNumber - 1]; });\n                break;\n            case TurnType.CounterClockwise:\n                this.faces[face] = this.counterClockwiseMapping.map(function (newStickerNumber) { return _this.faces[face][newStickerNumber - 1]; });\n                break;\n            case TurnType.Double:\n                this.faces[face].reverse();\n                break;\n        }\n    };\n    /**\n     * Rotates layer values around a given axis\n     */\n    CubeData.prototype.axisRotation = function (offset, range, axis, faceOrder, forward, double) {\n        var _this = this;\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (!forward) {\n            faceOrder.reverse();\n        }\n        // Copy original values to avoid clobbering values when modifying stickers\n        var originalValues = faceOrder.map(function (face) { return _this.faces[face].slice(); });\n        // Copy values\n        for (var i = 0; i < this.cubeSize; i++) {\n            for (var r = 0; r < range; r++) {\n                var stickerIndex = (this.cubeSize * i) + (offset + r);\n                for (var j = 0; j < faceOrder.length; j++) {\n                    var face = faceOrder[j];\n                    var nextFace = double ? faceOrder[(j + 2) % faceOrder.length] : faceOrder[(j + 1) % faceOrder.length];\n                    var valueIndex = AxisOrientation[axis][face](stickerIndex + 1, this.cubeSize) - 1;\n                    var nextFaceValueIndex = AxisOrientation[axis][nextFace](stickerIndex + 1, this.cubeSize) - 1;\n                    this.faces[face][valueIndex] = originalValues[(double ? j + 2 : j + 1) % originalValues.length][nextFaceValueIndex];\n                }\n            }\n        }\n    };\n    /**\n     * Rotate layers around the x axis of the cube\n     */\n    CubeData.prototype.xLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.U, constants_1.Face.F, constants_1.Face.D, constants_1.Face.B];\n        this.axisRotation(offset, range, math_1.Axis.X, faceOrder, forward, double);\n    };\n    /**\n     * Rotate layers around the y axis of the cube\n     */\n    CubeData.prototype.yLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.L, constants_1.Face.F, constants_1.Face.R, constants_1.Face.B];\n        this.axisRotation(offset, range, math_1.Axis.Y, faceOrder, forward, double);\n    };\n    /**\n     * Rotate layers around the z axis of the cube\n     */\n    CubeData.prototype.zLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.U, constants_1.Face.L, constants_1.Face.D, constants_1.Face.R];\n        this.axisRotation(offset, range, math_1.Axis.Z, faceOrder, forward, double);\n    };\n    CubeData.prototype.rTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.R, turnType);\n        this.xLayersRotation(this.cubeSize - 1, turnType === TurnType.Clockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.lTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.L, turnType);\n        this.xLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.uTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.U, turnType);\n        this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.dTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.D, turnType);\n        this.yLayersRotation(this.cubeSize - 1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.fTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.F, turnType);\n        this.zLayersRotation(this.cubeSize - 1, turnType === TurnType.Clockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.bTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.B, turnType);\n        this.zLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.mTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.xLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.eTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.yLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.sTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.zLayersRotation(1, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.xTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.R, turnType);\n        this.rotateFace(constants_1.Face.L, OppositeTurn[turnType]);\n        this.xLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.yTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.U, turnType);\n        this.rotateFace(constants_1.Face.D, OppositeTurn[turnType]);\n        this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.zTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.F, turnType);\n        this.rotateFace(constants_1.Face.B, OppositeTurn[turnType]);\n        this.zLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.turn = function (turn) {\n        switch (turn.move) {\n            case constants_1.AlgorithmUnit.F:\n                this.fTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.B:\n                this.bTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.U:\n                this.uTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.D:\n                this.dTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.R:\n                this.rTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.L:\n                this.lTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.M:\n                this.mTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.E:\n                this.eTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.S:\n                this.sTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.X:\n                this.xTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.Y:\n                this.yTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.Z:\n                this.zTurn(turn.turnType);\n                break;\n            default:\n                throw new Error(\"Unrecognized move in turn \" + JSON.stringify(turn));\n        }\n    };\n    return CubeData;\n}());\nexports.CubeData = CubeData;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SVG = require(\"svg.js\");\nvar geometry_1 = require(\"./cube/geometry\");\nvar math_1 = require(\"./math\");\nvar drawing_1 = require(\"./cube/drawing\");\nvar constants_1 = require(\"./cube/constants\");\nvar stickers_1 = require(\"./cube/stickers\");\nvar constants_2 = require(\"./constants\");\nvar defaultOptions = {\n    cubeSize: 3,\n    width: 128,\n    height: 128,\n    viewportRotations: [\n        [math_1.Axis.Y, 45],\n        [math_1.Axis.X, -34],\n    ],\n    colorScheme: constants_1.DefaultColorScheme,\n    backgroundColor: constants_2.ColorName.White,\n    cubeColor: constants_2.ColorName.Black,\n    cubeOpacity: 100,\n    stickerOpacity: 100,\n    dist: 5,\n    outlineWidth: .94,\n    strokeWidth: 0,\n    viewbox: {\n        x: -0.9,\n        y: -0.9,\n        width: 1.8,\n        height: 1.8,\n    }\n};\nfunction cube(container, extraOptions) {\n    var options = __assign({}, defaultOptions, extraOptions);\n    var geomety = geometry_1.makeCubeGeometry(options);\n    options.stickerColors = stickers_1.makeStickerColors(options);\n    drawing_1.renderCube(container, geomety, options);\n}\nexports.cube = cube;\nSVG.on(document, 'DOMContentLoaded', function () {\n    var options = {\n        algorithm: 'M2',\n        mask: constants_1.Masking.LL,\n        width: 512,\n        height: 512,\n    };\n    var allOptions = __assign({}, defaultOptions, options);\n    var geometry = geometry_1.makeCubeGeometry(allOptions);\n    allOptions.stickerColors = stickers_1.makeStickerColors(allOptions); // Colors of stickers after algorithms / masking applies\n    drawing_1.renderCube('drawing', geometry, allOptions);\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a;\nvar constants_1 = require(\"./../constants\");\nvar SVG = require(\"svg.js\");\nvar geometry_1 = require(\"./geometry\");\nvar math_1 = require(\"../math\");\nvar constants_2 = require(\"./constants\");\nvar arrow_1 = require(\"./parsing/arrow\");\n/**\n * Utility methods for rendering cube geometry using svg.js\n */\n// Rotation vectors to track visibility of each face\nvar defaultFaceRotations = (_a = {},\n    _a[constants_2.Face.U] = [0, -1, 0],\n    _a[constants_2.Face.R] = [1, 0, 0],\n    _a[constants_2.Face.F] = [0, 0, -1],\n    _a[constants_2.Face.D] = [0, 1, 1],\n    _a[constants_2.Face.L] = [-1, 0, 0],\n    _a[constants_2.Face.B] = [0, 0, 1],\n    _a);\nfunction renderCube(container, geometry, options) {\n    var faceRotations = geometry_1.rotateFaces(defaultFaceRotations, options.viewportRotations);\n    var renderOrder = getRenderOrder(faceRotations);\n    var svg = SVG(container).size(options.width, options.height);\n    svg.viewbox(options.viewbox.x, options.viewbox.y, options.viewbox.width, options.viewbox.height);\n    var hiddenFaces = renderOrder.filter(function (face) { return !faceVisible(face, faceRotations); });\n    var visibleFaces = renderOrder.filter(function (face) { return faceVisible(face, faceRotations); });\n    renderBackground(svg, options);\n    // Render hidden faces if cube color has transparency\n    if (options.cubeOpacity < 100) {\n        var cubeOutlineGroup_1 = getCubeOutlineGroup(svg, options);\n        hiddenFaces.forEach(function (face) {\n            renderFaceStickers(svg, face, geometry[face], options);\n            renderCubeOutline(cubeOutlineGroup_1, geometry[face], options);\n        });\n    }\n    var cubeOutlineGroup = getCubeOutlineGroup(svg, options);\n    visibleFaces.forEach(function (face) {\n        renderCubeOutline(cubeOutlineGroup, geometry[face], options);\n        renderFaceStickers(svg, face, geometry[face], options);\n    });\n    if (options.view === 'plan') {\n        var ollGroup_1 = getOllLayerGroup(svg, options);\n        [constants_2.Face.R, constants_2.Face.F, constants_2.Face.L, constants_2.Face.B].forEach(function (face) {\n            renderOLLStickers(ollGroup_1, face, geometry[face], faceRotations, options);\n        });\n    }\n    var arrowGroup = getArrowGroup(svg, geometry[0].length - 1);\n    var arrowDefinitions = [];\n    if (Array.isArray(options.arrows)) {\n        arrowDefinitions = options.arrows;\n    }\n    else if (typeof options.arrows === 'string') {\n        arrowDefinitions = arrow_1.parseArrows(options.arrows);\n    }\n    arrowDefinitions.forEach(function (arrow) {\n        renderArrow(arrowGroup, geometry, arrow);\n    });\n}\nexports.renderCube = renderCube;\n/**\n * Determines face render order based on z position. Faces further away\n * will render first so anything closer will be drawn on top.\n */\nfunction getRenderOrder(faceRotations) {\n    var renderOrder = constants_2.AllFaces.slice().sort(function (a, b) {\n        return faceRotations[b][2] - faceRotations[a][2];\n    });\n    return renderOrder;\n}\nfunction renderBackground(svg, options) {\n    var backgroundSvg = svg.rect(options.viewbox.width, options.viewbox.height);\n    backgroundSvg.x(options.viewbox.x);\n    backgroundSvg.y(options.viewbox.y);\n    backgroundSvg.fill({\n        color: options.backgroundColor\n    });\n}\nfunction faceVisible(face, rotations) {\n    return rotations[face][2] < -0.105;\n}\nfunction getCubeOutlineGroup(svg, options) {\n    var cubeOutlineGroup = svg.group();\n    cubeOutlineGroup.opacity(options.cubeOpacity / 100);\n    cubeOutlineGroup.attr({\n        'stroke-width': '0.1',\n        'stroke-linejoin': 'round',\n    });\n    return cubeOutlineGroup;\n}\nfunction getOllLayerGroup(svg, options) {\n    var group = svg.group();\n    group.opacity(options.stickerOpacity / 100);\n    group.attr({\n        'stroke-opacity': '1',\n        'stroke-width': 0.02,\n        'stroke-linejoin': 'round'\n    });\n    return group;\n}\nfunction getArrowGroup(svg, cubeSize) {\n    var arrowGroup = svg.group();\n    arrowGroup.attr({\n        'opacity': 1,\n        'stroke-opacity': 1,\n        'stroke-width': (.12 / cubeSize),\n        'stroke-linecap': 'round'\n    });\n    return arrowGroup;\n}\nfunction renderCubeOutline(svg, face, options) {\n    var cubeSize = face.length - 1;\n    var width = options.outlineWidth;\n    var outlinePoints = [\n        [face[0][0][0] * width, face[0][0][1] * width],\n        [face[cubeSize][0][0] * width, face[cubeSize][0][1] * width],\n        [face[cubeSize][cubeSize][0] * width, face[cubeSize][cubeSize][1] * width],\n        [face[0][cubeSize][0] * width, face[0][cubeSize][1] * width],\n    ];\n    var polygon = svg.polygon(outlinePoints);\n    polygon.fill(options.cubeColor);\n    polygon.stroke(options.cubeColor);\n    return polygon;\n}\nfunction renderFaceStickers(svg, face, stickers, options) {\n    var cubeSize = stickers.length - 1;\n    var group = svg.group();\n    group.opacity(options.stickerOpacity / 100);\n    group.attr({\n        'stoke-opacity': '0.5',\n        'stroke-width': options.strokeWidth,\n        'stroke-linejoin': 'round'\n    });\n    for (var i = 0; i < cubeSize; i++) {\n        for (var j = 0; j < cubeSize; j++) {\n            var centerPoint = [\n                (stickers[j][i][0] + stickers[j + 1][i + 1][0]) / 2,\n                (stickers[j][i][1] + stickers[j + 1][i + 1][1]) / 2,\n                0\n            ];\n            // Scale points in towards centre\n            var p1 = math_1.transScale(stickers[j][i], centerPoint, .85);\n            var p2 = math_1.transScale(stickers[j + 1][i], centerPoint, .85);\n            var p3 = math_1.transScale(stickers[j + 1][i + 1], centerPoint, .85);\n            var p4 = math_1.transScale(stickers[j][i + 1], centerPoint, .85);\n            var color = getStickerColor(face, i, j, options);\n            renderSticker(group, p1, p2, p3, p4, color, options.cubeColor);\n        }\n    }\n    return group;\n}\nfunction renderSticker(g, p1, p2, p3, p4, stickerColor, cubeColor) {\n    var stickerPoints = [\n        [p1[0], p1[1]],\n        [p2[0], p2[1]],\n        [p3[0], p3[1]],\n        [p4[0], p4[1]],\n    ];\n    var polygon = g.polygon(stickerPoints);\n    polygon.fill(stickerColor);\n    polygon.stroke(cubeColor);\n    return polygon;\n}\n/**\n * Starting with U, stickers are numbered from\n * their face starting with the top left corner\n * sticker.\n *\n * U Face\n * 1 | 2 | 3\n * ----------\n * 4 | 5 | 6\n * ----------\n * 7 | 8 | 9\n *\n * And so on for faces R, F, D, L, B.\n * So R's top left corner for a 3x3 cube would be # 10\n *\n * An individual sticker's color is obtained by indexing\n * into the array of sticker colors by the number the sticker is\n */\nfunction getStickerColor(face, row, col, options) {\n    if (!Array.isArray(options.stickerColors)) {\n        return options.colorScheme[face] || constants_1.ColorName.Black;\n    }\n    var faceIndex = constants_2.AllFaces.indexOf(face);\n    var stickerNumber = (row * options.cubeSize) + col;\n    var colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber;\n    if (options.stickerColors.length <= colorIndex) {\n        return constants_1.ColorName.Black;\n    }\n    return options.stickerColors[colorIndex];\n}\n// Renders the top rim of the R U L and B faces out from side of cube\nfunction renderOLLStickers(group, face, stickers, rotations, options) {\n    // Translation vector, to move faces out\n    var v1 = math_1.scale(rotations[face], 0);\n    var v2 = math_1.scale(rotations[face], .2);\n    for (var i = 0; i < options.cubeSize; i++) {\n        // find center point of sticker\n        var centerPoint = [\n            (stickers[i][0][0] + stickers[i + 1][1][0]) / 2,\n            (stickers[i][0][1] + stickers[i + 1][1][1]) / 2,\n            0\n        ];\n        var p1 = math_1.translate(math_1.transScale(stickers[i][0], centerPoint, .94), v1);\n        var p2 = math_1.translate(math_1.transScale(stickers[i + 1][0], centerPoint, .94), v1);\n        var p3 = math_1.translate(math_1.transScale(stickers[i + 1][1], centerPoint, .94), v2);\n        var p4 = math_1.translate(math_1.transScale(stickers[i][1], centerPoint, .94), v2);\n        renderSticker(group, p1, p2, p3, p4, getStickerColor(face, 0, i, options), options.cubeColor);\n    }\n}\nexports.renderOLLStickers = renderOLLStickers;\n/**\n * Generates svg for an arrow pointing from sticker s1 to s2\n */\nfunction renderArrow(group, geometry, arrow) {\n    var cubeSize = geometry[0].length - 1;\n    // Find center point for each facelet\n    var p1y = Math.floor(arrow.s1.n / cubeSize);\n    var p1x = arrow.s1.n % cubeSize;\n    var p1 = [\n        (geometry[arrow.s1.face][p1x][p1y][0] + geometry[arrow.s1.face][p1x + 1][p1y + 1][0]) / 2,\n        (geometry[arrow.s1.face][p1x][p1y][1] + geometry[arrow.s1.face][p1x + 1][p1y + 1][1]) / 2,\n        0\n    ];\n    var p2y = Math.floor(arrow.s2.n / cubeSize);\n    var p2x = arrow.s2.n % cubeSize;\n    var p2 = [\n        (geometry[arrow.s1.face][p2x][p2y][0] + geometry[arrow.s1.face][p2x + 1][p2y + 1][0]) / 2,\n        (geometry[arrow.s1.face][p2x][p2y][1] + geometry[arrow.s1.face][p2x + 1][p2y + 1][1]) / 2,\n        0\n    ];\n    // Find midpoint between p1 and p2\n    var center = [\n        (p1[0] + p2[0]) / 2,\n        (p1[1] + p2[1]) / 2,\n        0\n    ];\n    // Shorten arrows towards midpoint according to config\n    p1 = math_1.transScale(p1, center, arrow.scale / 10);\n    p2 = math_1.transScale(p2, center, arrow.scale / 10);\n    var p3;\n    if (arrow.s3) {\n        var p3y = Math.floor(arrow.s3.n / cubeSize);\n        var p3x = arrow.s3.n % cubeSize;\n        p3 = [\n            (geometry[arrow.s1.face][p3x][p3y][0] + geometry[arrow.s1.face][p3x + 1][p3y + 1][0]) / 2,\n            (geometry[arrow.s1.face][p3x][p3y][1] + geometry[arrow.s1.face][p3x + 1][p3y + 1][1]) / 2,\n            0\n        ];\n        p3 = math_1.transScale(p3, center, arrow.influence / 5);\n    }\n    // Calculate arrow rotation\n    var p_ = p3 ? p3 : p1;\n    var rotation = p_[1] > p2[1] ? 270 : 90;\n    if (p2[0] - p_[0] != 0) {\n        rotation = math_1.radians2Degrees(Math.atan((p2[1] - p_[1]) / (p2[0] - p_[0])));\n        rotation = (p_[0] > p2[0]) ? rotation + 180 : rotation;\n    }\n    // Draw line\n    var lineSvg = group.path(\"M \" + p1[0] + \",\" + p1[1] + \" \" + (p3 ? 'Q ' + p3[0] + ',' + p3[1] : 'L') + \" \" + p2[0] + \",\" + p2[1]);\n    lineSvg.fill('none');\n    lineSvg.stroke({\n        color: arrow.color,\n        opacity: 1\n    });\n    // Draw arrow head\n    var headSvg = group.path('M 5.77,0.0 L -2.88,5.0 L -2.88,-5.0 L 5.77,0.0 z');\n    headSvg.attr({\n        transform: \"translate(\" + p2[0] + \",\" + p2[1] + \") scale(\" + .033 / cubeSize + \") rotate(\" + rotation + \")\"\n    });\n    headSvg.style({\n        fill: arrow.color\n    });\n    headSvg.attr({\n        'stroke-width': 0,\n        'stroke-linejoin': 'round'\n    });\n}\nexports.renderArrow = renderArrow;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../constants\");\nvar constants_2 = require(\"../../constants\");\nvar color_1 = require(\"./color\");\nvar stickerPattern = '([URFDLB])([0-9]+)';\nvar colorPattern = '(black|dgrey|grey|silver|white|yellow|red|orange|blue|green|purple|pink|[0-9a-fA-F]{6}|[0-9a-fA-F]{3})';\nvar arrowPattern = \"^(\" + stickerPattern + \")(\" + stickerPattern + \")(\" + stickerPattern + \")?(-s([0-9+]))?(-i([0-9+]))?(-\" + colorPattern + \")?\";\nfunction parseArrows(raw) {\n    if (typeof raw !== 'string') {\n        return [];\n    }\n    return raw.split(',')\n        .map(function (part) { return parseArrow(part); })\n        .filter(function (arrow) { return !!arrow; });\n}\nexports.parseArrows = parseArrows;\nfunction parseArrow(raw) {\n    if (typeof raw !== 'string') {\n        return null;\n    }\n    var arrowRegex = new RegExp(arrowPattern);\n    var match = arrowRegex.exec(raw);\n    if (!match) {\n        return null;\n    }\n    return {\n        s1: {\n            face: constants_1.Face[match[2]],\n            n: parseInt(match[3])\n        },\n        s2: {\n            face: constants_1.Face[match[5]],\n            n: parseInt(match[6])\n        },\n        s3: !match[7] ? undefined : {\n            face: constants_1.Face[match[8]],\n            n: parseInt(match[9])\n        },\n        color: match[15] ? color_1.parseColor(match[15]) : constants_2.ColorCode.Gray,\n        scale: match[11] ? parseInt(match[11]) : 10,\n        influence: match[13] ? parseInt(match[13]) : 10\n    };\n}\nexports.parseArrow = parseArrow;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../../constants\");\nfunction parseColor(raw) {\n    var colorcodeRegex = /^[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/;\n    // Append # for color codes\n    if (colorcodeRegex.exec(raw)) {\n        return \"#\" + raw;\n    }\n    if (constants_1.ColorAbbreviationToCode[raw]) {\n        return constants_1.ColorAbbreviationToCode[raw];\n    }\n    if (constants_1.ColorNameToCode[raw]) {\n        return constants_1.ColorNameToCode[raw];\n    }\n    // Default color\n    return constants_1.ColorCode.Gray;\n}\nexports.parseColor = parseColor;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar masking_1 = require(\"./masking\");\nvar simulation_1 = require(\"./simulation\");\nvar algorithm_1 = require(\"./parsing/algorithm\");\nvar constants_1 = require(\"./constants\");\nvar constants_2 = require(\"../constants\");\nfunction makeStickerColors(options) {\n    var stickerColors = options.stickerColors;\n    var mask = options.mask ? masking_1.makeMasking(options.mask, options.cubeSize) : null;\n    if (mask && options.maskAlg) {\n        var maskCubeData_1 = new simulation_1.CubeData(options.cubeSize, mask);\n        var alg_1 = algorithm_1.parseAlgorithm(options.maskAlg);\n        alg_1.forEach(function (turn) {\n            maskCubeData_1.turn(turn);\n        });\n        mask = maskCubeData_1.faces;\n    }\n    // Fill with color scheme if sticker colors not predefined.\n    if (!stickerColors) {\n        stickerColors = [].concat.apply([], constants_1.AllFaces.map(function (face) {\n            return Array.apply(null, Array(options.cubeSize * options.cubeSize)).map(function () { return options.colorScheme[face]; });\n        }));\n    }\n    var faceMappedStickers = constants_1.AllFaces.reduce(function (acc, face) {\n        if (!acc[face])\n            acc[face] = [];\n        for (var i = 0; i < options.cubeSize; i++) {\n            for (var j = 0; j < options.cubeSize; j++) {\n                var faceIndex = constants_1.AllFaces.indexOf(face);\n                var stickerNumber = (i * options.cubeSize) + j;\n                var colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber;\n                if (stickerColors.length <= colorIndex) {\n                    acc[face][(options.cubeSize * i) + j] = constants_2.ColorName.Black;\n                }\n                else {\n                    acc[face][(options.cubeSize * i) + j] = stickerColors[colorIndex];\n                }\n                if (mask && !mask[face][(options.cubeSize * i) + j]) {\n                    acc[face][(options.cubeSize * i) + j] = constants_2.ColorCode.DarkGray;\n                }\n            }\n        }\n        return acc;\n    }, {});\n    // Apply Algorithm\n    var cubeData = new simulation_1.CubeData(options.cubeSize, faceMappedStickers);\n    var alg = algorithm_1.parseAlgorithm(options.algorithm);\n    alg.forEach(function (move) {\n        cubeData.turn(move);\n    });\n    return [].concat.apply([], constants_1.AllFaces.map(function (face) { return cubeData.faces[face].slice(); }));\n}\nexports.makeStickerColors = makeStickerColors;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\nvar constants_1 = require(\"./constants\");\nvar maskingFunctions = (_a = {},\n    _a[constants_1.Masking.FL] = (_b = {},\n        _b[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _b[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _b[constants_1.Face.R] = function (row, col, cubeSize) { return row == (cubeSize - 1); },\n        _b[constants_1.Face.L] = function (row, col, cubeSize) { return row == (cubeSize - 1); },\n        _b[constants_1.Face.F] = function (row, col, cubeSize) { return row == (cubeSize - 1); },\n        _b[constants_1.Face.B] = function (row, col, cubeSize) { return row == (cubeSize - 1); },\n        _b),\n    _a[constants_1.Masking.F2L] = (_c = {},\n        _c[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _c[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _c[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _c),\n    _a[constants_1.Masking.LL] = (_d = {},\n        _d[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _d[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _d[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0; },\n        _d),\n    _a[constants_1.Masking.CLL] = (_e = {},\n        _e[constants_1.Face.U] = function (row, col, cubeSize) {\n            return (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) // is center\n                || ((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1)));\n        },\n        _e[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _e[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e),\n    _a[constants_1.Masking.ELL] = (_f = {},\n        _f[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _f[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _f[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f),\n    _a[constants_1.Masking.OLL] = (_g = {},\n        _g[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _g[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _g),\n    _a[constants_1.Masking.OCLL] = (_h = {},\n        _h[constants_1.Face.U] = function (row, col, cubeSize) {\n            return (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) // is center\n                || ((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1)));\n        },\n        _h[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _h),\n    _a[constants_1.Masking.OELL] = (_j = {},\n        _j[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _j[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _j),\n    _a[constants_1.Masking.COLL] = (_k = {},\n        _k[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _k[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _k[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k),\n    _a[constants_1.Masking.OCELL] = (_l = {},\n        _l[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _l[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _l[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l),\n    _a[constants_1.Masking.WV] = (_m = {},\n        _m[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _m[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _m[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _m),\n    _a[constants_1.Masking.VH] = (_o = {},\n        _o[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _o[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _o[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _o),\n    _a[constants_1.Masking.ELS] = (_p = {},\n        _p[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _p[constants_1.Face.D] = function (row, col, cubeSize) { return row == 0 ? col < cubeSize - 1 : true; },\n        _p[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && (row == cubeSize - 1 ? col > 0 : true); },\n        _p[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _p[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && (row == cubeSize - 1 ? col < cubeSize - 1 : true); },\n        _p[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _p),\n    _a[constants_1.Masking.CLS] = (_q = {},\n        _q[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _q[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _q[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _q),\n    _a[constants_1.Masking.CMLL] = (_r = {},\n        _r[constants_1.Face.U] = function (row, col, cubeSize) { return ((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _r[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _r[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 || col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 || col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.F] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.B] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _r),\n    _a[constants_1.Masking.CROSS] = (_s = {},\n        _s[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _s[constants_1.Face.D] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _s[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s),\n    _a[constants_1.Masking.F2L3] = (_t = {},\n        _t[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _t[constants_1.Face.D] = function (row, col, cubeSize) { return (row == 0 && col == cubeSize - 1) || !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _t[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _t[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _t[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _t[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _t),\n    _a[constants_1.Masking.F2L2] = (_u = {},\n        _u[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _u[constants_1.Face.D] = function (row, col, cubeSize) { return row > 0 || (col > 0 && col < cubeSize - 1); },\n        _u[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _u[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _u[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _u[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _u),\n    _a[constants_1.Masking.F2LSM] = (_v = {},\n        _v[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _v[constants_1.Face.D] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))) || (col == 0 && row == cubeSize - 1) || (row == 0 && col == cubeSize - 1); },\n        _v[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _v[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _v[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _v[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _v),\n    _a[constants_1.Masking.F2L1] = (_w = {},\n        _w[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _w[constants_1.Face.D] = function (row, col, cubeSize) { return row !== 0 || col !== cubeSize - 1; },\n        _w[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _w[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _w[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _w[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _w),\n    _a[constants_1.Masking.F2B] = (_x = {},\n        _x[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _x[constants_1.Face.D] = function (row, col, cubeSize) { return (col == 0 || col == cubeSize - 1); },\n        _x[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _x[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _x[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && (col == 0 || col == cubeSize - 1); },\n        _x[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && (col == 0 || col == cubeSize - 1); },\n        _x),\n    _a[constants_1.Masking.LINE] = (_y = {},\n        _y[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.D] = function (row, col, cubeSize) { return col > 0 && col < cubeSize - 1; },\n        _y[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _y[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _y),\n    _a);\nfunction makeMasking(masking, cubeSize) {\n    var _a;\n    if (!maskingFunctions[masking]) {\n        throw new Error(\"invalid masking \" + masking);\n    }\n    var numStickers = cubeSize * cubeSize;\n    var faceValues = (_a = {},\n        _a[constants_1.Face.U] = [],\n        _a[constants_1.Face.F] = [],\n        _a[constants_1.Face.R] = [],\n        _a[constants_1.Face.D] = [],\n        _a[constants_1.Face.L] = [],\n        _a[constants_1.Face.B] = [],\n        _a);\n    var _loop_1 = function (i) {\n        var row = Math.floor(i / cubeSize);\n        var col = i % cubeSize;\n        constants_1.AllFaces.forEach(function (face) {\n            faceValues[face].push(maskingFunctions[masking][face](row, col, cubeSize));\n        });\n    };\n    for (var i = 0; i < numStickers; i++) {\n        _loop_1(i);\n    }\n    return faceValues;\n}\nexports.makeMasking = makeMasking;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar simulation_1 = require(\"../simulation\");\nvar constants_1 = require(\"../constants\");\n/**\n * Takes in an algorithm string and parses the turns from it\n * algorithm string format should be moves separated by a single space\n * (ex. \"U R2 L' x\")\n */\nfunction parseAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    return algorithm.split(' ').map(function (move) {\n        if (move.length > 2) {\n            throw new Error(\"Invalid move (\" + move + \") in algorithm '\" + algorithm + \"'\");\n        }\n        return {\n            move: getMove(move),\n            turnType: getTurnType(move)\n        };\n    });\n}\nexports.parseAlgorithm = parseAlgorithm;\nfunction getMove(move) {\n    if (constants_1.possibleMoves.indexOf(move.charAt(0)) < 0) {\n        throw new Error(\"invalid move (\" + move + \")\");\n    }\n    else\n        return move.charAt(0);\n}\nfunction getTurnType(move) {\n    switch (move.charAt(1)) { // if string is only length 1 .charAt(1) will return empty string\n        case constants_1.TurnAbbreviation.Clockwise:\n            return simulation_1.TurnType.Clockwise;\n        case constants_1.TurnAbbreviation.CounterClockwise:\n            return simulation_1.TurnType.CounterClockwise;\n        case constants_1.TurnAbbreviation.Double:\n            return simulation_1.TurnType.Double;\n        default:\n            throw new Error(\"Invalid move modifier (\" + move.charAt(1) + \") in move '\" + move + \"'\");\n    }\n    ;\n}\n"],"sourceRoot":""}