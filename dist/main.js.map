{"version":3,"sources":["webpack://sr-visualizer/webpack/universalModuleDefinition","webpack://sr-visualizer/webpack/bootstrap","webpack://sr-visualizer/./src/cube/constants.ts","webpack://sr-visualizer/./src/constants.ts","webpack://sr-visualizer/./src/math.ts","webpack://sr-visualizer/./src/cube/geometry.ts","webpack://sr-visualizer/./src/cube/simulation.ts","webpack://sr-visualizer/./src/index.ts","webpack://sr-visualizer/./src/cube/drawing.ts","webpack://sr-visualizer/./node_modules/svg.js/dist/svg.js","webpack://sr-visualizer/./src/cube/parsing/arrow.ts","webpack://sr-visualizer/./src/cube/parsing/color.ts","webpack://sr-visualizer/./src/cube/stickers.ts","webpack://sr-visualizer/./src/cube/masking.ts","webpack://sr-visualizer/./src/cube/parsing/algorithm.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_a","_b","Face","constants_1","AllFaces","U","R","F","D","L","B","AlgorithmUnit","FaceRotationVectors","DefaultColorScheme","ColorCode","Yellow","Red","Blue","White","Orange","Green","JapaneseColorScheme","possibleMoves","M","E","S","X","Y","Z","TurnAbbreviation","Masking","ColorName","ColorAbbreviation","ColorNameToCode","Black","DarkGray","Gray","Silver","Purple","Pink","ColorAbbreviationToCode","Transparent","Axis","translate","pos","v","map","index","scale","scalar","makeMatrix","rows","cols","matrix","transScale","x","rotate","axis","radians","newPosition","slice","Math","cos","sin","project","radians2Degrees","PI","math_1","makeStickerPosition","face","cubeSize","y","Error","makeFaceStickers","options","stickers","row","_loop_1","col","sticker","centerTranslation","viewportRotations","forEach","rotation","dist","rotateFaces","faceRotations","rotations","reduce","acc","makeCubeGeometry","view","_c","_d","_e","_f","TurnType","faceIdentity","stickerNumber","counterClockwiseSticker","clockwiseSticker","doubleTurn","OppositeTurn","Clockwise","CounterClockwise","Double","AxisOrientation","CubeData","initialValues","this","faces","numStickers","clockwiseMapping","counterClockwiseMapping","doubleMapping","initValues","push","_this","currentValue","rotateFace","turn","newStickerNumber","reverse","axisRotation","offset","range","faceOrder","forward","double","originalValues","stickerIndex","j","length","nextFace","valueIndex","nextFaceValueIndex","xLayersRotation","yLayersRotation","zLayersRotation","rTurn","turnType","lTurn","uTurn","dTurn","fTurn","bTurn","mTurn","eTurn","sTurn","xTurn","yTurn","zTurn","move","JSON","stringify","__assign","assign","arguments","apply","geometry_1","drawing_1","stickers_1","constants_2","defaultOptions","width","height","colorScheme","backgroundColor","cubeColor","cubeOpacity","stickerOpacity","outlineWidth","strokeWidth","viewbox","cube","container","extraOptions","geomety","stickerColors","makeStickerColors","renderCube","SVG","arrow_1","defaultFaceRotations","faceVisible","getCubeOutlineGroup","svg","cubeOutlineGroup","group","opacity","attr","stroke-width","stroke-linejoin","renderCubeOutline","outlinePoints","polygon","fill","stroke","renderFaceStickers","stoke-opacity","centerPoint","renderSticker","getStickerColor","g","p1","p2","p3","p4","stickerColor","stickerPoints","Array","isArray","faceIndex","indexOf","colorIndex","renderOLLStickers","v1","v2","renderArrow","geometry","arrow","p1y","floor","s1","p1x","p2y","s2","p2x","center","s3","p3y","p3x","influence","p_","atan","lineSvg","path","color","headSvg","transform","style","renderOrder","sort","a","b","getRenderOrder","size","hiddenFaces","filter","visibleFaces","backgroundSvg","rect","renderBackground","cubeOutlineGroup_1","ollGroup_1","stroke-opacity","getOllLayerGroup","arrowGroup","stroke-linecap","getArrowGroup","arrowDefinitions","arrows","parseArrows","__WEBPACK_AMD_DEFINE_RESULT__","undefined","document","element","supported","Doc","parser","draw","prepare","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","setAttribute","extend","methods","pop","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","parse","getAttribute","body","getElementsByTagName","documentElement","nested","poly","polyline","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","array","block","il","result","degrees","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","cx","cy","rx","ry","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","match","test","exec","replace","parseInt","substring","join","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","isColor","fallback","valueOf","lastValue","lastDestination","settle","seen","split","string","trim","parseFloat","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","box","bbox","isNaN","getBBox","pathHandlers","p0","H","V","C","Q","T","A","mlhvqtcsa","jl","toUpperCase","PathArray","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","prev","curr","concat","Point","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","_events","dom","proportionalSize","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","inside","show","hide","visible","classes","hasClass","addClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","well","createElement","Parent","appendChild","innerHTML","firstChild","childNodes","each","lines","fn","removeAttribute","keys","is","obj","easing","-","<>",">","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","Boolean","min","fire","fx","eachAt","self","Matrix","multiply","undo","extract","isEased","setTimeout","real","G","num","Text","plot","leading","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","parseMatrix","around","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","Image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listenerId","events","listener","binding","bag","_svgjsListenerId","ev","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","getElementById","version","spof","nextSibling","siblings","position","next","previous","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","symbol","Use","file","use","Rect","Circle","circle","Ellipse","ellipse","Line","line","Polyline","Polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","src","loaded","error","_rebuild","_build","oy","nodeType","newLined","textContent","build","tspan","newLine","textPath","blankLineOffset","dy","plain","Tspan","dx","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","toLowerCase","charAt","comp","w","h","abs","extension","dmove","radius","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","color_1","arrowPattern","parseArrow","raw","RegExp","parseColor","part","masking_1","simulation_1","algorithm_1","makeMasking","maskAlg","maskCubeData_1","parseAlgorithm","faceMappedStickers","cubeData","algorithm","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","maskingFunctions","FL","F2L","LL","CLL","ELL","OLL","OCLL","OELL","COLL","OCELL","WV","VH","ELS","CLS","CMLL","CROSS","F2L3","F2L2","F2LSM","F2L1","F2B","LINE","masking","faceValues","getMove","getTurnType"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sr-visualizer\"] = factory();\n\telse\n\t\troot[\"sr-visualizer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b;\nvar constants_1 = require(\"./../constants\");\nvar Face;\n(function (Face) {\n    Face[Face[\"U\"] = 0] = \"U\";\n    Face[Face[\"R\"] = 1] = \"R\";\n    Face[Face[\"F\"] = 2] = \"F\";\n    Face[Face[\"D\"] = 3] = \"D\";\n    Face[Face[\"L\"] = 4] = \"L\";\n    Face[Face[\"B\"] = 5] = \"B\";\n})(Face = exports.Face || (exports.Face = {}));\nexports.AllFaces = [\n    Face.U,\n    Face.R,\n    Face.F,\n    Face.D,\n    Face.L,\n    Face.B,\n];\nvar FaceRotationVectors = /** @class */ (function () {\n    function FaceRotationVectors() {\n    }\n    FaceRotationVectors.U = [0, -1, 0];\n    FaceRotationVectors.R = [1, 0, 0];\n    FaceRotationVectors.F = [0, 0, -1];\n    FaceRotationVectors.D = [0, 1, 0];\n    FaceRotationVectors.L = [-1, 0, 0];\n    FaceRotationVectors.B = [0, 0, 1];\n    return FaceRotationVectors;\n}());\nexports.FaceRotationVectors = FaceRotationVectors;\nexports.DefaultColorScheme = (_a = {},\n    _a[Face.U] = constants_1.ColorCode.Yellow,\n    _a[Face.R] = constants_1.ColorCode.Red,\n    _a[Face.F] = constants_1.ColorCode.Blue,\n    _a[Face.D] = constants_1.ColorCode.White,\n    _a[Face.L] = constants_1.ColorCode.Orange,\n    _a[Face.B] = constants_1.ColorCode.Green,\n    _a);\nexports.JapaneseColorScheme = (_b = {},\n    _b[Face.U] = constants_1.ColorCode.Blue,\n    _b[Face.R] = constants_1.ColorCode.Orange,\n    _b[Face.F] = constants_1.ColorCode.Green,\n    _b[Face.D] = constants_1.ColorCode.White,\n    _b[Face.L] = constants_1.ColorCode.Red,\n    _b[Face.B] = constants_1.ColorCode.Yellow,\n    _b);\nvar AlgorithmUnit;\n(function (AlgorithmUnit) {\n    AlgorithmUnit[\"F\"] = \"F\";\n    AlgorithmUnit[\"U\"] = \"U\";\n    AlgorithmUnit[\"R\"] = \"R\";\n    AlgorithmUnit[\"L\"] = \"L\";\n    AlgorithmUnit[\"D\"] = \"D\";\n    AlgorithmUnit[\"B\"] = \"B\";\n    AlgorithmUnit[\"M\"] = \"M\";\n    AlgorithmUnit[\"E\"] = \"E\";\n    AlgorithmUnit[\"S\"] = \"S\";\n    AlgorithmUnit[\"X\"] = \"x\";\n    AlgorithmUnit[\"Y\"] = \"y\";\n    AlgorithmUnit[\"Z\"] = \"z\";\n})(AlgorithmUnit = exports.AlgorithmUnit || (exports.AlgorithmUnit = {}));\nexports.possibleMoves = [\n    AlgorithmUnit.F,\n    AlgorithmUnit.U,\n    AlgorithmUnit.R,\n    AlgorithmUnit.L,\n    AlgorithmUnit.D,\n    AlgorithmUnit.B,\n    AlgorithmUnit.M,\n    AlgorithmUnit.E,\n    AlgorithmUnit.S,\n    AlgorithmUnit.X,\n    AlgorithmUnit.Y,\n    AlgorithmUnit.Z,\n];\nvar TurnAbbreviation;\n(function (TurnAbbreviation) {\n    TurnAbbreviation[\"Clockwise\"] = \"\";\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\n    TurnAbbreviation[\"Double\"] = \"2\";\n})(TurnAbbreviation = exports.TurnAbbreviation || (exports.TurnAbbreviation = {}));\nvar Masking;\n(function (Masking) {\n    Masking[\"FL\"] = \"fl\";\n    Masking[\"F2L\"] = \"f2l\";\n    Masking[\"LL\"] = \"ll\";\n    Masking[\"CLL\"] = \"cll\";\n    Masking[\"ELL\"] = \"ell\";\n    Masking[\"OLL\"] = \"oll\";\n    Masking[\"OCLL\"] = \"ocll\";\n    Masking[\"OELL\"] = \"oell\";\n    Masking[\"COLL\"] = \"coll\";\n    Masking[\"OCELL\"] = \"ocell\";\n    Masking[\"WV\"] = \"wv\";\n    Masking[\"VH\"] = \"vh\";\n    Masking[\"ELS\"] = \"els\";\n    Masking[\"CLS\"] = \"cls\";\n    Masking[\"CMLL\"] = \"cmll\";\n    Masking[\"CROSS\"] = \"cross\";\n    Masking[\"F2L3\"] = \"f2l_3\";\n    Masking[\"F2L2\"] = \"f2l_2\";\n    Masking[\"F2LSM\"] = \"f2l_sm\";\n    Masking[\"F2L1\"] = \"f2l_1\";\n    Masking[\"F2B\"] = \"f2b\";\n    Masking[\"LINE\"] = \"line\";\n})(Masking = exports.Masking || (exports.Masking = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b;\nvar ColorCode;\n(function (ColorCode) {\n    ColorCode[\"Black\"] = \"#000000\";\n    ColorCode[\"DarkGray\"] = \"#404040\";\n    ColorCode[\"Gray\"] = \"#808080\";\n    ColorCode[\"Silver\"] = \"#BFBFBF\";\n    ColorCode[\"White\"] = \"#FFFFFF\";\n    ColorCode[\"Yellow\"] = \"#FEFE00\";\n    ColorCode[\"Red\"] = \"#EE0000\";\n    ColorCode[\"Orange\"] = \"#FFA100\";\n    ColorCode[\"Blue\"] = \"#0000F2\";\n    ColorCode[\"Green\"] = \"#00D800\";\n    ColorCode[\"Purple\"] = \"#A83DD9\";\n    ColorCode[\"Pink\"] = \"#F33D7B\";\n})(ColorCode = exports.ColorCode || (exports.ColorCode = {}));\nvar ColorName;\n(function (ColorName) {\n    ColorName[\"Black\"] = \"black\";\n    ColorName[\"DarkGray\"] = \"darkGray\";\n    ColorName[\"Gray\"] = \"gray\";\n    ColorName[\"Silver\"] = \"silver\";\n    ColorName[\"White\"] = \"white\";\n    ColorName[\"Yellow\"] = \"yellow\";\n    ColorName[\"Red\"] = \"red\";\n    ColorName[\"Orange\"] = \"orange\";\n    ColorName[\"Blue\"] = \"blue\";\n    ColorName[\"Green\"] = \"green\";\n    ColorName[\"Purple\"] = \"purple\";\n    ColorName[\"Pink\"] = \"pink\";\n})(ColorName = exports.ColorName || (exports.ColorName = {}));\nvar ColorAbbreviation;\n(function (ColorAbbreviation) {\n    ColorAbbreviation[\"Black\"] = \"n\";\n    ColorAbbreviation[\"DarkGray\"] = \"d\";\n    ColorAbbreviation[\"Gray\"] = \"l\";\n    ColorAbbreviation[\"Silver\"] = \"s\";\n    ColorAbbreviation[\"White\"] = \"w\";\n    ColorAbbreviation[\"Yellow\"] = \"y\";\n    ColorAbbreviation[\"Red\"] = \"r\";\n    ColorAbbreviation[\"Orange\"] = \"o\";\n    ColorAbbreviation[\"Blue\"] = \"b\";\n    ColorAbbreviation[\"Green\"] = \"g\";\n    ColorAbbreviation[\"Purple\"] = \"m\";\n    ColorAbbreviation[\"Pink\"] = \"p\";\n    ColorAbbreviation[\"Transparent\"] = \"t\";\n})(ColorAbbreviation = exports.ColorAbbreviation || (exports.ColorAbbreviation = {}));\nexports.ColorNameToCode = (_a = {},\n    _a[ColorName.Black] = ColorCode.Black,\n    _a[ColorName.DarkGray] = ColorCode.DarkGray,\n    _a[ColorName.Gray] = ColorCode.Gray,\n    _a[ColorName.Silver] = ColorCode.Silver,\n    _a[ColorName.White] = ColorCode.White,\n    _a[ColorName.Yellow] = ColorCode.Yellow,\n    _a[ColorName.Red] = ColorCode.Red,\n    _a[ColorName.Orange] = ColorCode.Orange,\n    _a[ColorName.Blue] = ColorCode.Blue,\n    _a[ColorName.Green] = ColorCode.Green,\n    _a[ColorName.Purple] = ColorCode.Purple,\n    _a[ColorName.Pink] = ColorCode.Pink,\n    _a);\nexports.ColorAbbreviationToCode = (_b = {},\n    _b[ColorAbbreviation.Black] = ColorCode.Black,\n    _b[ColorAbbreviation.DarkGray] = ColorCode.DarkGray,\n    _b[ColorAbbreviation.Gray] = ColorCode.Gray,\n    _b[ColorAbbreviation.Silver] = ColorCode.Silver,\n    _b[ColorAbbreviation.White] = ColorCode.White,\n    _b[ColorAbbreviation.Yellow] = ColorCode.Yellow,\n    _b[ColorAbbreviation.Red] = ColorCode.Red,\n    _b[ColorAbbreviation.Orange] = ColorCode.Orange,\n    _b[ColorAbbreviation.Blue] = ColorCode.Blue,\n    _b[ColorAbbreviation.Green] = ColorCode.Green,\n    _b[ColorAbbreviation.Purple] = ColorCode.Purple,\n    _b[ColorAbbreviation.Pink] = ColorCode.Pink,\n    _b[ColorAbbreviation.Transparent] = null,\n    _b);\n","\"use strict\";\n/**\n * Methods for manipulating points in 3d space (Vec3)\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Axis;\n(function (Axis) {\n    Axis[Axis[\"X\"] = 0] = \"X\";\n    Axis[Axis[\"Y\"] = 1] = \"Y\";\n    Axis[Axis[\"Z\"] = 2] = \"Z\";\n})(Axis = exports.Axis || (exports.Axis = {}));\nfunction makeMatrix(rows, cols) {\n    var matrix = [];\n    for (var r = 0; r < rows; r++) {\n        matrix[r] = [];\n        for (var c = 0; c < cols; c++) {\n            matrix[r][c] = null;\n        }\n    }\n    return matrix;\n}\nexports.makeMatrix = makeMatrix;\nfunction translate(pos, v) {\n    return pos.map(function (value, index) { return value + v[index]; });\n}\nexports.translate = translate;\nfunction scale(pos, scalar) {\n    return pos.map(function (v) { return v * scalar; });\n}\nexports.scale = scale;\n// Scale a point relative to position vector\nfunction transScale(pos, v, scalar) {\n    // Translate each facelet to cf\n    var iv = v.map(function (x) { return -x; });\n    return translate(scale(translate(pos, iv), scalar), v);\n}\nexports.transScale = transScale;\nfunction rotate(pos, axis, radians) {\n    var newPosition = pos.slice();\n    switch (axis) {\n        case Axis.X:\n            newPosition[2] = (pos[2] * Math.cos(radians)) - (pos[1] * Math.sin(radians));\n            newPosition[1] = (pos[2] * Math.sin(radians)) + (pos[1] * Math.cos(radians));\n            break;\n        case Axis.Y:\n            newPosition[0] = (pos[0] * Math.cos(radians)) + (pos[2] * Math.sin(radians));\n            newPosition[2] = -pos[0] * Math.sin(radians) + pos[2] * Math.cos(radians);\n            break;\n        case Axis.Z:\n            newPosition[0] = (pos[0] * Math.cos(radians)) - (pos[1] * Math.sin(radians));\n            newPosition[1] = (pos[0] * Math.sin(radians)) + (pos[1] * Math.cos(radians));\n            break;\n    }\n    return newPosition;\n}\nexports.rotate = rotate;\nfunction project(pos, d) {\n    return [\n        pos[0] * d / pos[2],\n        pos[1] * d / pos[2],\n        pos[2] // Maintain z coordinate to allow use of rendering tricks\n    ];\n}\nexports.project = project;\nfunction radians2Degrees(radians) {\n    return radians * 180 / Math.PI;\n}\nexports.radians2Degrees = radians2Degrees;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Utlity Methods for creating 2D coodinates for svg polygons\n */\nvar constants_1 = require(\"./constants\");\nvar math_1 = require(\"../math\");\n/**\n * Applies set of rotations to all face rotation vectors.\n */\nfunction rotateFaces(faceRotations, rotations) {\n    return constants_1.AllFaces.reduce(function (acc, face) {\n        rotations.forEach(function (rotation) {\n            if (!acc[face]) {\n                acc[face] = faceRotations[face].slice();\n            }\n            acc[face] = math_1.rotate(acc[face], rotation[0], Math.PI * rotation[1] / 180);\n        });\n        return acc;\n    }, {});\n}\nexports.rotateFaces = rotateFaces;\nfunction makeStickerPosition(face, cubeSize, x, y) {\n    switch (face) {\n        case constants_1.Face.U: return [x, 0, cubeSize - y];\n        case constants_1.Face.R: return [cubeSize, y, x];\n        case constants_1.Face.F: return [x, y, 0];\n        case constants_1.Face.D: return [x, cubeSize, y];\n        case constants_1.Face.L: return [0, y, cubeSize - x];\n        case constants_1.Face.B: return [cubeSize - x, y, cubeSize];\n        default: throw new Error(\"Unknown cube face: '\" + face + \"'\");\n    }\n}\nexports.makeStickerPosition = makeStickerPosition;\n/**\n * Creates 2D coordinates for stickers of a given face of the cube.\n */\nfunction makeFaceStickers(face, options) {\n    var stickers = math_1.makeMatrix(options.cubeSize + 1, options.cubeSize + 1);\n    for (var row = 0; row <= options.cubeSize; row++) {\n        var _loop_1 = function (col) {\n            var sticker = makeStickerPosition(face, options.cubeSize, row, col);\n            // Now scale and tranform point to ensure size/pos independent of dim\n            var centerTranslation = [-options.cubeSize / 2, -options.cubeSize / 2, -options.cubeSize / 2];\n            sticker = math_1.translate(sticker, centerTranslation);\n            sticker = math_1.scale(sticker, 1 / options.cubeSize);\n            // Rotate cube as per perameter settings\n            options.viewportRotations.forEach(function (rotation) {\n                sticker = math_1.rotate(sticker, rotation[0], Math.PI * rotation[1] / 180);\n            });\n            // Move cube away from viewer\n            sticker = math_1.translate(sticker, [0, 0, options.dist]);\n            // Finally project the 3D points onto 2D\n            sticker = math_1.project(sticker, options.dist);\n            stickers[row][col] = sticker;\n        };\n        for (var col = 0; col <= options.cubeSize; col++) {\n            _loop_1(col);\n        }\n    }\n    return stickers;\n}\nexports.makeFaceStickers = makeFaceStickers;\n/**\n * Creates geometry for rubiks cube stickers. Contains 2D coordinates\n * for drawing svg polygons\n */\nfunction makeCubeGeometry(options) {\n    if (options.view === 'plan') {\n        options.viewportRotations = [\n            [math_1.Axis.X, -90]\n        ];\n    }\n    return constants_1.AllFaces.reduce(function (acc, face) {\n        acc[face] = makeFaceStickers(face, options);\n        return acc;\n    }, {});\n}\nexports.makeCubeGeometry = makeCubeGeometry;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d, _e, _f;\nvar math_1 = require(\"./../math\");\nvar constants_1 = require(\"./constants\");\nvar TurnType;\n(function (TurnType) {\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\n})(TurnType = exports.TurnType || (exports.TurnType = {}));\nvar faceIdentity = function (stickerNumber, cubeSize) { return stickerNumber; };\nvar counterClockwiseSticker = function (stickerNumber, cubeSize) { return (stickerNumber * cubeSize) % ((cubeSize * cubeSize) + 1); };\nvar clockwiseSticker = function (stickerNumber, cubeSize) {\n    var numStickers = cubeSize * cubeSize;\n    return (numStickers + 1) - counterClockwiseSticker(stickerNumber, cubeSize);\n};\nvar doubleTurn = function (stickerNumber, cubeSize) {\n    return ((cubeSize * cubeSize) - stickerNumber) + 1;\n};\nvar OppositeTurn = (_a = {},\n    _a[TurnType.Clockwise] = TurnType.CounterClockwise,\n    _a[TurnType.CounterClockwise] = TurnType.Clockwise,\n    _a[TurnType.Double] = TurnType.Double,\n    _a);\n// Faces that wrap around a given axis\nvar AxisMapping = (_b = {},\n    _b[math_1.Axis.X] = [constants_1.Face.U, constants_1.Face.B, constants_1.Face.F, constants_1.Face.D],\n    _b[math_1.Axis.Y] = [constants_1.Face.L, constants_1.Face.B, constants_1.Face.R, constants_1.Face.F],\n    _b[math_1.Axis.Z] = [constants_1.Face.L, constants_1.Face.U, constants_1.Face.R, constants_1.Face.D],\n    _b);\n// Face's orientation related to other faces on a given axis\nvar AxisOrientation = (_c = {},\n    _c[math_1.Axis.X] = (_d = {},\n        _d[constants_1.Face.U] = faceIdentity,\n        _d[constants_1.Face.B] = doubleTurn,\n        _d[constants_1.Face.F] = faceIdentity,\n        _d[constants_1.Face.D] = faceIdentity,\n        _d[constants_1.Face.L] = null,\n        _d[constants_1.Face.R] = null,\n        _d),\n    _c[math_1.Axis.Y] = (_e = {},\n        _e[constants_1.Face.U] = null,\n        _e[constants_1.Face.B] = counterClockwiseSticker,\n        _e[constants_1.Face.F] = counterClockwiseSticker,\n        _e[constants_1.Face.D] = null,\n        _e[constants_1.Face.L] = counterClockwiseSticker,\n        _e[constants_1.Face.R] = counterClockwiseSticker,\n        _e),\n    _c[math_1.Axis.Z] = (_f = {},\n        _f[constants_1.Face.U] = counterClockwiseSticker,\n        _f[constants_1.Face.B] = null,\n        _f[constants_1.Face.F] = null,\n        _f[constants_1.Face.D] = clockwiseSticker,\n        _f[constants_1.Face.L] = faceIdentity,\n        _f[constants_1.Face.R] = doubleTurn,\n        _f),\n    _c);\nvar CubeData = /** @class */ (function () {\n    function CubeData(cubeSize, initialValues) {\n        this.cubeSize = cubeSize;\n        /**\n         *  Data to store face value\n         *  data saved in flat array [1, 2, 3, 4, 5, 6, 7, 8, 9]\n         *  maps to cube stickers like this\n         *\n         *  U Face\n         *  1 | 2 | 3\n         *  ----------\n         *  4 | 5 | 6\n         *  ----------\n         *  7 | 8 | 9\n         *\n         *  Stickers are numbered in that manner starting with the U face\n         *  continuing with this order U, R, F, D, L, B\n         *\n         *  Because each face has a differen't orientation it may not be clear\n         *  how the back faces are numbered. Below is an example 3x3 mapping\n         *\n         *  Example numbers of 3x3 cube. nxn cubes follow the same pattern\n         *\n         *        B\n         *      L U R\n         *        F\n         *        D\n         *                  | 54  | 53  | 52  |\n         *                   -----------------\n         *                  | 51  | 50  | 49  |\n         *                   -----------------\n         *                  | 48  | 47  | 46  |\n         * -----------------                   -----------------\n         *  43  | 40  | 37     1  |  2  |  3    12  | 15  | 18\n         * ----------------- ----------------- -----------------\n         *  44  | 41  | 38     4  |  5  |  6    11  | 14  | 17\n         * ----------------- ----------------- -----------------\n         *  45  | 42  | 39     7  |  8  |  9    10  | 13  | 16\n         * -----------------                   -----------------\n         *                  | 19  | 20  | 21  |\n         *                   -----------------\n         *                  | 22  | 23  | 24  |\n         *                   -----------------\n         *                  | 25  | 26  | 27  |\n         *\n         *                  | 28  | 29  | 30  |\n         *                   -----------------\n         *                  | 31  | 32  | 33  |\n         *                   -----------------\n         *                  | 34  | 35  | 36  |\n         */\n        this.faces = {};\n        this.numStickers = this.cubeSize * this.cubeSize;\n        this.clockwiseMapping = [];\n        this.counterClockwiseMapping = [];\n        this.doubleMapping = [];\n        this.faces = initialValues;\n        if (!this.faces) {\n            this.initValues();\n        }\n        for (var i = 1; i <= this.numStickers; i++) {\n            this.clockwiseMapping.push(clockwiseSticker(i, cubeSize));\n            this.counterClockwiseMapping.push(counterClockwiseSticker(i, cubeSize));\n            this.doubleMapping.push(doubleTurn(i, cubeSize));\n        }\n    }\n    CubeData.prototype.initValues = function () {\n        var _this = this;\n        var currentValue = 1;\n        constants_1.AllFaces.forEach(function (face) {\n            _this.faces[face] = [];\n            for (var i = 0; i < _this.numStickers; i++) {\n                _this.faces[face].push(currentValue++);\n            }\n        });\n    };\n    /**\n     * Rotates values on an outer face of the rubiks cubes\n     */\n    CubeData.prototype.rotateFace = function (face, turn) {\n        var _this = this;\n        // TODO more efficient rotation to not construct so many new arrays\n        switch (turn) {\n            case TurnType.Clockwise:\n                this.faces[face] = this.clockwiseMapping.map(function (newStickerNumber) { return _this.faces[face][newStickerNumber - 1]; });\n                break;\n            case TurnType.CounterClockwise:\n                this.faces[face] = this.counterClockwiseMapping.map(function (newStickerNumber) { return _this.faces[face][newStickerNumber - 1]; });\n                break;\n            case TurnType.Double:\n                this.faces[face].reverse();\n                break;\n        }\n    };\n    /**\n     * Rotates layer values around a given axis\n     */\n    CubeData.prototype.axisRotation = function (offset, range, axis, faceOrder, forward, double) {\n        var _this = this;\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (!forward) {\n            faceOrder.reverse();\n        }\n        // Copy original values to avoid clobbering values when modifying stickers\n        var originalValues = faceOrder.map(function (face) { return _this.faces[face].slice(); });\n        // Copy values\n        for (var i = 0; i < this.cubeSize; i++) {\n            for (var r = 0; r < range; r++) {\n                var stickerIndex = (this.cubeSize * i) + (offset + r);\n                for (var j = 0; j < faceOrder.length; j++) {\n                    var face = faceOrder[j];\n                    var nextFace = double ? faceOrder[(j + 2) % faceOrder.length] : faceOrder[(j + 1) % faceOrder.length];\n                    var valueIndex = AxisOrientation[axis][face](stickerIndex + 1, this.cubeSize) - 1;\n                    var nextFaceValueIndex = AxisOrientation[axis][nextFace](stickerIndex + 1, this.cubeSize) - 1;\n                    this.faces[face][valueIndex] = originalValues[(double ? j + 2 : j + 1) % originalValues.length][nextFaceValueIndex];\n                }\n            }\n        }\n    };\n    /**\n     * Rotate layers around the x axis of the cube\n     */\n    CubeData.prototype.xLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.U, constants_1.Face.F, constants_1.Face.D, constants_1.Face.B];\n        this.axisRotation(offset, range, math_1.Axis.X, faceOrder, forward, double);\n    };\n    /**\n     * Rotate layers around the y axis of the cube\n     */\n    CubeData.prototype.yLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.L, constants_1.Face.F, constants_1.Face.R, constants_1.Face.B];\n        this.axisRotation(offset, range, math_1.Axis.Y, faceOrder, forward, double);\n    };\n    /**\n     * Rotate layers around the z axis of the cube\n     */\n    CubeData.prototype.zLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.U, constants_1.Face.L, constants_1.Face.D, constants_1.Face.R];\n        this.axisRotation(offset, range, math_1.Axis.Z, faceOrder, forward, double);\n    };\n    CubeData.prototype.rTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.R, turnType);\n        this.xLayersRotation(this.cubeSize - 1, turnType === TurnType.Clockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.lTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.L, turnType);\n        this.xLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.uTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.U, turnType);\n        this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.dTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.D, turnType);\n        this.yLayersRotation(this.cubeSize - 1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.fTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.F, turnType);\n        this.zLayersRotation(this.cubeSize - 1, turnType === TurnType.Clockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.bTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.B, turnType);\n        this.zLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double);\n    };\n    CubeData.prototype.mTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.xLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.eTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.yLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.sTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.zLayersRotation(1, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.xTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.R, turnType);\n        this.rotateFace(constants_1.Face.L, OppositeTurn[turnType]);\n        this.xLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.yTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.U, turnType);\n        this.rotateFace(constants_1.Face.D, OppositeTurn[turnType]);\n        this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.zTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.F, turnType);\n        this.rotateFace(constants_1.Face.B, OppositeTurn[turnType]);\n        this.zLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.turn = function (turn) {\n        switch (turn.move) {\n            case constants_1.AlgorithmUnit.F:\n                this.fTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.B:\n                this.bTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.U:\n                this.uTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.D:\n                this.dTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.R:\n                this.rTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.L:\n                this.lTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.M:\n                this.mTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.E:\n                this.eTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.S:\n                this.sTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.X:\n                this.xTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.Y:\n                this.yTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.Z:\n                this.zTurn(turn.turnType);\n                break;\n            default:\n                throw new Error(\"Unrecognized move in turn \" + JSON.stringify(turn));\n        }\n    };\n    return CubeData;\n}());\nexports.CubeData = CubeData;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geometry_1 = require(\"./cube/geometry\");\nvar math_1 = require(\"./math\");\nvar drawing_1 = require(\"./cube/drawing\");\nvar constants_1 = require(\"./cube/constants\");\nvar stickers_1 = require(\"./cube/stickers\");\nvar constants_2 = require(\"./constants\");\nvar defaultOptions = {\n    cubeSize: 3,\n    width: 128,\n    height: 128,\n    viewportRotations: [\n        [math_1.Axis.Y, 45],\n        [math_1.Axis.X, -34],\n    ],\n    colorScheme: constants_1.DefaultColorScheme,\n    backgroundColor: constants_2.ColorName.White,\n    cubeColor: constants_2.ColorName.Black,\n    cubeOpacity: 100,\n    stickerOpacity: 100,\n    dist: 5,\n    outlineWidth: .94,\n    strokeWidth: 0,\n    viewbox: {\n        x: -0.9,\n        y: -0.9,\n        width: 1.8,\n        height: 1.8,\n    }\n};\nfunction cube(container, extraOptions) {\n    if (extraOptions === void 0) { extraOptions = {}; }\n    var options = __assign({}, defaultOptions, extraOptions);\n    var geomety = geometry_1.makeCubeGeometry(options);\n    options.stickerColors = stickers_1.makeStickerColors(options);\n    drawing_1.renderCube(container, geomety, options);\n}\nexports.cube = cube;\n// (SVG as any).on(document, 'DOMContentLoaded', function() {\n//   let options = {\n//     algorithm: 'M2',\n//     mask: Masking.LL,\n//     width: 512,\n//     height: 512,\n//   }\n//   let allOptions = {...defaultOptions, ...options};\n//   let geometry = makeCubeGeometry(allOptions);\n//   allOptions.stickerColors = makeStickerColors(allOptions); // Colors of stickers after algorithms / masking applies\n//   renderCube('drawing', geometry, allOptions);\n// })\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a;\nvar constants_1 = require(\"./../constants\");\nvar SVG = require(\"svg.js\");\nvar geometry_1 = require(\"./geometry\");\nvar math_1 = require(\"../math\");\nvar constants_2 = require(\"./constants\");\nvar arrow_1 = require(\"./parsing/arrow\");\n/**\n * Utility methods for rendering cube geometry using svg.js\n */\n// Rotation vectors to track visibility of each face\nvar defaultFaceRotations = (_a = {},\n    _a[constants_2.Face.U] = [0, -1, 0],\n    _a[constants_2.Face.R] = [1, 0, 0],\n    _a[constants_2.Face.F] = [0, 0, -1],\n    _a[constants_2.Face.D] = [0, 1, 1],\n    _a[constants_2.Face.L] = [-1, 0, 0],\n    _a[constants_2.Face.B] = [0, 0, 1],\n    _a);\nfunction renderCube(container, geometry, options) {\n    var faceRotations = geometry_1.rotateFaces(defaultFaceRotations, options.viewportRotations);\n    var renderOrder = getRenderOrder(faceRotations);\n    var svg = SVG(container).size(options.width, options.height);\n    svg.viewbox(options.viewbox.x, options.viewbox.y, options.viewbox.width, options.viewbox.height);\n    var hiddenFaces = renderOrder.filter(function (face) { return !faceVisible(face, faceRotations); });\n    var visibleFaces = renderOrder.filter(function (face) { return faceVisible(face, faceRotations); });\n    renderBackground(svg, options);\n    // Render hidden faces if cube color has transparency\n    if (options.cubeOpacity < 100) {\n        var cubeOutlineGroup_1 = getCubeOutlineGroup(svg, options);\n        hiddenFaces.forEach(function (face) {\n            renderFaceStickers(svg, face, geometry[face], options);\n            renderCubeOutline(cubeOutlineGroup_1, geometry[face], options);\n        });\n    }\n    var cubeOutlineGroup = getCubeOutlineGroup(svg, options);\n    visibleFaces.forEach(function (face) {\n        renderCubeOutline(cubeOutlineGroup, geometry[face], options);\n        renderFaceStickers(svg, face, geometry[face], options);\n    });\n    if (options.view === 'plan') {\n        var ollGroup_1 = getOllLayerGroup(svg, options);\n        [constants_2.Face.R, constants_2.Face.F, constants_2.Face.L, constants_2.Face.B].forEach(function (face) {\n            renderOLLStickers(ollGroup_1, face, geometry[face], faceRotations, options);\n        });\n    }\n    var arrowGroup = getArrowGroup(svg, geometry[0].length - 1);\n    var arrowDefinitions = [];\n    if (Array.isArray(options.arrows)) {\n        arrowDefinitions = options.arrows;\n    }\n    else if (typeof options.arrows === 'string') {\n        arrowDefinitions = arrow_1.parseArrows(options.arrows);\n    }\n    arrowDefinitions.forEach(function (arrow) {\n        renderArrow(arrowGroup, geometry, arrow);\n    });\n}\nexports.renderCube = renderCube;\n/**\n * Determines face render order based on z position. Faces further away\n * will render first so anything closer will be drawn on top.\n */\nfunction getRenderOrder(faceRotations) {\n    var renderOrder = constants_2.AllFaces.slice().sort(function (a, b) {\n        return faceRotations[b][2] - faceRotations[a][2];\n    });\n    return renderOrder;\n}\nfunction renderBackground(svg, options) {\n    var backgroundSvg = svg.rect(options.viewbox.width, options.viewbox.height);\n    backgroundSvg.x(options.viewbox.x);\n    backgroundSvg.y(options.viewbox.y);\n    backgroundSvg.fill({\n        color: options.backgroundColor\n    });\n}\nfunction faceVisible(face, rotations) {\n    return rotations[face][2] < -0.105;\n}\nfunction getCubeOutlineGroup(svg, options) {\n    var cubeOutlineGroup = svg.group();\n    cubeOutlineGroup.opacity(options.cubeOpacity / 100);\n    cubeOutlineGroup.attr({\n        'stroke-width': '0.1',\n        'stroke-linejoin': 'round',\n    });\n    return cubeOutlineGroup;\n}\nfunction getOllLayerGroup(svg, options) {\n    var group = svg.group();\n    group.opacity(options.stickerOpacity / 100);\n    group.attr({\n        'stroke-opacity': '1',\n        'stroke-width': 0.02,\n        'stroke-linejoin': 'round'\n    });\n    return group;\n}\nfunction getArrowGroup(svg, cubeSize) {\n    var arrowGroup = svg.group();\n    arrowGroup.attr({\n        'opacity': 1,\n        'stroke-opacity': 1,\n        'stroke-width': (.12 / cubeSize),\n        'stroke-linecap': 'round'\n    });\n    return arrowGroup;\n}\nfunction renderCubeOutline(svg, face, options) {\n    var cubeSize = face.length - 1;\n    var width = options.outlineWidth;\n    var outlinePoints = [\n        [face[0][0][0] * width, face[0][0][1] * width],\n        [face[cubeSize][0][0] * width, face[cubeSize][0][1] * width],\n        [face[cubeSize][cubeSize][0] * width, face[cubeSize][cubeSize][1] * width],\n        [face[0][cubeSize][0] * width, face[0][cubeSize][1] * width],\n    ];\n    var polygon = svg.polygon(outlinePoints);\n    polygon.fill(options.cubeColor);\n    polygon.stroke(options.cubeColor);\n    return polygon;\n}\nfunction renderFaceStickers(svg, face, stickers, options) {\n    var cubeSize = stickers.length - 1;\n    var group = svg.group();\n    group.opacity(options.stickerOpacity / 100);\n    group.attr({\n        'stoke-opacity': '0.5',\n        'stroke-width': options.strokeWidth,\n        'stroke-linejoin': 'round'\n    });\n    for (var i = 0; i < cubeSize; i++) {\n        for (var j = 0; j < cubeSize; j++) {\n            var centerPoint = [\n                (stickers[j][i][0] + stickers[j + 1][i + 1][0]) / 2,\n                (stickers[j][i][1] + stickers[j + 1][i + 1][1]) / 2,\n                0\n            ];\n            // Scale points in towards centre\n            var p1 = math_1.transScale(stickers[j][i], centerPoint, .85);\n            var p2 = math_1.transScale(stickers[j + 1][i], centerPoint, .85);\n            var p3 = math_1.transScale(stickers[j + 1][i + 1], centerPoint, .85);\n            var p4 = math_1.transScale(stickers[j][i + 1], centerPoint, .85);\n            var color = getStickerColor(face, i, j, options);\n            renderSticker(group, p1, p2, p3, p4, color, options.cubeColor);\n        }\n    }\n    return group;\n}\nfunction renderSticker(g, p1, p2, p3, p4, stickerColor, cubeColor) {\n    var stickerPoints = [\n        [p1[0], p1[1]],\n        [p2[0], p2[1]],\n        [p3[0], p3[1]],\n        [p4[0], p4[1]],\n    ];\n    var polygon = g.polygon(stickerPoints);\n    polygon.fill(stickerColor);\n    polygon.stroke(cubeColor);\n    return polygon;\n}\n/**\n * Starting with U, stickers are numbered from\n * their face starting with the top left corner\n * sticker.\n *\n * U Face\n * 1 | 2 | 3\n * ----------\n * 4 | 5 | 6\n * ----------\n * 7 | 8 | 9\n *\n * And so on for faces R, F, D, L, B.\n * So R's top left corner for a 3x3 cube would be # 10\n *\n * An individual sticker's color is obtained by indexing\n * into the array of sticker colors by the number the sticker is\n */\nfunction getStickerColor(face, row, col, options) {\n    if (!Array.isArray(options.stickerColors)) {\n        return options.colorScheme[face] || constants_1.ColorName.Black;\n    }\n    var faceIndex = constants_2.AllFaces.indexOf(face);\n    var stickerNumber = (row * options.cubeSize) + col;\n    var colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber;\n    if (options.stickerColors.length <= colorIndex) {\n        return constants_1.ColorName.Black;\n    }\n    return options.stickerColors[colorIndex];\n}\n// Renders the top rim of the R U L and B faces out from side of cube\nfunction renderOLLStickers(group, face, stickers, rotations, options) {\n    // Translation vector, to move faces out\n    var v1 = math_1.scale(rotations[face], 0);\n    var v2 = math_1.scale(rotations[face], .2);\n    for (var i = 0; i < options.cubeSize; i++) {\n        // find center point of sticker\n        var centerPoint = [\n            (stickers[i][0][0] + stickers[i + 1][1][0]) / 2,\n            (stickers[i][0][1] + stickers[i + 1][1][1]) / 2,\n            0\n        ];\n        var p1 = math_1.translate(math_1.transScale(stickers[i][0], centerPoint, .94), v1);\n        var p2 = math_1.translate(math_1.transScale(stickers[i + 1][0], centerPoint, .94), v1);\n        var p3 = math_1.translate(math_1.transScale(stickers[i + 1][1], centerPoint, .94), v2);\n        var p4 = math_1.translate(math_1.transScale(stickers[i][1], centerPoint, .94), v2);\n        renderSticker(group, p1, p2, p3, p4, getStickerColor(face, 0, i, options), options.cubeColor);\n    }\n}\nexports.renderOLLStickers = renderOLLStickers;\n/**\n * Generates svg for an arrow pointing from sticker s1 to s2\n */\nfunction renderArrow(group, geometry, arrow) {\n    var cubeSize = geometry[0].length - 1;\n    // Find center point for each facelet\n    var p1y = Math.floor(arrow.s1.n / cubeSize);\n    var p1x = arrow.s1.n % cubeSize;\n    var p1 = [\n        (geometry[arrow.s1.face][p1x][p1y][0] + geometry[arrow.s1.face][p1x + 1][p1y + 1][0]) / 2,\n        (geometry[arrow.s1.face][p1x][p1y][1] + geometry[arrow.s1.face][p1x + 1][p1y + 1][1]) / 2,\n        0\n    ];\n    var p2y = Math.floor(arrow.s2.n / cubeSize);\n    var p2x = arrow.s2.n % cubeSize;\n    var p2 = [\n        (geometry[arrow.s1.face][p2x][p2y][0] + geometry[arrow.s1.face][p2x + 1][p2y + 1][0]) / 2,\n        (geometry[arrow.s1.face][p2x][p2y][1] + geometry[arrow.s1.face][p2x + 1][p2y + 1][1]) / 2,\n        0\n    ];\n    // Find midpoint between p1 and p2\n    var center = [\n        (p1[0] + p2[0]) / 2,\n        (p1[1] + p2[1]) / 2,\n        0\n    ];\n    // Shorten arrows towards midpoint according to config\n    p1 = math_1.transScale(p1, center, arrow.scale / 10);\n    p2 = math_1.transScale(p2, center, arrow.scale / 10);\n    var p3;\n    if (arrow.s3) {\n        var p3y = Math.floor(arrow.s3.n / cubeSize);\n        var p3x = arrow.s3.n % cubeSize;\n        p3 = [\n            (geometry[arrow.s1.face][p3x][p3y][0] + geometry[arrow.s1.face][p3x + 1][p3y + 1][0]) / 2,\n            (geometry[arrow.s1.face][p3x][p3y][1] + geometry[arrow.s1.face][p3x + 1][p3y + 1][1]) / 2,\n            0\n        ];\n        p3 = math_1.transScale(p3, center, arrow.influence / 5);\n    }\n    // Calculate arrow rotation\n    var p_ = p3 ? p3 : p1;\n    var rotation = p_[1] > p2[1] ? 270 : 90;\n    if (p2[0] - p_[0] != 0) {\n        rotation = math_1.radians2Degrees(Math.atan((p2[1] - p_[1]) / (p2[0] - p_[0])));\n        rotation = (p_[0] > p2[0]) ? rotation + 180 : rotation;\n    }\n    // Draw line\n    var lineSvg = group.path(\"M \" + p1[0] + \",\" + p1[1] + \" \" + (p3 ? 'Q ' + p3[0] + ',' + p3[1] : 'L') + \" \" + p2[0] + \",\" + p2[1]);\n    lineSvg.fill('none');\n    lineSvg.stroke({\n        color: arrow.color,\n        opacity: 1\n    });\n    // Draw arrow head\n    var headSvg = group.path('M 5.77,0.0 L -2.88,5.0 L -2.88,-5.0 L 5.77,0.0 z');\n    headSvg.attr({\n        transform: \"translate(\" + p2[0] + \",\" + p2[1] + \") scale(\" + .033 / cubeSize + \") rotate(\" + rotation + \")\"\n    });\n    headSvg.style({\n        fill: arrow.color\n    });\n    headSvg.attr({\n        'stroke-width': 0,\n        'stroke-linejoin': 'round'\n    });\n}\nexports.renderArrow = renderArrow;\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../constants\");\nvar constants_2 = require(\"../../constants\");\nvar color_1 = require(\"./color\");\nvar stickerPattern = '([URFDLB])([0-9]+)';\nvar colorPattern = '(black|dgrey|grey|silver|white|yellow|red|orange|blue|green|purple|pink|[0-9a-fA-F]{6}|[0-9a-fA-F]{3})';\nvar arrowPattern = \"^(\" + stickerPattern + \")(\" + stickerPattern + \")(\" + stickerPattern + \")?(-s([0-9+]))?(-i([0-9+]))?(-\" + colorPattern + \")?\";\nfunction parseArrows(raw) {\n    if (typeof raw !== 'string') {\n        return [];\n    }\n    return raw.split(',')\n        .map(function (part) { return parseArrow(part); })\n        .filter(function (arrow) { return !!arrow; });\n}\nexports.parseArrows = parseArrows;\nfunction parseArrow(raw) {\n    if (typeof raw !== 'string') {\n        return null;\n    }\n    var arrowRegex = new RegExp(arrowPattern);\n    var match = arrowRegex.exec(raw);\n    if (!match) {\n        return null;\n    }\n    return {\n        s1: {\n            face: constants_1.Face[match[2]],\n            n: parseInt(match[3])\n        },\n        s2: {\n            face: constants_1.Face[match[5]],\n            n: parseInt(match[6])\n        },\n        s3: !match[7] ? undefined : {\n            face: constants_1.Face[match[8]],\n            n: parseInt(match[9])\n        },\n        color: match[15] ? color_1.parseColor(match[15]) : constants_2.ColorCode.Gray,\n        scale: match[11] ? parseInt(match[11]) : 10,\n        influence: match[13] ? parseInt(match[13]) : 10\n    };\n}\nexports.parseArrow = parseArrow;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../../constants\");\nfunction parseColor(raw) {\n    var colorcodeRegex = /^[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/;\n    // Append # for color codes\n    if (colorcodeRegex.exec(raw)) {\n        return \"#\" + raw;\n    }\n    if (constants_1.ColorAbbreviationToCode[raw]) {\n        return constants_1.ColorAbbreviationToCode[raw];\n    }\n    if (constants_1.ColorNameToCode[raw]) {\n        return constants_1.ColorNameToCode[raw];\n    }\n    // Default color\n    return constants_1.ColorCode.Gray;\n}\nexports.parseColor = parseColor;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar masking_1 = require(\"./masking\");\nvar simulation_1 = require(\"./simulation\");\nvar algorithm_1 = require(\"./parsing/algorithm\");\nvar constants_1 = require(\"./constants\");\nvar constants_2 = require(\"../constants\");\nfunction makeStickerColors(options) {\n    var stickerColors = options.stickerColors;\n    var mask = options.mask ? masking_1.makeMasking(options.mask, options.cubeSize) : null;\n    if (mask && options.maskAlg) {\n        var maskCubeData_1 = new simulation_1.CubeData(options.cubeSize, mask);\n        var alg_1 = algorithm_1.parseAlgorithm(options.maskAlg);\n        alg_1.forEach(function (turn) {\n            maskCubeData_1.turn(turn);\n        });\n        mask = maskCubeData_1.faces;\n    }\n    // Fill with color scheme if sticker colors not predefined.\n    if (!stickerColors) {\n        stickerColors = [].concat.apply([], constants_1.AllFaces.map(function (face) {\n            return Array.apply(null, Array(options.cubeSize * options.cubeSize)).map(function () { return options.colorScheme[face]; });\n        }));\n    }\n    var faceMappedStickers = constants_1.AllFaces.reduce(function (acc, face) {\n        if (!acc[face])\n            acc[face] = [];\n        for (var i = 0; i < options.cubeSize; i++) {\n            for (var j = 0; j < options.cubeSize; j++) {\n                var faceIndex = constants_1.AllFaces.indexOf(face);\n                var stickerNumber = (i * options.cubeSize) + j;\n                var colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber;\n                if (stickerColors.length <= colorIndex) {\n                    acc[face][(options.cubeSize * i) + j] = constants_2.ColorName.Black;\n                }\n                else {\n                    acc[face][(options.cubeSize * i) + j] = stickerColors[colorIndex];\n                }\n                if (mask && !mask[face][(options.cubeSize * i) + j]) {\n                    acc[face][(options.cubeSize * i) + j] = constants_2.ColorCode.DarkGray;\n                }\n            }\n        }\n        return acc;\n    }, {});\n    // Apply Algorithm\n    var cubeData = new simulation_1.CubeData(options.cubeSize, faceMappedStickers);\n    var alg = algorithm_1.parseAlgorithm(options.algorithm);\n    alg.forEach(function (move) {\n        cubeData.turn(move);\n    });\n    return [].concat.apply([], constants_1.AllFaces.map(function (face) { return cubeData.faces[face].slice(); }));\n}\nexports.makeStickerColors = makeStickerColors;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\nvar constants_1 = require(\"./constants\");\nvar maskingFunctions = (_a = {},\n    _a[constants_1.Masking.FL] = (_b = {},\n        _b[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _b[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _b[constants_1.Face.R] = function (row, col, cubeSize) { return row == (cubeSize - 1); },\n        _b[constants_1.Face.L] = function (row, col, cubeSize) { return row == (cubeSize - 1); },\n        _b[constants_1.Face.F] = function (row, col, cubeSize) { return row == (cubeSize - 1); },\n        _b[constants_1.Face.B] = function (row, col, cubeSize) { return row == (cubeSize - 1); },\n        _b),\n    _a[constants_1.Masking.F2L] = (_c = {},\n        _c[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _c[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _c[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _c),\n    _a[constants_1.Masking.LL] = (_d = {},\n        _d[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _d[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _d[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0; },\n        _d),\n    _a[constants_1.Masking.CLL] = (_e = {},\n        _e[constants_1.Face.U] = function (row, col, cubeSize) {\n            return (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) // is center\n                || ((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1)));\n        },\n        _e[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _e[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e),\n    _a[constants_1.Masking.ELL] = (_f = {},\n        _f[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _f[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _f[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f),\n    _a[constants_1.Masking.OLL] = (_g = {},\n        _g[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _g[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _g),\n    _a[constants_1.Masking.OCLL] = (_h = {},\n        _h[constants_1.Face.U] = function (row, col, cubeSize) {\n            return (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) // is center\n                || ((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1)));\n        },\n        _h[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _h),\n    _a[constants_1.Masking.OELL] = (_j = {},\n        _j[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _j[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _j),\n    _a[constants_1.Masking.COLL] = (_k = {},\n        _k[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _k[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _k[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k),\n    _a[constants_1.Masking.OCELL] = (_l = {},\n        _l[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _l[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _l[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l),\n    _a[constants_1.Masking.WV] = (_m = {},\n        _m[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _m[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _m[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _m),\n    _a[constants_1.Masking.VH] = (_o = {},\n        _o[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _o[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _o[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _o),\n    _a[constants_1.Masking.ELS] = (_p = {},\n        _p[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _p[constants_1.Face.D] = function (row, col, cubeSize) { return row == 0 ? col < cubeSize - 1 : true; },\n        _p[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && (row == cubeSize - 1 ? col > 0 : true); },\n        _p[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _p[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && (row == cubeSize - 1 ? col < cubeSize - 1 : true); },\n        _p[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _p),\n    _a[constants_1.Masking.CLS] = (_q = {},\n        _q[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _q[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _q[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _q),\n    _a[constants_1.Masking.CMLL] = (_r = {},\n        _r[constants_1.Face.U] = function (row, col, cubeSize) { return ((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _r[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _r[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 || col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 || col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.F] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.B] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _r),\n    _a[constants_1.Masking.CROSS] = (_s = {},\n        _s[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _s[constants_1.Face.D] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _s[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s),\n    _a[constants_1.Masking.F2L3] = (_t = {},\n        _t[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _t[constants_1.Face.D] = function (row, col, cubeSize) { return (row == 0 && col == cubeSize - 1) || !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))); },\n        _t[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _t[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _t[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _t[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _t),\n    _a[constants_1.Masking.F2L2] = (_u = {},\n        _u[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _u[constants_1.Face.D] = function (row, col, cubeSize) { return row > 0 || (col > 0 && col < cubeSize - 1); },\n        _u[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _u[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _u[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _u[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _u),\n    _a[constants_1.Masking.F2LSM] = (_v = {},\n        _v[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _v[constants_1.Face.D] = function (row, col, cubeSize) { return !((row == 0 || row == (cubeSize - 1)) && (col == 0 || col == (cubeSize - 1))) || (col == 0 && row == cubeSize - 1) || (row == 0 && col == cubeSize - 1); },\n        _v[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _v[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _v[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _v[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _v),\n    _a[constants_1.Masking.F2L1] = (_w = {},\n        _w[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _w[constants_1.Face.D] = function (row, col, cubeSize) { return row !== 0 || col !== cubeSize - 1; },\n        _w[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _w[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _w[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _w[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _w),\n    _a[constants_1.Masking.F2B] = (_x = {},\n        _x[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _x[constants_1.Face.D] = function (row, col, cubeSize) { return (col == 0 || col == cubeSize - 1); },\n        _x[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _x[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _x[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && (col == 0 || col == cubeSize - 1); },\n        _x[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && (col == 0 || col == cubeSize - 1); },\n        _x),\n    _a[constants_1.Masking.LINE] = (_y = {},\n        _y[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.D] = function (row, col, cubeSize) { return col > 0 && col < cubeSize - 1; },\n        _y[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _y[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _y),\n    _a);\nfunction makeMasking(masking, cubeSize) {\n    var _a;\n    if (!maskingFunctions[masking]) {\n        throw new Error(\"invalid masking \" + masking);\n    }\n    var numStickers = cubeSize * cubeSize;\n    var faceValues = (_a = {},\n        _a[constants_1.Face.U] = [],\n        _a[constants_1.Face.F] = [],\n        _a[constants_1.Face.R] = [],\n        _a[constants_1.Face.D] = [],\n        _a[constants_1.Face.L] = [],\n        _a[constants_1.Face.B] = [],\n        _a);\n    var _loop_1 = function (i) {\n        var row = Math.floor(i / cubeSize);\n        var col = i % cubeSize;\n        constants_1.AllFaces.forEach(function (face) {\n            faceValues[face].push(maskingFunctions[masking][face](row, col, cubeSize));\n        });\n    };\n    for (var i = 0; i < numStickers; i++) {\n        _loop_1(i);\n    }\n    return faceValues;\n}\nexports.makeMasking = makeMasking;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar simulation_1 = require(\"../simulation\");\nvar constants_1 = require(\"../constants\");\n/**\n * Takes in an algorithm string and parses the turns from it\n * algorithm string format should be moves separated by a single space\n * (ex. \"U R2 L' x\")\n */\nfunction parseAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    return algorithm.split(' ').map(function (move) {\n        if (move.length > 2) {\n            throw new Error(\"Invalid move (\" + move + \") in algorithm '\" + algorithm + \"'\");\n        }\n        return {\n            move: getMove(move),\n            turnType: getTurnType(move)\n        };\n    });\n}\nexports.parseAlgorithm = parseAlgorithm;\nfunction getMove(move) {\n    if (constants_1.possibleMoves.indexOf(move.charAt(0)) < 0) {\n        throw new Error(\"invalid move (\" + move + \")\");\n    }\n    else\n        return move.charAt(0);\n}\nfunction getTurnType(move) {\n    switch (move.charAt(1)) { // if string is only length 1 .charAt(1) will return empty string\n        case constants_1.TurnAbbreviation.Clockwise:\n            return simulation_1.TurnType.Clockwise;\n        case constants_1.TurnAbbreviation.CounterClockwise:\n            return simulation_1.TurnType.CounterClockwise;\n        case constants_1.TurnAbbreviation.Double:\n            return simulation_1.TurnType.Double;\n        default:\n            throw new Error(\"Invalid move modifier (\" + move.charAt(1) + \") in move '\" + move + \"'\");\n    }\n    ;\n}\n"],"sourceRoot":""}