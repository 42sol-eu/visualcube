{"version":3,"sources":["webpack://sr-visualizer/webpack/universalModuleDefinition","webpack://sr-visualizer/webpack/bootstrap","webpack://sr-visualizer/./src/cube/constants.ts","webpack://sr-visualizer/./src/constants.ts","webpack://sr-visualizer/./src/math.ts","webpack://sr-visualizer/./src/cube/parsing/color.ts","webpack://sr-visualizer/./src/cube/geometry.ts","webpack://sr-visualizer/./src/cube/simulation.ts","webpack://sr-visualizer/./src/cube/parsing/faceletDefinitions.ts","webpack://sr-visualizer/./src/index.ts","webpack://sr-visualizer/./src/cube/drawing.ts","webpack://sr-visualizer/./node_modules/svg.js/dist/svg.js","webpack://sr-visualizer/./src/cube/parsing/arrow.ts","webpack://sr-visualizer/./src/cube/stickers.ts","webpack://sr-visualizer/./src/cube/masking.ts","webpack://sr-visualizer/./src/cube/parsing/algorithm.ts","webpack://sr-visualizer/./src/cube/parsing/options.ts","webpack://sr-visualizer/./src/cube/parsing/rotation.ts","webpack://sr-visualizer/./src/cube/parsing/faceletColors.ts","webpack://sr-visualizer/./src/cube/parsing/colorScheme.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_a","_b","Face","constants_1","AllFaces","U","R","F","D","L","B","AlgorithmUnit","FaceRotationVectors","DefaultColorScheme","ColorCode","Yellow","Red","Blue","White","Orange","Green","JapaneseColorScheme","AxisSymbolToAxis","x","y","z","possibleMoves","M","E","S","X","Y","Z","TurnAbbreviation","Masking","_c","_d","ColorName","ColorAbbreviation","FaceletDefinition","ColorNameToCode","Black","DarkGray","Gray","Silver","Purple","Pink","ColorAbbreviationToCode","Transparent","FaceletAbbreviateToDefinition","u","Up","f","Front","Right","Down","Left","b","Back","Oriented","Blank","FaceletToFace","FaceletToColor","Axis","translate","pos","v","map","index","scale","scalar","makeMatrix","rows","cols","matrix","transScale","rotate","axis","radians","newPosition","slice","Math","cos","sin","project","radians2Degrees","PI","parseColor","raw","exec","math_1","makeStickerPosition","face","cubeSize","Error","makeFaceStickers","options","stickers","row","_loop_1","col","sticker","centerTranslation","viewportRotations","forEach","rotation","dist","rotateFaces","faceRotations","rotations","reduce","acc","makeCubeGeometry","view","_e","_f","TurnType","faceIdentity","stickerNumber","counterClockwiseSticker","clockwiseSticker","doubleTurn","OppositeTurn","Clockwise","CounterClockwise","Double","AxisOrientation","CubeData","initialValues","this","faces","numStickers","clockwiseMapping","counterClockwiseMapping","doubleMapping","initValues","push","_this","currentValue","rotateFace","turn","newStickerNumber","reverse","axisRotation","offset","range","faceOrder","forward","double","originalValues","stickerIndex","j","length","nextFace","valueIndex","nextFaceValueIndex","xLayersRotation","yLayersRotation","zLayersRotation","safeSlices","rTurn","turnType","slices","lTurn","uTurn","dTurn","fTurn","bTurn","mTurn","eTurn","sTurn","xTurn","yTurn","zTurn","move","JSON","stringify","parseFaceletDefinitions","rawValue","colors","charAt","__assign","assign","arguments","apply","geometry_1","drawing_1","stickers_1","constants_2","options_1","faceletDefinitions_1","defaultOptions","width","height","colorScheme","cubeColor","cubeOpacity","stickerOpacity","outlineWidth","strokeWidth","viewbox","cubeSVG","container","extraOptions","getOptions","geomety","stickerColors","makeStickerColors","renderCube","parsedOptions","parseOptions","facelets","cubePNG","element","document","createElement","setTimeout","svgElement","querySelector","targetImage","appendChild","can","ctx","getContext","loader","Image","onload","drawImage","src","toDataURL","svgAsXML","XMLSerializer","serializeToString","encodeURIComponent","SVG","arrow_1","defaultFaceRotations","faceVisible","getCubeOutlineGroup","svg","cubeOutlineGroup","group","opacity","attr","stroke-width","stroke-linejoin","renderCubeOutline","outlinePoints","polygon","fill","stroke","renderFaceStickers","stoke-opacity","centerPoint","p1","p2","p3","p4","color","getStickerColor","renderSticker","g","stickerColor","stickerPoints","faceIndex","indexOf","colorIndex","Array","isArray","fd","face_1","renderOLLStickers","v1","v2","renderArrow","geometry","arrow","p1y","floor","s1","p1x","p2y","s2","p2x","center","s3","p3y","p3x","influence","p_","atan","lineSvg","path","headSvg","transform","style","renderOrder","sort","a","getRenderOrder","size","hiddenFaces","filter","visibleFaces","backgroundSvg","rect","backgroundColor","renderBackground","cubeOutlineGroup_1","ollGroup_1","stroke-opacity","getOllLayerGroup","arrowGroup","stroke-linecap","getArrowGroup","arrowDefinitions","arrows","parseArrows","__WEBPACK_AMD_DEFINE_RESULT__","undefined","supported","Doc","parser","draw","prepare","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","setAttribute","extend","methods","pop","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","parse","getAttribute","body","getElementsByTagName","documentElement","nested","poly","polyline","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","array","block","il","result","degrees","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","cx","cy","rx","ry","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","match","test","replace","parseInt","substring","join","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","isColor","fallback","valueOf","lastValue","lastDestination","settle","seen","split","string","trim","parseFloat","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","box","bbox","isNaN","getBBox","pathHandlers","p0","H","V","C","Q","T","A","mlhvqtcsa","jl","toUpperCase","PathArray","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","prev","curr","concat","Point","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","_events","dom","proportionalSize","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","inside","show","hide","visible","classes","hasClass","addClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","well","Parent","innerHTML","firstChild","childNodes","each","lines","fn","removeAttribute","keys","is","obj","easing","-","<>",">","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","Boolean","min","fire","fx","eachAt","self","Matrix","multiply","undo","extract","isEased","real","G","num","Text","plot","leading","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","parseMatrix","around","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listenerId","events","listener","binding","bag","_svgjsListenerId","ev","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","getElementById","version","spof","nextSibling","siblings","position","next","previous","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","symbol","Use","file","use","Rect","Circle","circle","Ellipse","ellipse","Line","line","Polyline","Polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","loaded","error","_rebuild","_build","oy","nodeType","newLined","textContent","build","tspan","newLine","textPath","blankLineOffset","dy","plain","Tspan","dx","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","toLowerCase","comp","w","h","abs","extension","dmove","radius","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","color_1","arrowPattern","parseArrow","RegExp","part","masking_1","simulation_1","algorithm_1","makeMasking","maskAlg","maskCubeData_1","parseAlgorithm","faceMappedStickers","cubeData","alg","case","parseCase","algorithm","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","maskingFunctions","FL","F2L","LL","CLL","ELL","OLL","OCLL","OELL","COLL","OCELL","WV","VH","ELS","CLS","CMLL","CROSS","F2L3","F2L2","F2LSM","F2L1","F2B","LINE","masking","faceValues","turnRegex","Opposite","turns","rawSlices","rawFace","outerBlockIndicator","rawType","isLowerCaseMove","getMove","getTurnType","getSlices","rotation_1","faceletColors_1","colorScheme_1","rawOptions","queryString","substr","pairs","pair","decodeURIComponent","parseQuery","paramValue","parseRotationSequence","parseFaceletColors","parseColorScheme","rawSequence","rotationRegex","matchText","axisSymbol","parsed","scheme","rawColors","parsedColor","colorCode","parseCommaSeparatedValues","parseAbbreviations"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sr-visualizer\"] = factory();\n\telse\n\t\troot[\"sr-visualizer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b;\nvar constants_1 = require(\"./../constants\");\nvar Face;\n(function (Face) {\n    Face[Face[\"U\"] = 0] = \"U\";\n    Face[Face[\"R\"] = 1] = \"R\";\n    Face[Face[\"F\"] = 2] = \"F\";\n    Face[Face[\"D\"] = 3] = \"D\";\n    Face[Face[\"L\"] = 4] = \"L\";\n    Face[Face[\"B\"] = 5] = \"B\";\n})(Face = exports.Face || (exports.Face = {}));\nexports.AllFaces = [Face.U, Face.R, Face.F, Face.D, Face.L, Face.B];\nvar FaceRotationVectors = /** @class */ (function () {\n    function FaceRotationVectors() {\n    }\n    FaceRotationVectors.U = [0, -1, 0];\n    FaceRotationVectors.R = [1, 0, 0];\n    FaceRotationVectors.F = [0, 0, -1];\n    FaceRotationVectors.D = [0, 1, 0];\n    FaceRotationVectors.L = [-1, 0, 0];\n    FaceRotationVectors.B = [0, 0, 1];\n    return FaceRotationVectors;\n}());\nexports.FaceRotationVectors = FaceRotationVectors;\nexports.DefaultColorScheme = (_a = {},\n    _a[Face.U] = constants_1.ColorCode.Yellow,\n    _a[Face.R] = constants_1.ColorCode.Red,\n    _a[Face.F] = constants_1.ColorCode.Blue,\n    _a[Face.D] = constants_1.ColorCode.White,\n    _a[Face.L] = constants_1.ColorCode.Orange,\n    _a[Face.B] = constants_1.ColorCode.Green,\n    _a);\nexports.JapaneseColorScheme = (_b = {},\n    _b[Face.U] = constants_1.ColorCode.Blue,\n    _b[Face.R] = constants_1.ColorCode.Orange,\n    _b[Face.F] = constants_1.ColorCode.Green,\n    _b[Face.D] = constants_1.ColorCode.White,\n    _b[Face.L] = constants_1.ColorCode.Red,\n    _b[Face.B] = constants_1.ColorCode.Yellow,\n    _b);\nvar AlgorithmUnit;\n(function (AlgorithmUnit) {\n    AlgorithmUnit[\"F\"] = \"F\";\n    AlgorithmUnit[\"U\"] = \"U\";\n    AlgorithmUnit[\"R\"] = \"R\";\n    AlgorithmUnit[\"L\"] = \"L\";\n    AlgorithmUnit[\"D\"] = \"D\";\n    AlgorithmUnit[\"B\"] = \"B\";\n    AlgorithmUnit[\"M\"] = \"M\";\n    AlgorithmUnit[\"E\"] = \"E\";\n    AlgorithmUnit[\"S\"] = \"S\";\n    AlgorithmUnit[\"X\"] = \"x\";\n    AlgorithmUnit[\"Y\"] = \"y\";\n    AlgorithmUnit[\"Z\"] = \"z\";\n})(AlgorithmUnit = exports.AlgorithmUnit || (exports.AlgorithmUnit = {}));\nexports.AxisSymbolToAxis = {\n    x: 0 /* X */,\n    y: 1 /* Y */,\n    z: 2 /* Z */,\n};\nexports.possibleMoves = [\n    AlgorithmUnit.F,\n    AlgorithmUnit.U,\n    AlgorithmUnit.R,\n    AlgorithmUnit.L,\n    AlgorithmUnit.D,\n    AlgorithmUnit.B,\n    AlgorithmUnit.M,\n    AlgorithmUnit.E,\n    AlgorithmUnit.S,\n    AlgorithmUnit.X,\n    AlgorithmUnit.Y,\n    AlgorithmUnit.Z,\n];\nvar TurnAbbreviation;\n(function (TurnAbbreviation) {\n    TurnAbbreviation[\"Clockwise\"] = \"\";\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\n    TurnAbbreviation[\"Double\"] = \"2\";\n})(TurnAbbreviation = exports.TurnAbbreviation || (exports.TurnAbbreviation = {}));\nvar Masking;\n(function (Masking) {\n    Masking[\"FL\"] = \"fl\";\n    Masking[\"F2L\"] = \"f2l\";\n    Masking[\"LL\"] = \"ll\";\n    Masking[\"CLL\"] = \"cll\";\n    Masking[\"ELL\"] = \"ell\";\n    Masking[\"OLL\"] = \"oll\";\n    Masking[\"OCLL\"] = \"ocll\";\n    Masking[\"OELL\"] = \"oell\";\n    Masking[\"COLL\"] = \"coll\";\n    Masking[\"OCELL\"] = \"ocell\";\n    Masking[\"WV\"] = \"wv\";\n    Masking[\"VH\"] = \"vh\";\n    Masking[\"ELS\"] = \"els\";\n    Masking[\"CLS\"] = \"cls\";\n    Masking[\"CMLL\"] = \"cmll\";\n    Masking[\"CROSS\"] = \"cross\";\n    Masking[\"F2L3\"] = \"f2l_3\";\n    Masking[\"F2L2\"] = \"f2l_2\";\n    Masking[\"F2LSM\"] = \"f2l_sm\";\n    Masking[\"F2L1\"] = \"f2l_1\";\n    Masking[\"F2B\"] = \"f2b\";\n    Masking[\"LINE\"] = \"line\";\n})(Masking = exports.Masking || (exports.Masking = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d;\nvar ColorCode;\n(function (ColorCode) {\n    ColorCode[\"Black\"] = \"#000000\";\n    ColorCode[\"DarkGray\"] = \"#404040\";\n    ColorCode[\"Gray\"] = \"#808080\";\n    ColorCode[\"Silver\"] = \"#BFBFBF\";\n    ColorCode[\"White\"] = \"#FFFFFF\";\n    ColorCode[\"Yellow\"] = \"#FEFE00\";\n    ColorCode[\"Red\"] = \"#EE0000\";\n    ColorCode[\"Orange\"] = \"#FFA100\";\n    ColorCode[\"Blue\"] = \"#0000F2\";\n    ColorCode[\"Green\"] = \"#00D800\";\n    ColorCode[\"Purple\"] = \"#A83DD9\";\n    ColorCode[\"Pink\"] = \"#F33D7B\";\n    ColorCode[\"Transparent\"] = \"transparent\";\n})(ColorCode = exports.ColorCode || (exports.ColorCode = {}));\nvar ColorName;\n(function (ColorName) {\n    ColorName[\"Black\"] = \"black\";\n    ColorName[\"DarkGray\"] = \"darkGray\";\n    ColorName[\"Gray\"] = \"gray\";\n    ColorName[\"Silver\"] = \"silver\";\n    ColorName[\"White\"] = \"white\";\n    ColorName[\"Yellow\"] = \"yellow\";\n    ColorName[\"Red\"] = \"red\";\n    ColorName[\"Orange\"] = \"orange\";\n    ColorName[\"Blue\"] = \"blue\";\n    ColorName[\"Green\"] = \"green\";\n    ColorName[\"Purple\"] = \"purple\";\n    ColorName[\"Pink\"] = \"pink\";\n    ColorName[\"Transparent\"] = \"transparent\";\n})(ColorName = exports.ColorName || (exports.ColorName = {}));\nvar ColorAbbreviation;\n(function (ColorAbbreviation) {\n    ColorAbbreviation[\"Black\"] = \"n\";\n    ColorAbbreviation[\"DarkGray\"] = \"d\";\n    ColorAbbreviation[\"Gray\"] = \"l\";\n    ColorAbbreviation[\"Silver\"] = \"s\";\n    ColorAbbreviation[\"White\"] = \"w\";\n    ColorAbbreviation[\"Yellow\"] = \"y\";\n    ColorAbbreviation[\"Red\"] = \"r\";\n    ColorAbbreviation[\"Orange\"] = \"o\";\n    ColorAbbreviation[\"Blue\"] = \"b\";\n    ColorAbbreviation[\"Green\"] = \"g\";\n    ColorAbbreviation[\"Purple\"] = \"m\";\n    ColorAbbreviation[\"Pink\"] = \"p\";\n    ColorAbbreviation[\"Transparent\"] = \"t\";\n})(ColorAbbreviation = exports.ColorAbbreviation || (exports.ColorAbbreviation = {}));\nvar FaceletDefinition;\n(function (FaceletDefinition) {\n    FaceletDefinition[\"Up\"] = \"u\";\n    FaceletDefinition[\"Down\"] = \"d\";\n    FaceletDefinition[\"Left\"] = \"l\";\n    FaceletDefinition[\"Right\"] = \"r\";\n    FaceletDefinition[\"Back\"] = \"b\";\n    FaceletDefinition[\"Front\"] = \"f\";\n    FaceletDefinition[\"Transparent\"] = \"t\";\n    FaceletDefinition[\"Oriented\"] = \"o\";\n    FaceletDefinition[\"Blank\"] = \"n\";\n})(FaceletDefinition = exports.FaceletDefinition || (exports.FaceletDefinition = {}));\nexports.ColorNameToCode = (_a = {},\n    _a[ColorName.Black] = ColorCode.Black,\n    _a[ColorName.DarkGray] = ColorCode.DarkGray,\n    _a[ColorName.Gray] = ColorCode.Gray,\n    _a[ColorName.Silver] = ColorCode.Silver,\n    _a[ColorName.White] = ColorCode.White,\n    _a[ColorName.Yellow] = ColorCode.Yellow,\n    _a[ColorName.Red] = ColorCode.Red,\n    _a[ColorName.Orange] = ColorCode.Orange,\n    _a[ColorName.Blue] = ColorCode.Blue,\n    _a[ColorName.Green] = ColorCode.Green,\n    _a[ColorName.Purple] = ColorCode.Purple,\n    _a[ColorName.Pink] = ColorCode.Pink,\n    _a);\nexports.ColorAbbreviationToCode = (_b = {},\n    _b[ColorAbbreviation.Black] = ColorCode.Black,\n    _b[ColorAbbreviation.DarkGray] = ColorCode.DarkGray,\n    _b[ColorAbbreviation.Gray] = ColorCode.Gray,\n    _b[ColorAbbreviation.Silver] = ColorCode.Silver,\n    _b[ColorAbbreviation.White] = ColorCode.White,\n    _b[ColorAbbreviation.Yellow] = ColorCode.Yellow,\n    _b[ColorAbbreviation.Red] = ColorCode.Red,\n    _b[ColorAbbreviation.Orange] = ColorCode.Orange,\n    _b[ColorAbbreviation.Blue] = ColorCode.Blue,\n    _b[ColorAbbreviation.Green] = ColorCode.Green,\n    _b[ColorAbbreviation.Purple] = ColorCode.Purple,\n    _b[ColorAbbreviation.Pink] = ColorCode.Pink,\n    _b[ColorAbbreviation.Transparent] = ColorCode.Transparent,\n    _b);\nexports.FaceletAbbreviateToDefinition = {\n    u: FaceletDefinition.Up,\n    f: FaceletDefinition.Front,\n    r: FaceletDefinition.Right,\n    d: FaceletDefinition.Down,\n    l: FaceletDefinition.Left,\n    b: FaceletDefinition.Back,\n    t: FaceletDefinition.Transparent,\n    o: FaceletDefinition.Oriented,\n    n: FaceletDefinition.Blank,\n};\nexports.FaceletToFace = (_c = {},\n    _c[FaceletDefinition.Up] = 0 /* U */,\n    _c[FaceletDefinition.Down] = 3 /* D */,\n    _c[FaceletDefinition.Left] = 4 /* L */,\n    _c[FaceletDefinition.Right] = 1 /* R */,\n    _c[FaceletDefinition.Front] = 2 /* F */,\n    _c[FaceletDefinition.Back] = 5 /* B */,\n    _c);\nexports.FaceletToColor = (_d = {},\n    _d[FaceletDefinition.Oriented] = ColorName.Gray,\n    _d[FaceletDefinition.Blank] = ColorCode.DarkGray,\n    _d[FaceletDefinition.Transparent] = ColorName.Transparent,\n    _d);\n","\"use strict\";\n/**\n * Methods for manipulating points in 3d space (Vec3)\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Axis;\n(function (Axis) {\n    Axis[Axis[\"X\"] = 0] = \"X\";\n    Axis[Axis[\"Y\"] = 1] = \"Y\";\n    Axis[Axis[\"Z\"] = 2] = \"Z\";\n})(Axis = exports.Axis || (exports.Axis = {}));\nfunction makeMatrix(rows, cols) {\n    var matrix = [];\n    for (var r = 0; r < rows; r++) {\n        matrix[r] = [];\n        for (var c = 0; c < cols; c++) {\n            matrix[r][c] = null;\n        }\n    }\n    return matrix;\n}\nexports.makeMatrix = makeMatrix;\nfunction translate(pos, v) {\n    return pos.map(function (value, index) { return value + v[index]; });\n}\nexports.translate = translate;\nfunction scale(pos, scalar) {\n    return pos.map(function (v) { return v * scalar; });\n}\nexports.scale = scale;\n// Scale a point relative to position vector\nfunction transScale(pos, v, scalar) {\n    // Translate each facelet to cf\n    var iv = v.map(function (x) { return -x; });\n    return translate(scale(translate(pos, iv), scalar), v);\n}\nexports.transScale = transScale;\nfunction rotate(pos, axis, radians) {\n    var newPosition = pos.slice();\n    switch (axis) {\n        case Axis.X:\n            newPosition[2] = pos[2] * Math.cos(radians) - pos[1] * Math.sin(radians);\n            newPosition[1] = pos[2] * Math.sin(radians) + pos[1] * Math.cos(radians);\n            break;\n        case Axis.Y:\n            newPosition[0] = pos[0] * Math.cos(radians) + pos[2] * Math.sin(radians);\n            newPosition[2] = -pos[0] * Math.sin(radians) + pos[2] * Math.cos(radians);\n            break;\n        case Axis.Z:\n            newPosition[0] = pos[0] * Math.cos(radians) - pos[1] * Math.sin(radians);\n            newPosition[1] = pos[0] * Math.sin(radians) + pos[1] * Math.cos(radians);\n            break;\n    }\n    return newPosition;\n}\nexports.rotate = rotate;\nfunction project(pos, d) {\n    return [\n        (pos[0] * d) / pos[2],\n        (pos[1] * d) / pos[2],\n        pos[2],\n    ];\n}\nexports.project = project;\nfunction radians2Degrees(radians) {\n    return (radians * 180) / Math.PI;\n}\nexports.radians2Degrees = radians2Degrees;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../../constants\");\nfunction parseColor(raw) {\n    var colorcodeRegex = /^[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/;\n    // Append # for color codes\n    if (colorcodeRegex.exec(raw)) {\n        return \"#\" + raw;\n    }\n    if (constants_1.ColorAbbreviationToCode[raw]) {\n        return constants_1.ColorAbbreviationToCode[raw];\n    }\n    if (constants_1.ColorNameToCode[raw]) {\n        return constants_1.ColorNameToCode[raw];\n    }\n    // Default color\n    return constants_1.ColorCode.Gray;\n}\nexports.parseColor = parseColor;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Utlity Methods for creating 2D coodinates for svg polygons\n */\nvar constants_1 = require(\"./constants\");\nvar math_1 = require(\"../math\");\n/**\n * Applies set of rotations to all face rotation vectors.\n */\nfunction rotateFaces(faceRotations, rotations) {\n    return constants_1.AllFaces.reduce(function (acc, face) {\n        rotations.forEach(function (rotation) {\n            if (!acc[face]) {\n                acc[face] = faceRotations[face].slice();\n            }\n            acc[face] = math_1.rotate(acc[face], rotation[0], (Math.PI * rotation[1]) / 180);\n        });\n        return acc;\n    }, {});\n}\nexports.rotateFaces = rotateFaces;\nfunction makeStickerPosition(face, cubeSize, x, y) {\n    switch (face) {\n        case constants_1.Face.U:\n            return [x, 0, cubeSize - y];\n        case constants_1.Face.R:\n            return [cubeSize, y, x];\n        case constants_1.Face.F:\n            return [x, y, 0];\n        case constants_1.Face.D:\n            return [x, cubeSize, y];\n        case constants_1.Face.L:\n            return [0, y, cubeSize - x];\n        case constants_1.Face.B:\n            return [cubeSize - x, y, cubeSize];\n        default:\n            throw new Error(\"Unknown cube face: '\" + face + \"'\");\n    }\n}\nexports.makeStickerPosition = makeStickerPosition;\n/**\n * Creates 2D coordinates for stickers of a given face of the cube.\n */\nfunction makeFaceStickers(face, options) {\n    var stickers = math_1.makeMatrix(options.cubeSize + 1, options.cubeSize + 1);\n    for (var row = 0; row <= options.cubeSize; row++) {\n        var _loop_1 = function (col) {\n            var sticker = makeStickerPosition(face, options.cubeSize, row, col);\n            // Now scale and tranform point to ensure size/pos independent of dim\n            var centerTranslation = [-options.cubeSize / 2, -options.cubeSize / 2, -options.cubeSize / 2];\n            sticker = math_1.translate(sticker, centerTranslation);\n            sticker = math_1.scale(sticker, 1 / options.cubeSize);\n            // Rotate cube as per perameter settings\n            options.viewportRotations.forEach(function (rotation) {\n                sticker = math_1.rotate(sticker, rotation[0], (Math.PI * rotation[1]) / 180);\n            });\n            // Move cube away from viewer\n            sticker = math_1.translate(sticker, [0, 0, options.dist]);\n            // Finally project the 3D points onto 2D\n            sticker = math_1.project(sticker, options.dist);\n            stickers[row][col] = sticker;\n        };\n        for (var col = 0; col <= options.cubeSize; col++) {\n            _loop_1(col);\n        }\n    }\n    return stickers;\n}\nexports.makeFaceStickers = makeFaceStickers;\n/**\n * Creates geometry for rubiks cube stickers. Contains 2D coordinates\n * for drawing svg polygons\n */\nfunction makeCubeGeometry(options) {\n    if (options.view === 'plan') {\n        options.viewportRotations = [[math_1.Axis.X, -90]];\n    }\n    return constants_1.AllFaces.reduce(function (acc, face) {\n        acc[face] = makeFaceStickers(face, options);\n        return acc;\n    }, {});\n}\nexports.makeCubeGeometry = makeCubeGeometry;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d, _e, _f;\nvar math_1 = require(\"./../math\");\nvar constants_1 = require(\"./constants\");\nvar TurnType;\n(function (TurnType) {\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\n})(TurnType = exports.TurnType || (exports.TurnType = {}));\nvar faceIdentity = function (stickerNumber, cubeSize) { return stickerNumber; };\nvar counterClockwiseSticker = function (stickerNumber, cubeSize) {\n    return (stickerNumber * cubeSize) % (cubeSize * cubeSize + 1);\n};\nvar clockwiseSticker = function (stickerNumber, cubeSize) {\n    var numStickers = cubeSize * cubeSize;\n    return numStickers + 1 - counterClockwiseSticker(stickerNumber, cubeSize);\n};\nvar doubleTurn = function (stickerNumber, cubeSize) {\n    return cubeSize * cubeSize - stickerNumber + 1;\n};\nvar OppositeTurn = (_a = {},\n    _a[TurnType.Clockwise] = TurnType.CounterClockwise,\n    _a[TurnType.CounterClockwise] = TurnType.Clockwise,\n    _a[TurnType.Double] = TurnType.Double,\n    _a);\n// Faces that wrap around a given axis\nvar AxisMapping = (_b = {},\n    _b[math_1.Axis.X] = [constants_1.Face.U, constants_1.Face.B, constants_1.Face.F, constants_1.Face.D],\n    _b[math_1.Axis.Y] = [constants_1.Face.L, constants_1.Face.B, constants_1.Face.R, constants_1.Face.F],\n    _b[math_1.Axis.Z] = [constants_1.Face.L, constants_1.Face.U, constants_1.Face.R, constants_1.Face.D],\n    _b);\n// Face's orientation related to other faces on a given axis\nvar AxisOrientation = (_c = {},\n    _c[math_1.Axis.X] = (_d = {},\n        _d[constants_1.Face.U] = faceIdentity,\n        _d[constants_1.Face.B] = doubleTurn,\n        _d[constants_1.Face.F] = faceIdentity,\n        _d[constants_1.Face.D] = faceIdentity,\n        _d[constants_1.Face.L] = null,\n        _d[constants_1.Face.R] = null,\n        _d),\n    _c[math_1.Axis.Y] = (_e = {},\n        _e[constants_1.Face.U] = null,\n        _e[constants_1.Face.B] = counterClockwiseSticker,\n        _e[constants_1.Face.F] = counterClockwiseSticker,\n        _e[constants_1.Face.D] = null,\n        _e[constants_1.Face.L] = counterClockwiseSticker,\n        _e[constants_1.Face.R] = counterClockwiseSticker,\n        _e),\n    _c[math_1.Axis.Z] = (_f = {},\n        _f[constants_1.Face.U] = counterClockwiseSticker,\n        _f[constants_1.Face.B] = null,\n        _f[constants_1.Face.F] = null,\n        _f[constants_1.Face.D] = clockwiseSticker,\n        _f[constants_1.Face.L] = faceIdentity,\n        _f[constants_1.Face.R] = doubleTurn,\n        _f),\n    _c);\nvar CubeData = /** @class */ (function () {\n    function CubeData(cubeSize, initialValues) {\n        this.cubeSize = cubeSize;\n        /**\n         *  Data to store face value\n         *  data saved in flat array [1, 2, 3, 4, 5, 6, 7, 8, 9]\n         *  maps to cube stickers like this\n         *\n         *  U Face\n         *  1 | 2 | 3\n         *  ----------\n         *  4 | 5 | 6\n         *  ----------\n         *  7 | 8 | 9\n         *\n         *  Stickers are numbered in that manner starting with the U face\n         *  continuing with this order U, R, F, D, L, B\n         *\n         *  Because each face has a differen't orientation it may not be clear\n         *  how the back faces are numbered. Below is an example 3x3 mapping\n         *\n         *  Example numbers of 3x3 cube. nxn cubes follow the same pattern\n         *\n         *        B\n         *      L U R\n         *        F\n         *        D\n         *                  | 54  | 53  | 52  |\n         *                   -----------------\n         *                  | 51  | 50  | 49  |\n         *                   -----------------\n         *                  | 48  | 47  | 46  |\n         * -----------------                   -----------------\n         *  43  | 40  | 37     1  |  2  |  3    12  | 15  | 18\n         * ----------------- ----------------- -----------------\n         *  44  | 41  | 38     4  |  5  |  6    11  | 14  | 17\n         * ----------------- ----------------- -----------------\n         *  45  | 42  | 39     7  |  8  |  9    10  | 13  | 16\n         * -----------------                   -----------------\n         *                  | 19  | 20  | 21  |\n         *                   -----------------\n         *                  | 22  | 23  | 24  |\n         *                   -----------------\n         *                  | 25  | 26  | 27  |\n         *\n         *                  | 28  | 29  | 30  |\n         *                   -----------------\n         *                  | 31  | 32  | 33  |\n         *                   -----------------\n         *                  | 34  | 35  | 36  |\n         */\n        this.faces = {};\n        this.numStickers = this.cubeSize * this.cubeSize;\n        this.clockwiseMapping = [];\n        this.counterClockwiseMapping = [];\n        this.doubleMapping = [];\n        this.faces = initialValues;\n        if (!this.faces) {\n            this.initValues();\n        }\n        for (var i = 1; i <= this.numStickers; i++) {\n            this.clockwiseMapping.push(clockwiseSticker(i, cubeSize));\n            this.counterClockwiseMapping.push(counterClockwiseSticker(i, cubeSize));\n            this.doubleMapping.push(doubleTurn(i, cubeSize));\n        }\n    }\n    CubeData.prototype.initValues = function () {\n        var _this = this;\n        var currentValue = 1;\n        constants_1.AllFaces.forEach(function (face) {\n            _this.faces[face] = [];\n            for (var i = 0; i < _this.numStickers; i++) {\n                _this.faces[face].push(currentValue++);\n            }\n        });\n    };\n    /**\n     * Rotates values on an outer face of the rubiks cubes\n     */\n    CubeData.prototype.rotateFace = function (face, turn) {\n        var _this = this;\n        // TODO more efficient rotation to not construct so many new arrays\n        switch (turn) {\n            case TurnType.Clockwise:\n                this.faces[face] = this.clockwiseMapping.map(function (newStickerNumber) { return _this.faces[face][newStickerNumber - 1]; });\n                break;\n            case TurnType.CounterClockwise:\n                this.faces[face] = this.counterClockwiseMapping.map(function (newStickerNumber) { return _this.faces[face][newStickerNumber - 1]; });\n                break;\n            case TurnType.Double:\n                this.faces[face].reverse();\n                break;\n        }\n    };\n    /**\n     * Rotates layer values around a given axis\n     */\n    CubeData.prototype.axisRotation = function (offset, range, axis, faceOrder, forward, double) {\n        var _this = this;\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (!forward) {\n            faceOrder.reverse();\n        }\n        // Copy original values to avoid clobbering values when modifying stickers\n        var originalValues = faceOrder.map(function (face) { return _this.faces[face].slice(); });\n        // Copy values\n        for (var i = 0; i < this.cubeSize; i++) {\n            for (var r = 0; r < range; r++) {\n                var stickerIndex = this.cubeSize * i + (offset + r);\n                for (var j = 0; j < faceOrder.length; j++) {\n                    var face = faceOrder[j];\n                    var nextFace = double ? faceOrder[(j + 2) % faceOrder.length] : faceOrder[(j + 1) % faceOrder.length];\n                    var valueIndex = AxisOrientation[axis][face](stickerIndex + 1, this.cubeSize) - 1;\n                    var nextFaceValueIndex = AxisOrientation[axis][nextFace](stickerIndex + 1, this.cubeSize) - 1;\n                    this.faces[face][valueIndex] =\n                        originalValues[(double ? j + 2 : j + 1) % originalValues.length][nextFaceValueIndex];\n                }\n            }\n        }\n    };\n    /**\n     * Rotate layers around the x axis of the cube\n     */\n    CubeData.prototype.xLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.U, constants_1.Face.F, constants_1.Face.D, constants_1.Face.B];\n        this.axisRotation(offset, range, math_1.Axis.X, faceOrder, forward, double);\n    };\n    /**\n     * Rotate layers around the y axis of the cube\n     */\n    CubeData.prototype.yLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.L, constants_1.Face.F, constants_1.Face.R, constants_1.Face.B];\n        this.axisRotation(offset, range, math_1.Axis.Y, faceOrder, forward, double);\n    };\n    /**\n     * Rotate layers around the z axis of the cube\n     */\n    CubeData.prototype.zLayersRotation = function (offset, forward, double, range) {\n        if (forward === void 0) { forward = true; }\n        if (double === void 0) { double = false; }\n        if (range === void 0) { range = 1; }\n        var faceOrder = [constants_1.Face.U, constants_1.Face.L, constants_1.Face.D, constants_1.Face.R];\n        this.axisRotation(offset, range, math_1.Axis.Z, faceOrder, forward, double);\n    };\n    /**\n     * Restricts the number of slices used in outer block moves to the cube size\n     */\n    CubeData.prototype.safeSlices = function (n) {\n        return n > this.cubeSize ? this.cubeSize : n;\n    };\n    CubeData.prototype.rTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.R, turnType);\n        var offset = this.cubeSize - slices;\n        this.xLayersRotation(offset, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.lTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.L, turnType);\n        this.xLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.uTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.U, turnType);\n        this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.dTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.D, turnType);\n        var offset = this.cubeSize - slices;\n        this.yLayersRotation(offset, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.fTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.F, turnType);\n        var offset = this.cubeSize - slices;\n        this.zLayersRotation(offset, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.bTurn = function (turnType, slices) {\n        if (slices === void 0) { slices = 1; }\n        this.rotateFace(constants_1.Face.B, turnType);\n        this.zLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices);\n    };\n    CubeData.prototype.mTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.xLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.eTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.yLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.sTurn = function (turnType) {\n        if (this.cubeSize < 2)\n            return;\n        this.zLayersRotation(1, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize - 2);\n    };\n    CubeData.prototype.xTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.R, turnType);\n        this.rotateFace(constants_1.Face.L, OppositeTurn[turnType]);\n        this.xLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.yTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.U, turnType);\n        this.rotateFace(constants_1.Face.D, OppositeTurn[turnType]);\n        this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.zTurn = function (turnType) {\n        this.rotateFace(constants_1.Face.F, turnType);\n        this.rotateFace(constants_1.Face.B, OppositeTurn[turnType]);\n        this.zLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize);\n    };\n    CubeData.prototype.turn = function (turn) {\n        var slices = this.safeSlices(turn.slices);\n        switch (turn.move) {\n            case constants_1.AlgorithmUnit.F:\n                this.fTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.B:\n                this.bTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.U:\n                this.uTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.D:\n                this.dTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.R:\n                this.rTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.L:\n                this.lTurn(turn.turnType, slices);\n                break;\n            case constants_1.AlgorithmUnit.M:\n                this.mTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.E:\n                this.eTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.S:\n                this.sTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.X:\n                this.xTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.Y:\n                this.yTurn(turn.turnType);\n                break;\n            case constants_1.AlgorithmUnit.Z:\n                this.zTurn(turn.turnType);\n                break;\n            default:\n                throw new Error(\"Unrecognized move in turn \" + JSON.stringify(turn));\n        }\n    };\n    return CubeData;\n}());\nexports.CubeData = CubeData;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../../constants\");\nfunction parseFaceletDefinitions(rawValue) {\n    var colors = [];\n    for (var i = 0; i < rawValue.length; i++) {\n        colors.push(constants_1.FaceletAbbreviateToDefinition[rawValue.charAt(i)]);\n    }\n    return colors;\n}\nexports.parseFaceletDefinitions = parseFaceletDefinitions;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geometry_1 = require(\"./cube/geometry\");\nvar math_1 = require(\"./math\");\nvar drawing_1 = require(\"./cube/drawing\");\nvar constants_1 = require(\"./cube/constants\");\nvar stickers_1 = require(\"./cube/stickers\");\nvar constants_2 = require(\"./constants\");\nvar options_1 = require(\"./cube/parsing/options\");\nvar faceletDefinitions_1 = require(\"./cube/parsing/faceletDefinitions\");\nvar defaultOptions = {\n    cubeSize: 3,\n    width: 128,\n    height: 128,\n    viewportRotations: [[math_1.Axis.Y, 45], [math_1.Axis.X, -34]],\n    colorScheme: constants_1.DefaultColorScheme,\n    cubeColor: constants_2.ColorName.Black,\n    cubeOpacity: 100,\n    stickerOpacity: 100,\n    dist: 5,\n    outlineWidth: 0.94,\n    strokeWidth: 0,\n    viewbox: {\n        x: -0.9,\n        y: -0.9,\n        width: 1.8,\n        height: 1.8,\n    },\n};\nfunction cubeSVG(container, extraOptions) {\n    if (extraOptions === void 0) { extraOptions = {}; }\n    var options = getOptions(defaultOptions, extraOptions);\n    var geomety = geometry_1.makeCubeGeometry(options);\n    options.stickerColors = stickers_1.makeStickerColors(options);\n    drawing_1.renderCube(container, geomety, options);\n}\nexports.cubeSVG = cubeSVG;\nfunction cubePNG(container, extraOptions) {\n    if (extraOptions === void 0) { extraOptions = {}; }\n    var element = document.createElement('div');\n    var options = getOptions(defaultOptions, extraOptions);\n    cubeSVG(element, options);\n    setTimeout(function () {\n        var svgElement = element.querySelector('svg');\n        var targetImage = document.createElement('img'); // Where to draw the result\n        container.appendChild(targetImage);\n        var can = document.createElement('canvas'); // Not shown on page\n        var ctx = can.getContext('2d');\n        var loader = new Image(); // Not shown on page\n        loader.width = can.width = targetImage.width = options.width || 128;\n        loader.height = can.height = targetImage.height = options.height || 128;\n        loader.onload = function () {\n            ctx.drawImage(loader, 0, 0, loader.width, loader.height);\n            targetImage.src = can.toDataURL();\n        };\n        var svgAsXML = new XMLSerializer().serializeToString(svgElement);\n        loader.src = 'data:image/svg+xml,' + encodeURIComponent(svgAsXML);\n    });\n}\nexports.cubePNG = cubePNG;\nfunction getOptions(defaultOptions, extraOptions) {\n    var parsedOptions;\n    if (typeof extraOptions === 'string') {\n        parsedOptions = options_1.parseOptions(extraOptions);\n    }\n    else {\n        parsedOptions = extraOptions;\n    }\n    if (typeof parsedOptions.facelets === 'string') {\n        parsedOptions.facelets = faceletDefinitions_1.parseFaceletDefinitions(parsedOptions.facelets);\n    }\n    return __assign({}, defaultOptions, parsedOptions);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a;\nvar constants_1 = require(\"./../constants\");\nvar SVG = require(\"svg.js\");\nvar geometry_1 = require(\"./geometry\");\nvar math_1 = require(\"../math\");\nvar constants_2 = require(\"./constants\");\nvar arrow_1 = require(\"./parsing/arrow\");\n/**\n * Utility methods for rendering cube geometry using svg.js\n */\n// Rotation vectors to track visibility of each face\nvar defaultFaceRotations = (_a = {},\n    _a[constants_2.Face.U] = [0, -1, 0],\n    _a[constants_2.Face.R] = [1, 0, 0],\n    _a[constants_2.Face.F] = [0, 0, -1],\n    _a[constants_2.Face.D] = [0, 1, 1],\n    _a[constants_2.Face.L] = [-1, 0, 0],\n    _a[constants_2.Face.B] = [0, 0, 1],\n    _a);\nfunction renderCube(container, geometry, options) {\n    var faceRotations = geometry_1.rotateFaces(defaultFaceRotations, options.viewportRotations);\n    var renderOrder = getRenderOrder(faceRotations);\n    var svg = SVG(container).size(options.width, options.height);\n    svg.viewbox(options.viewbox.x, options.viewbox.y, options.viewbox.width, options.viewbox.height);\n    var hiddenFaces = renderOrder.filter(function (face) { return !faceVisible(face, faceRotations); });\n    var visibleFaces = renderOrder.filter(function (face) { return faceVisible(face, faceRotations); });\n    renderBackground(svg, options);\n    // Render hidden faces if cube color has transparency\n    if (options.cubeOpacity < 100) {\n        var cubeOutlineGroup_1 = getCubeOutlineGroup(svg, options);\n        hiddenFaces.forEach(function (face) {\n            renderFaceStickers(svg, face, geometry[face], options);\n            renderCubeOutline(cubeOutlineGroup_1, geometry[face], options);\n        });\n    }\n    var cubeOutlineGroup = getCubeOutlineGroup(svg, options);\n    visibleFaces.forEach(function (face) {\n        renderCubeOutline(cubeOutlineGroup, geometry[face], options);\n        renderFaceStickers(svg, face, geometry[face], options);\n    });\n    if (options.view === 'plan') {\n        var ollGroup_1 = getOllLayerGroup(svg, options);\n        [constants_2.Face.R, constants_2.Face.F, constants_2.Face.L, constants_2.Face.B].forEach(function (face) {\n            renderOLLStickers(ollGroup_1, face, geometry[face], faceRotations, options);\n        });\n    }\n    var arrowGroup = getArrowGroup(svg, geometry[0].length - 1);\n    var arrowDefinitions = [];\n    if (Array.isArray(options.arrows)) {\n        arrowDefinitions = options.arrows;\n    }\n    else if (typeof options.arrows === 'string') {\n        arrowDefinitions = arrow_1.parseArrows(options.arrows);\n    }\n    arrowDefinitions.forEach(function (arrow) {\n        renderArrow(arrowGroup, geometry, arrow);\n    });\n}\nexports.renderCube = renderCube;\n/**\n * Determines face render order based on z position. Faces further away\n * will render first so anything closer will be drawn on top.\n */\nfunction getRenderOrder(faceRotations) {\n    var renderOrder = constants_2.AllFaces.slice().sort(function (a, b) {\n        return faceRotations[b][2] - faceRotations[a][2];\n    });\n    return renderOrder;\n}\nfunction renderBackground(svg, options) {\n    var backgroundSvg = svg.rect(options.viewbox.width, options.viewbox.height);\n    backgroundSvg.x(options.viewbox.x);\n    backgroundSvg.y(options.viewbox.y);\n    if (!options.backgroundColor) {\n        backgroundSvg.fill('none');\n        backgroundSvg.opacity(0);\n    }\n    else {\n        backgroundSvg.fill({\n            color: options.backgroundColor,\n        });\n    }\n}\nfunction faceVisible(face, rotations) {\n    return rotations[face][2] < -0.105;\n}\nfunction getCubeOutlineGroup(svg, options) {\n    var cubeOutlineGroup = svg.group();\n    cubeOutlineGroup.opacity(options.cubeOpacity / 100);\n    cubeOutlineGroup.attr({\n        'stroke-width': '0.1',\n        'stroke-linejoin': 'round',\n    });\n    return cubeOutlineGroup;\n}\nfunction getOllLayerGroup(svg, options) {\n    var group = svg.group();\n    group.opacity(options.stickerOpacity / 100);\n    group.attr({\n        'stroke-opacity': '1',\n        'stroke-width': 0.02,\n        'stroke-linejoin': 'round',\n    });\n    return group;\n}\nfunction getArrowGroup(svg, cubeSize) {\n    var arrowGroup = svg.group();\n    arrowGroup.attr({\n        opacity: 1,\n        'stroke-opacity': 1,\n        'stroke-width': 0.12 / cubeSize,\n        'stroke-linecap': 'round',\n    });\n    return arrowGroup;\n}\nfunction renderCubeOutline(svg, face, options) {\n    var cubeSize = face.length - 1;\n    var width = options.outlineWidth;\n    var outlinePoints = [\n        [face[0][0][0] * width, face[0][0][1] * width],\n        [face[cubeSize][0][0] * width, face[cubeSize][0][1] * width],\n        [face[cubeSize][cubeSize][0] * width, face[cubeSize][cubeSize][1] * width],\n        [face[0][cubeSize][0] * width, face[0][cubeSize][1] * width],\n    ];\n    var polygon = svg.polygon(outlinePoints);\n    polygon.fill(options.cubeColor);\n    polygon.stroke(options.cubeColor);\n    return polygon;\n}\nfunction renderFaceStickers(svg, face, stickers, options) {\n    var cubeSize = stickers.length - 1;\n    var group = svg.group();\n    group.opacity(options.stickerOpacity / 100);\n    group.attr({\n        'stoke-opacity': '0.5',\n        'stroke-width': options.strokeWidth,\n        'stroke-linejoin': 'round',\n    });\n    for (var i = 0; i < cubeSize; i++) {\n        for (var j = 0; j < cubeSize; j++) {\n            var centerPoint = [\n                (stickers[j][i][0] + stickers[j + 1][i + 1][0]) / 2,\n                (stickers[j][i][1] + stickers[j + 1][i + 1][1]) / 2,\n                0,\n            ];\n            // Scale points in towards centre\n            var p1 = math_1.transScale(stickers[j][i], centerPoint, 0.85);\n            var p2 = math_1.transScale(stickers[j + 1][i], centerPoint, 0.85);\n            var p3 = math_1.transScale(stickers[j + 1][i + 1], centerPoint, 0.85);\n            var p4 = math_1.transScale(stickers[j][i + 1], centerPoint, 0.85);\n            var color = getStickerColor(face, i, j, options);\n            if (color !== constants_1.ColorName.Transparent) {\n                renderSticker(group, p1, p2, p3, p4, color, options.cubeColor);\n            }\n        }\n    }\n    return group;\n}\nfunction renderSticker(g, p1, p2, p3, p4, stickerColor, cubeColor) {\n    var stickerPoints = [[p1[0], p1[1]], [p2[0], p2[1]], [p3[0], p3[1]], [p4[0], p4[1]]];\n    var polygon = g.polygon(stickerPoints);\n    polygon.fill(stickerColor);\n    polygon.stroke(cubeColor);\n    return polygon;\n}\n/**\n * Starting with U, stickers are numbered from\n * their face starting with the top left corner\n * sticker.\n *\n * U Face\n * 1 | 2 | 3\n * ----------\n * 4 | 5 | 6\n * ----------\n * 7 | 8 | 9\n *\n * And so on for faces R, F, D, L, B.\n * So R's top left corner for a 3x3 cube would be # 10\n *\n * An individual sticker's color is obtained by indexing\n * into the array of sticker colors by the number the sticker is\n */\nfunction getStickerColor(face, row, col, options) {\n    var faceIndex = constants_2.AllFaces.indexOf(face);\n    var stickerNumber = row * options.cubeSize + col;\n    var colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber;\n    if (!Array.isArray(options.facelets) && Array.isArray(options.stickerColors)) {\n        if (options.stickerColors.length <= colorIndex) {\n            return constants_1.ColorName.Black;\n        }\n        return options.stickerColors[colorIndex];\n    }\n    else if (Array.isArray(options.facelets)) {\n        if (options.facelets.length <= colorIndex) {\n            return constants_1.ColorCode.DarkGray;\n        }\n        var fd = options.facelets[colorIndex];\n        if (constants_1.FaceletToFace[fd] != null) {\n            var face_1 = constants_1.FaceletToFace[fd];\n            return options.colorScheme[face_1];\n        }\n        return constants_1.FaceletToColor[fd] || constants_1.ColorCode.DarkGray;\n    }\n    else {\n        return options.colorScheme[face] || constants_1.ColorName.Black;\n    }\n}\n// Renders the top rim of the R U L and B faces out from side of cube\nfunction renderOLLStickers(group, face, stickers, rotations, options) {\n    // Translation vector, to move faces out\n    var v1 = math_1.scale(rotations[face], 0);\n    var v2 = math_1.scale(rotations[face], 0.2);\n    for (var i = 0; i < options.cubeSize; i++) {\n        // find center point of sticker\n        var centerPoint = [\n            (stickers[i][0][0] + stickers[i + 1][1][0]) / 2,\n            (stickers[i][0][1] + stickers[i + 1][1][1]) / 2,\n            0,\n        ];\n        var p1 = math_1.translate(math_1.transScale(stickers[i][0], centerPoint, 0.94), v1);\n        var p2 = math_1.translate(math_1.transScale(stickers[i + 1][0], centerPoint, 0.94), v1);\n        var p3 = math_1.translate(math_1.transScale(stickers[i + 1][1], centerPoint, 0.94), v2);\n        var p4 = math_1.translate(math_1.transScale(stickers[i][1], centerPoint, 0.94), v2);\n        var stickerColor = getStickerColor(face, 0, i, options);\n        if (stickerColor !== constants_1.ColorName.Transparent) {\n            renderSticker(group, p1, p2, p3, p4, stickerColor, options.cubeColor);\n        }\n    }\n}\nexports.renderOLLStickers = renderOLLStickers;\n/**\n * Generates svg for an arrow pointing from sticker s1 to s2\n */\nfunction renderArrow(group, geometry, arrow) {\n    var cubeSize = geometry[0].length - 1;\n    // Find center point for each facelet\n    var p1y = Math.floor(arrow.s1.n / cubeSize);\n    var p1x = arrow.s1.n % cubeSize;\n    var p1 = [\n        (geometry[arrow.s1.face][p1x][p1y][0] + geometry[arrow.s1.face][p1x + 1][p1y + 1][0]) / 2,\n        (geometry[arrow.s1.face][p1x][p1y][1] + geometry[arrow.s1.face][p1x + 1][p1y + 1][1]) / 2,\n        0,\n    ];\n    var p2y = Math.floor(arrow.s2.n / cubeSize);\n    var p2x = arrow.s2.n % cubeSize;\n    var p2 = [\n        (geometry[arrow.s1.face][p2x][p2y][0] + geometry[arrow.s1.face][p2x + 1][p2y + 1][0]) / 2,\n        (geometry[arrow.s1.face][p2x][p2y][1] + geometry[arrow.s1.face][p2x + 1][p2y + 1][1]) / 2,\n        0,\n    ];\n    // Find midpoint between p1 and p2\n    var center = [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2, 0];\n    // Shorten arrows towards midpoint according to config\n    p1 = math_1.transScale(p1, center, arrow.scale / 10);\n    p2 = math_1.transScale(p2, center, arrow.scale / 10);\n    var p3;\n    if (arrow.s3) {\n        var p3y = Math.floor(arrow.s3.n / cubeSize);\n        var p3x = arrow.s3.n % cubeSize;\n        p3 = [\n            (geometry[arrow.s1.face][p3x][p3y][0] + geometry[arrow.s1.face][p3x + 1][p3y + 1][0]) / 2,\n            (geometry[arrow.s1.face][p3x][p3y][1] + geometry[arrow.s1.face][p3x + 1][p3y + 1][1]) / 2,\n            0,\n        ];\n        p3 = math_1.transScale(p3, center, arrow.influence / 5);\n    }\n    // Calculate arrow rotation\n    var p_ = p3 ? p3 : p1;\n    var rotation = p_[1] > p2[1] ? 270 : 90;\n    if (p2[0] - p_[0] != 0) {\n        rotation = math_1.radians2Degrees(Math.atan((p2[1] - p_[1]) / (p2[0] - p_[0])));\n        rotation = p_[0] > p2[0] ? rotation + 180 : rotation;\n    }\n    // Draw line\n    var lineSvg = group.path(\"M \" + p1[0] + \",\" + p1[1] + \" \" + (p3 ? 'Q ' + p3[0] + ',' + p3[1] : 'L') + \" \" + p2[0] + \",\" + p2[1]);\n    lineSvg.fill('none');\n    lineSvg.stroke({\n        color: arrow.color,\n        opacity: 1,\n    });\n    // Draw arrow head\n    var headSvg = group.path('M 5.77,0.0 L -2.88,5.0 L -2.88,-5.0 L 5.77,0.0 z');\n    headSvg.attr({\n        transform: \"translate(\" + p2[0] + \",\" + p2[1] + \") scale(\" + 0.033 / cubeSize + \") rotate(\" + rotation + \")\",\n    });\n    headSvg.style({\n        fill: arrow.color,\n    });\n    headSvg.attr({\n        'stroke-width': 0,\n        'stroke-linejoin': 'round',\n    });\n}\nexports.renderArrow = renderArrow;\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../constants\");\nvar constants_2 = require(\"../../constants\");\nvar color_1 = require(\"./color\");\nvar stickerPattern = '([URFDLB])([0-9]+)';\nvar colorPattern = '(black|dgrey|grey|silver|white|yellow|red|orange|blue|green|purple|pink|[0-9a-fA-F]{6}|[0-9a-fA-F]{3})';\nvar arrowPattern = \"^(\" + stickerPattern + \")(\" + stickerPattern + \")(\" + stickerPattern + \")?(-s([0-9+]))?(-i([0-9+]))?(-\" + colorPattern + \")?\";\nfunction parseArrows(raw) {\n    if (typeof raw !== 'string') {\n        return [];\n    }\n    return raw\n        .split(',')\n        .map(function (part) { return parseArrow(part); })\n        .filter(function (arrow) { return !!arrow; });\n}\nexports.parseArrows = parseArrows;\nfunction parseArrow(raw) {\n    if (typeof raw !== 'string') {\n        return null;\n    }\n    var arrowRegex = new RegExp(arrowPattern);\n    var match = arrowRegex.exec(raw);\n    if (!match) {\n        return null;\n    }\n    return {\n        s1: {\n            face: constants_1.Face[match[2]],\n            n: parseInt(match[3]),\n        },\n        s2: {\n            face: constants_1.Face[match[5]],\n            n: parseInt(match[6]),\n        },\n        s3: !match[7]\n            ? undefined\n            : {\n                face: constants_1.Face[match[8]],\n                n: parseInt(match[9]),\n            },\n        color: match[15] ? color_1.parseColor(match[15]) : constants_2.ColorCode.Gray,\n        scale: match[11] ? parseInt(match[11]) : 10,\n        influence: match[13] ? parseInt(match[13]) : 10,\n    };\n}\nexports.parseArrow = parseArrow;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar masking_1 = require(\"./masking\");\nvar simulation_1 = require(\"./simulation\");\nvar algorithm_1 = require(\"./parsing/algorithm\");\nvar constants_1 = require(\"./constants\");\nvar constants_2 = require(\"../constants\");\nfunction makeStickerColors(options) {\n    var stickerColors = options.stickerColors;\n    var mask = options.mask ? masking_1.makeMasking(options.mask, options.cubeSize) : null;\n    if (mask && options.maskAlg) {\n        var maskCubeData_1 = new simulation_1.CubeData(options.cubeSize, mask);\n        var alg_1 = algorithm_1.parseAlgorithm(options.maskAlg);\n        alg_1.forEach(function (turn) {\n            maskCubeData_1.turn(turn);\n        });\n        mask = maskCubeData_1.faces;\n    }\n    // Fill with color scheme if sticker colors not predefined.\n    if (!stickerColors) {\n        stickerColors = [].concat.apply([], constants_1.AllFaces.map(function (face) {\n            return Array.apply(null, Array(options.cubeSize * options.cubeSize)).map(function () { return options.colorScheme[face]; });\n        }));\n    }\n    var faceMappedStickers = constants_1.AllFaces.reduce(function (acc, face) {\n        if (!acc[face])\n            acc[face] = [];\n        for (var i = 0; i < options.cubeSize; i++) {\n            for (var j = 0; j < options.cubeSize; j++) {\n                var faceIndex = constants_1.AllFaces.indexOf(face);\n                var stickerNumber = i * options.cubeSize + j;\n                var colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber;\n                if (stickerColors.length <= colorIndex) {\n                    acc[face][options.cubeSize * i + j] = constants_2.ColorName.Black;\n                }\n                else {\n                    acc[face][options.cubeSize * i + j] = stickerColors[colorIndex];\n                }\n                if (mask && !mask[face][options.cubeSize * i + j]) {\n                    acc[face][options.cubeSize * i + j] = constants_2.ColorCode.DarkGray;\n                }\n            }\n        }\n        return acc;\n    }, {});\n    // Apply Algorithm\n    var cubeData = new simulation_1.CubeData(options.cubeSize, faceMappedStickers);\n    var alg = [];\n    if (options.case) {\n        alg = algorithm_1.parseCase(options.case);\n    }\n    else if (options.algorithm) {\n        alg = algorithm_1.parseAlgorithm(options.algorithm);\n    }\n    alg.forEach(function (move) {\n        cubeData.turn(move);\n    });\n    return [].concat.apply([], constants_1.AllFaces.map(function (face) { return cubeData.faces[face].slice(); }));\n}\nexports.makeStickerColors = makeStickerColors;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;\nvar constants_1 = require(\"./constants\");\nvar maskingFunctions = (_a = {},\n    _a[constants_1.Masking.FL] = (_b = {},\n        _b[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _b[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _b[constants_1.Face.R] = function (row, col, cubeSize) { return row == cubeSize - 1; },\n        _b[constants_1.Face.L] = function (row, col, cubeSize) { return row == cubeSize - 1; },\n        _b[constants_1.Face.F] = function (row, col, cubeSize) { return row == cubeSize - 1; },\n        _b[constants_1.Face.B] = function (row, col, cubeSize) { return row == cubeSize - 1; },\n        _b),\n    _a[constants_1.Masking.F2L] = (_c = {},\n        _c[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _c[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _c[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _c[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _c),\n    _a[constants_1.Masking.LL] = (_d = {},\n        _d[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _d[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _d[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0; },\n        _d[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0; },\n        _d),\n    _a[constants_1.Masking.CLL] = (_e = {},\n        _e[constants_1.Face.U] = function (row, col, cubeSize) {\n            return (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) || // is center\n                ((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1));\n        },\n        _e[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _e[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _e),\n    _a[constants_1.Masking.ELL] = (_f = {},\n        _f[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _f[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _f[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _f),\n    _a[constants_1.Masking.OLL] = (_g = {},\n        _g[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _g[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _g[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _g),\n    _a[constants_1.Masking.OCLL] = (_h = {},\n        _h[constants_1.Face.U] = function (row, col, cubeSize) {\n            return (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) || // is center\n                ((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1));\n        },\n        _h[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _h[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _h),\n    _a[constants_1.Masking.OELL] = (_j = {},\n        _j[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _j[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.F] = function (row, col, cubeSize) { return false; },\n        _j[constants_1.Face.B] = function (row, col, cubeSize) { return false; },\n        _j),\n    _a[constants_1.Masking.COLL] = (_k = {},\n        _k[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _k[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _k[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && (col == 0 || col == cubeSize - 1); },\n        _k),\n    _a[constants_1.Masking.OCELL] = (_l = {},\n        _l[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _l[constants_1.Face.D] = function (row, col, cubeSize) { return false; },\n        _l[constants_1.Face.R] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.L] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.F] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l[constants_1.Face.B] = function (row, col, cubeSize) { return row == 0 && col > 0 && col < cubeSize - 1; },\n        _l),\n    _a[constants_1.Masking.WV] = (_m = {},\n        _m[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _m[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _m[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _m[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _m),\n    _a[constants_1.Masking.VH] = (_o = {},\n        _o[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _o[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _o[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _o[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _o),\n    _a[constants_1.Masking.ELS] = (_p = {},\n        _p[constants_1.Face.U] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _p[constants_1.Face.D] = function (row, col, cubeSize) { return (row == 0 ? col < cubeSize - 1 : true); },\n        _p[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && (row == cubeSize - 1 ? col > 0 : true); },\n        _p[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _p[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && (row == cubeSize - 1 ? col < cubeSize - 1 : true); },\n        _p[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _p),\n    _a[constants_1.Masking.CLS] = (_q = {},\n        _q[constants_1.Face.U] = function (row, col, cubeSize) { return true; },\n        _q[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _q[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0; },\n        _q[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _q),\n    _a[constants_1.Masking.CMLL] = (_r = {},\n        _r[constants_1.Face.U] = function (row, col, cubeSize) { return (row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1); },\n        _r[constants_1.Face.D] = function (row, col, cubeSize) { return true; },\n        _r[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 || col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 || col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.F] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _r[constants_1.Face.B] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _r),\n    _a[constants_1.Masking.CROSS] = (_s = {},\n        _s[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _s[constants_1.Face.D] = function (row, col, cubeSize) { return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)); },\n        _s[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _s),\n    _a[constants_1.Masking.F2L3] = (_t = {},\n        _t[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _t[constants_1.Face.D] = function (row, col, cubeSize) {\n            return (row == 0 && col == cubeSize - 1) || !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1));\n        },\n        _t[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _t[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _t[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _t[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _t),\n    _a[constants_1.Masking.F2L2] = (_u = {},\n        _u[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _u[constants_1.Face.D] = function (row, col, cubeSize) { return row > 0 || (col > 0 && col < cubeSize - 1); },\n        _u[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _u[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _u[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _u[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _u),\n    _a[constants_1.Masking.F2LSM] = (_v = {},\n        _v[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _v[constants_1.Face.D] = function (row, col, cubeSize) {\n            return !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)) ||\n                (col == 0 && row == cubeSize - 1) ||\n                (row == 0 && col == cubeSize - 1);\n        },\n        _v[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _v[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _v[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _v[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _v),\n    _a[constants_1.Masking.F2L1] = (_w = {},\n        _w[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _w[constants_1.Face.D] = function (row, col, cubeSize) { return row !== 0 || col !== cubeSize - 1; },\n        _w[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0 && col > 0; },\n        _w[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _w[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col < cubeSize - 1; },\n        _w[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0; },\n        _w),\n    _a[constants_1.Masking.F2B] = (_x = {},\n        _x[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _x[constants_1.Face.D] = function (row, col, cubeSize) { return col == 0 || col == cubeSize - 1; },\n        _x[constants_1.Face.R] = function (row, col, cubeSize) { return row > 0; },\n        _x[constants_1.Face.L] = function (row, col, cubeSize) { return row > 0; },\n        _x[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && (col == 0 || col == cubeSize - 1); },\n        _x[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && (col == 0 || col == cubeSize - 1); },\n        _x),\n    _a[constants_1.Masking.LINE] = (_y = {},\n        _y[constants_1.Face.U] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.D] = function (row, col, cubeSize) { return col > 0 && col < cubeSize - 1; },\n        _y[constants_1.Face.R] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.L] = function (row, col, cubeSize) { return false; },\n        _y[constants_1.Face.F] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _y[constants_1.Face.B] = function (row, col, cubeSize) { return row > 0 && col > 0 && col < cubeSize - 1; },\n        _y),\n    _a);\nfunction makeMasking(masking, cubeSize) {\n    var _a;\n    if (!maskingFunctions[masking]) {\n        throw new Error(\"invalid masking \" + masking);\n    }\n    var numStickers = cubeSize * cubeSize;\n    var faceValues = (_a = {},\n        _a[constants_1.Face.U] = [],\n        _a[constants_1.Face.F] = [],\n        _a[constants_1.Face.R] = [],\n        _a[constants_1.Face.D] = [],\n        _a[constants_1.Face.L] = [],\n        _a[constants_1.Face.B] = [],\n        _a);\n    var _loop_1 = function (i) {\n        var row = Math.floor(i / cubeSize);\n        var col = i % cubeSize;\n        constants_1.AllFaces.forEach(function (face) {\n            faceValues[face].push(maskingFunctions[masking][face](row, col, cubeSize));\n        });\n    };\n    for (var i = 0; i < numStickers; i++) {\n        _loop_1(i);\n    }\n    return faceValues;\n}\nexports.makeMasking = makeMasking;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a;\nvar simulation_1 = require(\"../simulation\");\nvar constants_1 = require(\"../constants\");\nvar turnRegex = /([2-9]+)?([UuFfRrDdLlBbMESxyz])(w)?([2\\'])?/g;\nvar Opposite = (_a = {},\n    _a[simulation_1.TurnType.Clockwise] = simulation_1.TurnType.CounterClockwise,\n    _a[simulation_1.TurnType.CounterClockwise] = simulation_1.TurnType.Clockwise,\n    _a[simulation_1.TurnType.Double] = simulation_1.TurnType.Double,\n    _a);\n/**\n * Takes in an algorithm string and parses the turns from it\n * algorithm string format should be moves separated by a single space\n * (ex. \"U R2 L' x\")\n *\n * https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nfunction parseAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    var turns = [];\n    var match;\n    do {\n        match = turnRegex.exec(algorithm);\n        if (match) {\n            var rawSlices = match[1];\n            var rawFace = match[2];\n            var outerBlockIndicator = match[3];\n            var rawType = match[4] || constants_1.TurnAbbreviation.Clockwise; // Default to clockwise\n            var isLowerCaseMove = rawFace === rawFace.toLowerCase();\n            if (isLowerCaseMove) {\n                rawFace = rawFace.toUpperCase();\n            }\n            var turn = {\n                move: getMove(rawFace),\n                turnType: getTurnType(rawType),\n                slices: isLowerCaseMove ? 2 : getSlices(rawSlices, outerBlockIndicator),\n            };\n            turns.push(turn);\n        }\n    } while (match);\n    return turns;\n}\nexports.parseAlgorithm = parseAlgorithm;\nfunction parseCase(algorithm) {\n    return parseAlgorithm(algorithm)\n        .map(function (turn) {\n        return {\n            turnType: Opposite[turn.turnType],\n            move: turn.move,\n            slices: turn.slices,\n        };\n    })\n        .reverse();\n}\nexports.parseCase = parseCase;\nfunction getSlices(rawSlices, outerBlockIndicator) {\n    if (outerBlockIndicator && !rawSlices) {\n        return 2;\n    }\n    else if (!outerBlockIndicator && rawSlices) {\n        throw new Error(\"Invalid move: Cannot specify num slices if outer block move indicator 'w' is not present\");\n    }\n    else if (!outerBlockIndicator && !rawSlices) {\n        return 1;\n    }\n    else {\n        return parseInt(rawSlices);\n    }\n}\nfunction getMove(rawFace) {\n    if (constants_1.possibleMoves.indexOf(rawFace) < 0) {\n        throw new Error(\"Invalid move (\" + rawFace + \"): Possible turn faces are [U R F L D B M E S]\");\n    }\n    else\n        return rawFace;\n}\nfunction getTurnType(rawType) {\n    switch (rawType) {\n        case constants_1.TurnAbbreviation.Clockwise:\n            return simulation_1.TurnType.Clockwise;\n        case constants_1.TurnAbbreviation.CounterClockwise:\n            return simulation_1.TurnType.CounterClockwise;\n        case constants_1.TurnAbbreviation.Double:\n            return simulation_1.TurnType.Double;\n        default:\n            throw new Error(\"Invalid move modifier (\" + rawType + \")\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rotation_1 = require(\"./rotation\");\nvar faceletColors_1 = require(\"./faceletColors\");\nvar colorScheme_1 = require(\"./colorScheme\");\nvar faceletDefinitions_1 = require(\"./faceletDefinitions\");\n/**\n * Utility methods for parsing the old query param style options\n */\nfunction parseOptions(rawOptions) {\n    var options = {};\n    var params = parseQuery(rawOptions);\n    Object.keys(params).forEach(function (key) {\n        var paramValue = params[key];\n        switch (key) {\n            case 'pzl':\n                options.cubeSize = parseInt(paramValue) || 3;\n                break;\n            case 'size':\n                var size = parseInt(paramValue) || 250;\n                options.width = size;\n                options.height = size;\n                break;\n            case 'view':\n                options.view = paramValue;\n                break;\n            case 'stage':\n                options.mask = paramValue;\n                break;\n            case 'r':\n                options.viewportRotations = rotation_1.parseRotationSequence(paramValue);\n                break;\n            case 'alg':\n                options.algorithm = paramValue;\n                break;\n            case 'case':\n                options.case = paramValue;\n                break;\n            case 'fc':\n                options.stickerColors = faceletColors_1.parseFaceletColors(paramValue);\n                break;\n            case 'sch':\n                options.colorScheme = colorScheme_1.parseColorScheme(paramValue);\n                break;\n            case 'bg':\n                options.backgroundColor = paramValue;\n                break;\n            case 'cc':\n                options.cubeColor = paramValue;\n                break;\n            case 'co':\n                options.cubeOpacity = parseInt(paramValue) || 100;\n                break;\n            case 'fo':\n                options.stickerOpacity = parseInt(paramValue) || 100;\n                break;\n            case 'dist':\n                options.dist = parseInt(paramValue) || 5;\n                break;\n            case 'arw':\n                options.arrows = paramValue;\n                break;\n            case 'fd':\n                options.facelets = faceletDefinitions_1.parseFaceletDefinitions(paramValue);\n                break;\n            case 'ac':\n                // TODO: Support default arrow color\n                console.warn(\"Currently param 'ac' is unsupported\");\n                break;\n        }\n    });\n    return options;\n}\nexports.parseOptions = parseOptions;\nfunction parseQuery(url) {\n    var queryString = url.indexOf('?') > -1 ? url.substr(url.indexOf('?') + 1) : url;\n    var query = {};\n    var pairs = queryString.split('&');\n    for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i].split('=');\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n    }\n    return query;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../constants\");\nfunction parseRotationSequence(rawSequence) {\n    var rotationRegex = /([xyz]-?[0-9][0-9]?[0-9]?)/g;\n    var match;\n    var rotations = [];\n    do {\n        match = rotationRegex.exec(rawSequence);\n        if (match) {\n            var matchText = match[0];\n            var axisSymbol = matchText.charAt(0);\n            var value = matchText.substr(1);\n            var axis = constants_1.AxisSymbolToAxis[axisSymbol];\n            rotations.push([axis, parseInt(value)]);\n        }\n    } while (match);\n    return rotations;\n}\nexports.parseRotationSequence = parseRotationSequence;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"./color\");\nvar constants_1 = require(\"../../constants\");\nfunction parseFaceletColors(rawValue) {\n    var colors = [];\n    if (rawValue.indexOf(',') > -1) {\n        // Parse as comma separated colors\n        rawValue.split(',').forEach(function (value) {\n            var parsed = color_1.parseColor(value);\n            if (parsed) {\n                colors.push(parsed);\n            }\n        });\n    }\n    else {\n        // parse as abbreviations (ex 'yyyyyyyyyrrrrrrrrrbbbbbbbbb....')\n        for (var i = 0; i < rawValue.length; i++) {\n            colors.push(constants_1.ColorAbbreviationToCode[rawValue.charAt(i)]);\n        }\n    }\n    return colors;\n}\nexports.parseFaceletColors = parseFaceletColors;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"./color\");\nvar constants_1 = require(\"../../constants\");\nvar constants_2 = require(\"../constants\");\nfunction parseColorScheme(rawValue) {\n    if (rawValue.indexOf(',') > -1) {\n        return parseCommaSeparatedValues(rawValue);\n    }\n    else {\n        return parseAbbreviations(rawValue);\n    }\n}\nexports.parseColorScheme = parseColorScheme;\nfunction parseAbbreviations(rawValue) {\n    var scheme = {};\n    if (rawValue.length < constants_2.AllFaces.length) {\n        return constants_2.DefaultColorScheme;\n    }\n    constants_2.AllFaces.forEach(function (face, index) {\n        if (rawValue.length > index) {\n            scheme[face] = constants_1.ColorAbbreviationToCode[rawValue.charAt(index)];\n        }\n    });\n    return scheme;\n}\nfunction parseCommaSeparatedValues(rawValue) {\n    var scheme = {};\n    // Parse as comma separated list of colors\n    var rawColors = rawValue.split(',');\n    if (rawColors.length < constants_2.AllFaces.length) {\n        return constants_2.DefaultColorScheme;\n    }\n    constants_2.AllFaces.forEach(function (face, index) {\n        if (rawColors.length > index) {\n            var parsedColor = color_1.parseColor(rawColors[index]);\n            var colorCode = constants_1.ColorNameToCode[parsedColor] || parsedColor;\n            if (parsedColor) {\n                scheme[face] = colorCode;\n            }\n        }\n    });\n    return scheme;\n}\n"],"sourceRoot":""}